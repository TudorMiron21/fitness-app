import { RequestHandler } from "express-serve-static-core";
import { AbortSignalLike } from "@azure/abort-controller";
import { TokenCredential, AzureKeyCredential } from "@azure/core-auth";
export interface WebPubSubServiceCaller {
    sendToConnection: (connectionId: string, message: string, options?: {
        contentType: string;
    } | undefined) => Promise<void>;
    sendToAll: (message: string, options?: {
        filter: string;
        contentType: string;
    }) => Promise<void>;
    removeConnectionsFromGroups(groups: string[], filter: string): Promise<void>;
    addConnectionsToGroups(groups: string[], filter: string): Promise<void>;
    group(groupName: string): {
        removeConnection(connectionId: string): Promise<void>;
        sendToAll(message: string, options?: {
            filter: string;
            contentType: string;
        }): Promise<void>;
    };
    invoke(message: string, body: (data: Uint8Array | undefined, end: boolean) => void, options?: {
        filter: string;
        contentType: string;
    }): Promise<void>;
}
export declare class InprocessServerProxy implements WebPubSubServiceCaller {
    private _tunnel;
    private _hub;
    private _encoder;
    static fromConnectionString(connectionString: string, hub: string, handler?: RequestHandler, reverseProxyEndpoint?: string): InprocessServerProxy;
    constructor(endpoint: string, credential: AzureKeyCredential | TokenCredential, hub: string, handler?: RequestHandler, reverseProxyEndpoint?: string);
    group(groupName: string): {
        removeConnection(connectionId: string): Promise<void>;
        sendToAll(message: string, options?: {
            filter: string;
            contentType: string;
        }): Promise<void>;
    };
    sendToConnection(connectionId: string, message: string, options?: {
        contentType: string;
    } | undefined): Promise<void>;
    sendToAll(message: string, options?: {
        filter: string;
        contentType: string;
    } | undefined): Promise<void>;
    removeConnectionsFromGroups(groups: string[], filter: string): Promise<void>;
    addConnectionsToGroups(groups: string[], filter: string): Promise<void>;
    private _removeConnectionFromGroup;
    private _sendToGroup;
    invoke(message: string, body: (data: Uint8Array | undefined, end: boolean) => void, options?: {
        filter: string;
        contentType: string;
    }): Promise<void>;
    runAsync(abortSignal?: AbortSignalLike): Promise<void>;
    stop(): void;
    use(handler: RequestHandler): void;
    private _getRequestHandler;
    private _getUrl;
}
//# sourceMappingURL=InprocessServerProxy.d.ts.map