import { TunnelMessage } from "./messages";
import { TokenCredential, AzureKeyCredential } from "@azure/core-auth";
import { AbortSignalLike } from "@azure/abort-controller";
export declare class WebPubSubTunnelClient {
    readonly userId: string;
    readonly target?: string | undefined;
    private readonly _emitter;
    private _client;
    private _startedCts;
    id: string;
    currentConnectionId: string | undefined;
    stopped: boolean;
    messageQueue: TunnelMessage[];
    constructor(url: {
        endpoint: URL;
        reverseProxyEndpoint: URL | undefined;
    }, credential: AzureKeyCredential | TokenCredential, userId: string, target?: string | undefined);
    getPrintableIdentifier(): string;
    on(event: "message" | "stop", listener: (...args: any[]) => void): void;
    off(event: "message" | "stop", listener: (...args: any[]) => void): void;
    startAsync(abortSignal?: AbortSignalLike): Promise<string>;
    stop(): void;
    sendAsync(message: TunnelMessage, abortSignal?: AbortSignalLike): Promise<void>;
}
//# sourceMappingURL=WebPubSubTunnelClient.d.ts.map