export declare enum TunnelMessageType {
    None = 0,
    HttpRequest = 1,
    HttpResponse = 2,
    ServiceStatus = 5,
    ConnectionReconnect = 6,
    ConnectionClose = 7,
    ConnectionRebalance = 8,
    ConnectionConnected = 10
}
export declare abstract class TunnelMessage {
    abstract Type: TunnelMessageType;
    TracingId?: number;
}
export declare abstract class TunnelByteContentMessage extends TunnelMessage {
    Content?: Uint8Array | undefined;
    constructor(Content?: Uint8Array | undefined);
}
export declare class TunnelHttpRequestMessage extends TunnelByteContentMessage {
    readonly AckId: number;
    readonly LocalRouting: boolean;
    readonly ChannelName: string;
    readonly HttpMethod: string;
    readonly Url: string;
    readonly Headers?: Record<string, string[]> | undefined;
    Content?: Uint8Array | undefined;
    readonly Type = TunnelMessageType.HttpRequest;
    constructor(AckId: number, LocalRouting: boolean, ChannelName: string, HttpMethod: string, Url: string, Headers?: Record<string, string[]> | undefined, Content?: Uint8Array | undefined);
}
export declare class TunnelHttpResponseMessage extends TunnelByteContentMessage {
    readonly AckId: number;
    readonly LocalRouting: boolean;
    readonly StatusCode: number;
    readonly ChannelName: string;
    readonly NotCompleted: boolean;
    readonly Headers?: Record<string, string[]> | undefined;
    Content?: Uint8Array | undefined;
    readonly Type = TunnelMessageType.HttpResponse;
    constructor(AckId: number, LocalRouting: boolean, StatusCode: number, ChannelName: string, NotCompleted: boolean, Headers?: Record<string, string[]> | undefined, Content?: Uint8Array | undefined);
}
export declare class TunnelConnectionReconnectMessage extends TunnelMessage {
    readonly TargetId: string;
    readonly Endpoint: string;
    readonly Message: string;
    readonly Type = TunnelMessageType.ConnectionReconnect;
    constructor(TargetId: string, Endpoint: string, Message: string);
}
export declare class TunnelConnectionCloseMessage extends TunnelMessage {
    readonly Message: string;
    readonly Type = TunnelMessageType.ConnectionClose;
    constructor(Message: string);
}
export declare class TunnelServiceStatusMessage extends TunnelMessage {
    readonly Message: string;
    readonly Type = TunnelMessageType.ServiceStatus;
    constructor(Message: string);
}
export declare class TunnelConnectionRebalanceMessage extends TunnelMessage {
    readonly TargetId: string;
    readonly Endpoint: string;
    readonly Message: string;
    readonly Type = TunnelMessageType.ConnectionRebalance;
    constructor(TargetId: string, Endpoint: string, Message: string);
}
export declare class TunnelConnectionConnectedMessage extends TunnelMessage {
    readonly ConnectionId: string;
    readonly UserId?: string | undefined;
    readonly ReconnectionToken?: string | undefined;
    readonly Type = TunnelMessageType.ConnectionConnected;
    constructor(ConnectionId: string, UserId?: string | undefined, ReconnectionToken?: string | undefined);
}
//# sourceMappingURL=messages.d.ts.map