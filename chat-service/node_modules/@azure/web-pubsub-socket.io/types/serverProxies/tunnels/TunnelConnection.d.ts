import { TokenCredential, AzureKeyCredential } from "@azure/core-auth";
import { AsyncIterator } from "../utils";
import { AbortSignalLike } from "@azure/abort-controller";
interface ConnectionTarget {
    endpoint: string;
    target?: string;
    reverseProxyEndpoint?: string;
}
export interface TunnelIncomingMessage {
    Url: string;
    HttpMethod: string;
    Headers?: Record<string, string[]>;
    Content?: Uint8Array;
}
export interface TunnelOutgoingMessage {
    StatusCode: number;
    Headers: Record<string, string[]>;
    Content: Uint8Array;
}
export interface TunnelRequestHandler {
    (request: TunnelIncomingMessage, abortSignal?: AbortSignalLike): Promise<TunnelOutgoingMessage | undefined>;
}
export interface HttpRequestLike {
    method: string;
    url: string;
    content?: Uint8Array;
    contentType?: string;
}
export interface HttpResponseLike {
    statusCode: number;
    body: AsyncIterator<Uint8Array>;
}
export declare class TunnelConnection {
    private readonly endpoint;
    private readonly credential;
    private readonly hub;
    requestHandler?: TunnelRequestHandler | undefined;
    private readonly reverseProxyEndpoint?;
    id: string;
    private readonly _ackMap;
    private readonly clients;
    private readonly lifetimeTcs;
    private _stopped;
    private _ackId;
    private _keyMapping;
    constructor(endpoint: string, credential: AzureKeyCredential | TokenCredential, hub: string, requestHandler?: TunnelRequestHandler | undefined, reverseProxyEndpoint?: string | undefined);
    private nextAckId;
    runAsync(shouldRetry?: (e: unknown, retryCount: number) => boolean, abortSignal?: AbortSignalLike): Promise<void>;
    invokeAsync(httpRequest: HttpRequestLike, abortSignal?: AbortSignalLike, consistentKey?: string): Promise<HttpResponseLike>;
    stop(): void;
    private getRandomKey;
    private getClient;
    private getRandomClient;
    private lockClient;
    private releaseClient;
    private processMessage;
    stopConnection(id: string): void;
    startConnectionAsync(target: ConnectionTarget, shouldRetry?: (e: unknown, retryCount: number) => boolean, abortSignal?: AbortSignalLike): Promise<string>;
    private tryEndLife;
    private printClientLines;
    private getUrl;
}
export {};
//# sourceMappingURL=TunnelConnection.d.ts.map