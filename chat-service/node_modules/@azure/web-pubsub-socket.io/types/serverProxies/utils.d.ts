import { AbortSignalLike } from "@azure/abort-controller";
import { AzureKeyCredential } from "@azure/core-auth";
interface ParsedConnectionString {
    credential: AzureKeyCredential;
    endpoint: string;
}
export declare class AckEntity<T> {
    private readonly _reader;
    constructor(ackId: number, reader: (data: T | undefined, error: string | null, done: boolean) => void, abortSignal?: AbortSignalLike);
    ackId: number;
    write(value: T | undefined, error: string | null, done: boolean): void;
}
export declare class PromiseCompletionSource<T> {
    private _resolve;
    private _reject;
    readonly promise: Promise<T>;
    resolve(value: T | PromiseLike<T>): void;
    reject(reason?: any): void;
}
export declare class Guid {
    static newGuid(): string;
}
export declare function parseConnectionString(conn: string): ParsedConnectionString;
export declare class AsyncIterator<T> implements AsyncIterable<T> {
    private items;
    private isClosed;
    private resolveCurrent;
    private errorToThrow;
    add(item: T): void;
    next(): Promise<IteratorResult<T>>;
    error(err: any): void;
    close(): void;
    [Symbol.asyncIterator](): AsyncIterator<T>;
}
export {};
//# sourceMappingURL=utils.d.ts.map