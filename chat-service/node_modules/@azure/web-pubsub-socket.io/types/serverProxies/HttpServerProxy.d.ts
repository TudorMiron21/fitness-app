import { AbortSignal } from "@azure/abort-controller";
import { TokenCredential, AzureKeyCredential } from "@azure/core-auth";
import { TunnelIncomingMessage, TunnelOutgoingMessage } from "./tunnels/TunnelConnection";
export interface HttpServerProxyOptions {
    /**
     * The target HTTP server base url, e.g. https://localhost:8080
     */
    target: string;
}
export interface RunOptions {
    handleProxiedRequest?: (request: TunnelIncomingMessage, time: number, proxiedUrl: URL, invoke: () => Promise<TunnelOutgoingMessage>) => Promise<TunnelOutgoingMessage>;
}
export declare class HttpServerProxy {
    endpoint: string;
    credential: AzureKeyCredential | TokenCredential;
    hub: string;
    private _options;
    private _tunnel;
    private _client;
    id: string;
    static fromConnectionString(connectionString: string, hub: string, options: HttpServerProxyOptions, reverseProxyEndpoint?: string): HttpServerProxy;
    constructor(endpoint: string, credential: AzureKeyCredential | TokenCredential, hub: string, _options: HttpServerProxyOptions, reverseProxyEndpoint?: string);
    runAsync(options: RunOptions, shouldRetry?: (e: unknown, retryCount: number) => boolean, abortSignal?: AbortSignal): Promise<void>;
    getClientAccessUrl(userId?: string, roles?: string[], groups?: string[]): Promise<string>;
    getLiveTraceUrl(): string;
    getLiveTraceToken(): Promise<string>;
    private sendHttpRequest;
}
//# sourceMappingURL=HttpServerProxy.d.ts.map