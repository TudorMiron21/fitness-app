import { AzureSocketIOOptions, AzureSocketIOCredentialOptions } from "../common/utils";
import { WebPubSubConnectionManager } from "./components/web-pubsub-connection-manager";
import * as engine from "engine.io";
import { ClientConnectionContext } from "./components/client-connection-context";
/**
 * In the design of Engine.IO package, the EIO server has its own middlewares rather than sharing with http server.
 * And EIO middlewares is put in the first place when receiving HTTP request. Http server listeners is behind EIO middlewares
 *
 *                          .---------------.   Yes
 *     a HTTP request ---\> |  check(req)?  | --------\>  `handleRequest(req)` (passed into Engine.IO middlewares)
 *                          |               | --------\>  HttpServer.listeners
 *                          .---------------.    No
 *
 * And the Engine.IO handshake behaviour is inside `handleRequest`
 * Web PubSub handshake handler is inside its express middleware.
 *
 * TODO: implment BaseServer rather than extends Server
 **/
export declare class WebPubSubEioServer extends engine.Server {
    webPubSubOptions: AzureSocketIOOptions | AzureSocketIOCredentialOptions;
    webPubSubConnectionManager: WebPubSubConnectionManager;
    private _setuped;
    constructor(options: engine.ServerOptions, webPubSubOptions: AzureSocketIOOptions | AzureSocketIOCredentialOptions);
    setup(): Promise<void>;
    protected createTransport(transportName: string, req: unknown): engine.Transport;
    /**
     *
     * @param _req - handshake request
     * @returns socket id for EIO connection built from handshake request `req`
     */
    generateId: (_req: unknown) => string | undefined;
    /**
     *
     * @param _transport - transport name
     * @returns a list of available transports for upgrade given a certain Transport `transport`
     */
    upgrades: (_transport: string) => Array<string>;
    onConnect(connectionId: string, connectReq: unknown, context: ClientConnectionContext): Promise<void>;
    onUserEvent(connectionId: string, content: unknown): Promise<void>;
    onDisconnected(connectionId: string): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map