import { ConnectResponseHandler as WebPubSubConnectResponseHandler } from "@azure/web-pubsub-express";
import { WebPubSubServiceCaller } from "../../serverProxies";
import { Transport } from "engine.io";
export interface ConnectionError {
    req: unknown;
    code: number;
    message: string;
    context: unknown;
}
/**
 * A logical concept that stands for an Engine.IO client connection, every connection has a unique `connectionId`.
 * It maps Engine.IO Transport behaviours to Azure Web PubSub service REST API calls.
 */
export declare class ClientConnectionContext {
    service: WebPubSubServiceCaller;
    connectionId: string;
    connectResponded: boolean;
    transport: Transport;
    private _connectResponseHandler;
    private _refusedCallback;
    constructor(serviceClient: WebPubSubServiceCaller, connectionId: string, connectResponseHandler: WebPubSubConnectResponseHandler, refusedCallback?: (error: string) => void);
    /**
     * Send `message` to a the bound client connection.
     * @param message - The message
     * @param cb - Callback function to handle error
     */
    send(message: string, cb?: (err?: Error) => void): Promise<void>;
    /**
     * Action after an EIO connection is accepted by EIO server and the server is trying to send open packet to client
     * @param openPacketPayload - Open packet payload without type in first character
     */
    onAcceptEioConnection(openPacketPayload: string): void;
    /**
     * Action after an EIO connection is refused by EIO server
     * @param errorMessage - Error message
     */
    onRefuseEioConnection(errorMessage: string): void;
    close(): Promise<void>;
}
//# sourceMappingURL=client-connection-context.d.ts.map