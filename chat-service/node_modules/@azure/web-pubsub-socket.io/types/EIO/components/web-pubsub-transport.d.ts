import { ClientConnectionContext } from "./client-connection-context";
import { Transport } from "engine.io";
import { Packet as EioPacket } from "engine.io-parser";
/**
 * A class inherited from Engine.IO Transport class, it plays the same role as `Polling` Transport and `WebSocket` Transport.
 * Similar with `Polling`, this transport always does batch send (send mulitple packets at once) and batch receive.
 * Reference: https://github.com/socketio/engine.io/tree/6.4.2/lib/transports
 **/
export declare class WebPubSubTransport extends Transport {
    clientConnectionContext: ClientConnectionContext;
    private _encodeEioPacketAsync;
    private _encodeEioPayloadAsync;
    /**
     * Indicate whether any packet have been actually sent through AWPS or not.
     */
    private _opened;
    /**
     * A buffer to store packets which are waiting to be sent designed for resolving SIO binary attachments problem.
     */
    private _buffer;
    /**
     * Indicate whether the transport is underlying Socket.IO or a pure Engine.IO transport.
     */
    private _sioMode;
    constructor(req: unknown, sioMode?: boolean);
    supportsFraming: () => boolean;
    name: () => string;
    /**
     * sends an array of `Packet` to the client.
     * @param packets - An array of `Packet` to send
     */
    send(packets: EioPacket[]): Promise<void>;
    doClose(fn?: () => void): void;
    protected onClose(): void;
    /**
     * Send `data` to client via AWPS asynchronously.
     * @param data - The data to be sent.
     * @param autoRetry - If true, wait for a certain time and retry sending when the first response status is 429.
     */
    private _webPubSubSend;
    private _isMessageWithBinary;
    private _isTypeWithBinary;
    /**
     * For SIO mode:
     *  returns the largest `n` satisfying `packets[0 .. n - 1]` doesn't contain any incomplete binary-related EIO packet sequence.
     *  A complete binary-related EIO packet sequence = [BINARY_EVENT/BINARY_ACK SIO payload, ...(all its binary attachments)]
     * For EIO mode:
     *  The number of binary attachments cannot be inferred. This method returns `packets.length` directly.
     * @param packets - EIO packets
     * @returns the number of packets that can be sent in the next REST API call
     */
    private _getPacketNumberForNextSend;
}
//# sourceMappingURL=web-pubsub-transport.d.ts.map