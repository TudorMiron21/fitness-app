/// <reference types="qs" />
import { AzureSocketIOOptions, AzureSocketIOCredentialOptions } from "../../common/utils";
import { WebPubSubServiceCaller } from "../../serverProxies";
import { WebPubSubEioServer } from "..";
/**
 * A `WebPubSubConnectionManager` instance is created for each Engine.IO server instance. It's designed to:
 * 1. Manages all Azure Web PubSub client connections and keep them consistent with corresponding EIO clients.
 * 2. Handle upstream invoke requests from AWPS and then translate them into Engine.IO behaviours.
 * 3. Translates Engine.IO behaviours to AWPS behaviours like REST API calls.
 * 4. Makes the EIO `sid` same as its corresponding Azure Web PubSub client connection id.
 */
export declare class WebPubSubConnectionManager {
    /**
     * Each `WebPubSubConnectionManager` instance is bound to a Engine.IO server instance and vice versa.
     */
    eioServer: WebPubSubEioServer;
    /**
     * Client for connecting to a Web PubSub hub
     */
    service: WebPubSubServiceCaller;
    /**
     * Map from the `connectionId` of each client to its corresponding logical `ClientConnectionContext`.
     */
    private _clientConnections;
    /**
     * Handle upstream invoke requests from AWPS.
     */
    private _webPubSubEventHandler;
    /**
     * Options for Azure Web PubSub service.
     */
    private _webPubSubOptions;
    /**
     * In native Engine.IO, the `sid` of each EIO connnection is generated by server randomly.
     * As for AWPS, it generates `ConnectionId` for each client.
     * For each EIO connection, the extension enforces its `sid` in server side is same as the ConnectionId assigned by service.
     * This array stores all `ConnectionId` which is generated by AWPS and is prepared to be assigned to EIO connection.
     */
    private _candidateSids;
    constructor(server: WebPubSubEioServer, options: AzureSocketIOOptions | AzureSocketIOCredentialOptions);
    /**
     * @returns AWPS event handler middleware for EIO Server.
     */
    getEventHandlerEioMiddleware(): (req: any, res: any, errorCallback: any) => void;
    /**
     * @returns AWPS event handler middleware for Express Server.
     */
    getEventHandlerExpressMiddleware(): import("express-serve-static-core").RequestHandler<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
    getNextSid: () => string | undefined;
    close(): Promise<void>;
    /**
     * Convert an AWPS `connect` request to an Engine.IO `handshake` request.
     * @param req - AWPS `connect` request.
     * @param context - Corrsponding `ClientConnectionContext` for the connecting client. It will be used in `createTransport` to bind each transport to the correct AWPS client connection.
     */
    private getEioHandshakeRequest;
}
//# sourceMappingURL=web-pubsub-connection-manager.d.ts.map