/// <reference types="node" />
import { AzureKeyCredential, TokenCredential } from "@azure/core-auth";
import { IncomingMessage, ServerResponse } from "http";
import { WebPubSubServiceClient } from "@azure/web-pubsub";
import debugModule from "debug";
import { BroadcastOptions } from "socket.io-adapter";
import { WebPubSubServiceCaller } from "../serverProxies";
import { Request as ExpressRequest, Response as ExpressResponse, NextFunction } from "express";
import { Socket } from "socket.io";
export declare const T: (now: Date) => string;
export declare const debug: debugModule.Debugger;
export declare function addProperty(o: object, p: string, f: (...args: unknown[]) => unknown): void;
/**
 * Options for generating a token to connect a client to Web PubSub for Socket.IO.
 *
 * @public
 */
export interface NegotiateOptions {
    /**
     * The userId for the client.
     */
    userId?: string;
    /**
     * Minutes until the token expires.
     */
    expirationTimeInMinutes?: number;
}
/**
 * The negotiate response when negotiate is enabled
 *
 * @public
 */
export interface NegotiateResponse {
    /**
     * The endpoint of Web PubSub for Socket.IO.
     */
    endpoint: string;
    /**
     * The path of Web PubSub for Socket.IO.
     */
    path: string;
    /**
     * The token used to connect to Web PubSub for Socket.IO.
     */
    token: string;
}
/**
 * A function to extract a `NegotiateOptions` from a HTTP `IncomingMessage`
 * @param req - the HTTP `IncomingMessage`
 * @returns a Promise of `NegotiateOptions`
 */
export type ConfigureNegotiateOptions = (req: IncomingMessage) => Promise<NegotiateOptions>;
/**
 * Common options for `AzureSocketIOOptions` and `AzureSocketIOCredentialOptions`
 *
 * @public
 */
export interface AzureSocketIOCommonOptions {
    /**
     * The hub name of Web PubSub for Socket.IO.
     */
    hub: string;
    /**
     * The reverse proxy endpoint of Web PubSub for Socket.IO.
     */
    reverseProxyEndpoint?: string;
}
/**
 * Options for connecting to Web PubSub for Socket.IO using connection string.
 *
 * @public
 */
export interface AzureSocketIOOptions extends AzureSocketIOCommonOptions {
    /**
     * The connection string of Web PubSub for Socket.IO.
     */
    connectionString: string;
}
/**
 * Options for connecting to Web PubSub for Socket.IO using credential.
 *
 * @public
 */
export interface AzureSocketIOCredentialOptions extends AzureSocketIOCommonOptions {
    /**
     * The endpoint of Web PubSub for Socket.IO.
     */
    endpoint: string;
    /**
     * The credential of Web PubSub for Socket.IO.
     */
    credential: AzureKeyCredential | TokenCredential;
}
export declare function getWebPubSubServiceCaller(options: AzureSocketIOOptions | AzureSocketIOCredentialOptions): WebPubSubServiceCaller;
export declare function getWebPubSubServiceClient(options: AzureSocketIOOptions | AzureSocketIOCredentialOptions): WebPubSubServiceClient;
/**
 * Convert a sync function with callback parameter to its async form.
 * @param syncFunc - a sync function with callback as its last parameter
 * @returns the async function converted from sync function `syncFunc`
 */
export declare function toAsync<T>(syncFunc: (...args: unknown[]) => unknown): (...args: unknown[]) => Promise<T>;
/**
 * Stringify a set or list of string .
 * @param set - a set or list of string. Example: Set\<string\>{"a", "b"}
 * @returns the stringified set. Example: "{ "a", "b" }"
 */
export declare function toString(set: Set<string> | string[] | IterableIterator<string>): string;
export declare function toOptionsString(option: BroadcastOptions): string;
export declare function writeResponse(res: ExpressResponse | ServerResponse, statusCode: number, message: unknown, contentType?: string): void;
export declare function getSioMiddlewareFromExpress(middleware: (req: ExpressRequest, res: ExpressResponse, next: NextFunction) => void): (socket: Socket, next: (err?: Error) => void) => void;
export { debugModule };
//# sourceMappingURL=utils.d.ts.map