/// <reference types="node" />
import { AzureSocketIOOptions, AzureSocketIOCredentialOptions, ConfigureNegotiateOptions } from "../../common/utils";
import * as SIO from "socket.io";
import { IncomingMessage, ServerResponse } from "http";
/**
 * Returns a Express middleware to handle negotiate request
 *
 * @param io - a Socket.IO server processed by `useAzureSocketIO` or a option used by `useAzureSocketIO`.
 * @param configureNegotiateOptions - a customized function which defines how to extract information for negotiation from a HTTP request.
 * @returns
 */
export declare function negotiate(io: SIO.Server | AzureSocketIOOptions | AzureSocketIOCredentialOptions, configureNegotiateOptions?: ConfigureNegotiateOptions): (req: IncomingMessage, res: ServerResponse, next: (err?: Error) => void) => void;
/**
 * Get a `ConfigureNegotiateOptions` used by `negotaite` to enable passport authentication.
 * Using this middleware, the user id of passport will be put into the response for negotiate request as a part of JWT token.
 * When the Socket.IO client connects to the server, the user id in JWT token will be extracted and the corresponding passport will be restored and `socket.request.user` will be available.
 *
 * @param assignProperty - the property name of passport object in `socket.request`. Default value is `user`. Reference: https://www.jsdocs.io/package/@types/passport#AuthenticateOptions.assignProperty
 * @returns
 */
export declare function usePassport(assignProperty?: string): ConfigureNegotiateOptions;
/**
 * Get a Express which cooperates with `usePassport` to restore passport in `socket.request`.
 *
 * @param assignProperty - the property name of passport object in `socket.request`. Default value is `user`. Reference: https://www.jsdocs.io/package/@types/passport#AuthenticateOptions.assignProperty
 * @returns
 */
export declare function restorePassport(assignProperty?: string): (request: IncomingMessage, response: ServerResponse, next: (err?: Error) => void) => void;
/**
 * Get a Express which cooperates with `negotiate` to restore claims in `socket.request`.
 *
 * @returns
 */ export declare function restoreClaims(): (request: IncomingMessage, response: ServerResponse, next: (err?: Error) => void) => void;
//# sourceMappingURL=negotiate.d.ts.map