import { Packet as SioPacket } from "socket.io-parser";
import { Namespace, Server as SioServer } from "socket.io";
import { Adapter as NativeInMemoryAdapter, BroadcastOptions, Room, SocketId } from "socket.io-adapter";
import { WebPubSubServiceCaller } from "../../serverProxies";
/**
 * Socket.IO Server uses method `io.Adapter(AdapterClass))` to set the adapter. `AdatperClass` is not an instansized object, but a class.
 * The actual adapter is instansized inside server logic.
 * Thus its constructor parameters of the adapter class is out of our control.
 * So a proxy class is necessary to wrap the adapter class for customimzed constructor parameters.
 * How to use:
 *  1. Instansize a `WebPubSubAdapterProxy` object: `const webPubSubAdapterProxy = new WebPubSubAdapterProxy(extraOptions);`
 *  2. Set the adapter: `io.adapter(WebPubSubAdapterProxy);`, thus additional options are controllable.
 */
export declare class WebPubSubAdapterProxy {
    serivce: WebPubSubServiceCaller;
    sioServer: SioServer;
    constructor(serviceClient: WebPubSubServiceCaller);
}
export declare class WebPubSubAdapterInternal extends NativeInMemoryAdapter {
    readonly nsp: Namespace;
    service: WebPubSubServiceCaller;
    private _roomOperationLock;
    private _sioDecoder;
    private _utf8Decoder;
    /**
     * Azure Web PubSub Socket.IO Adapter constructor.
     *
     * @param nsp - Namespace
     * @param extraArgForWpsAdapter - extra argument for WebPubSubAdapter
     */
    constructor(nsp: Namespace, serviceClient: WebPubSubServiceCaller);
    /**
     * Broadcasts a packet.
     *
     * @param packet - the packet object
     * @param opts - the options
     */
    broadcast(packet: SioPacket, opts: BroadcastOptions): Promise<void>;
    /**
     * Makes the matching socket instances join the specified rooms
     *
     * @param opts - the filters to apply
     * @param rooms - the rooms to join
     */
    addSockets(opts: BroadcastOptions, rooms: Room[]): Promise<void>;
    /**
     * Adds a socket to a list of room.
     *
     * @param id - the socket id
     * @param rooms - a set of rooms
     */
    addAll(id: SocketId, rooms: Set<Room>): Promise<void>;
    /**
     * Removes a socket from a room.
     *
     * @param id - the socket id
     * @param room - the room name
     */
    del(id: SocketId, room: Room): Promise<void>;
    /**
     * Removes a socket from all rooms it's joined.
     *
     * @param id - the socket id
     */
    delAll(id: SocketId): Promise<void>;
    /**
     * Broadcasts a packet and expects multiple acknowledgements.
     *
     * @param packet - the packet object
     * @param opts - the options
     * @param clientCountCallback - the number of clients that received the packet
     * @param ack - the callback that will be called for each client response
     */
    broadcastWithAck(packet: SioPacket, opts: BroadcastOptions, clientCountCallback: (clientCount: number) => void, ack: (...args: unknown[]) => void): Promise<void>;
    /**
     * Gets a list of sockets by sid.
     *
     * @param _rooms - the explicit set of rooms to check.
     */
    sockets(_rooms: Set<Room>): Promise<Set<SocketId>>;
    /**
     * Gets the list of rooms a given socket has joined.
     *
     * @param id - the socket id
     */
    socketRooms(id: SocketId): Set<Room> | undefined;
    /**
     * Returns the matching socket instances
     *
     * @param opts - the filters to apply
     */
    fetchSockets(opts: BroadcastOptions): Promise<unknown[]>;
    /**
     * Makes the matching socket instances leave the specified rooms
     *
     * @param opts - the filters to apply
     * @param rooms - the rooms to leave
     */
    delSockets(opts: BroadcastOptions, rooms: Room[]): Promise<void>;
    /**
     * Send a packet to the other Socket.IO servers in the cluster
     * @param _packet - an array of arguments, which may include an acknowledgement callback at the end
     */
    serverSideEmit(_packet: unknown[]): void;
    /**
     * Makes the matching socket instances disconnect
     *
     * @param opts - the filters to apply
     * @param close - whether to close the underlying connection
     */
    disconnectSockets(opts: BroadcastOptions, close: boolean): Promise<void>;
    /**
     * Generates OData filter string for Web PubSub service from a set of rooms and a set of exceptions
     * @param rooms - a set of Rooms to include
     * @param excepts - a set of Rooms to exclude
     * @returns OData - filter string
     */
    private _buildODataFilter;
    /**
     * Generates OData filter string for Web PubSub service from a set of exceptions
     * @param excepts - a set of Rooms to exclude
     * @returns OData - filter string
     */
    private _buildODataFilterForExceptsOnly;
    private _getEioSid;
    /**
     * `namespace` and `room` are concpets from Socket.IO.
     * `group` is a concept from Azure Web PubSub.
     */
    private _getGroupName;
    private _getLock;
}
//# sourceMappingURL=web-pubsub-adapter.d.ts.map