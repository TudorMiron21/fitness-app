"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSingleEioEncodedPayload = void 0;
const utils_1 = require("../../common/utils");
const engine_io_parser_1 = require("engine.io-parser");
const socket_io_parser_1 = require("socket.io-parser");
const encodeEioPayloadAsync = (0, utils_1.toAsync)(engine_io_parser_1.encodePayload);
const sioEncoder = new socket_io_parser_1.Encoder();
// Modified from https://github.com/socketio/socket.io-adapter/blob/2.5.2/lib/index.ts#L233
function getSingleEioEncodedPayload(packet) {
    // if `packet` owns binary attachements, `sioEncoder.encode` returns [string, ...buffers].
    // Otherwise, it returns a single element of string which is the encoded SIO packet.
    let encodedSioPackets = sioEncoder.encode(packet);
    // Ensure `encodedSioPackets` is an array
    encodedSioPackets = Array.isArray(encodedSioPackets) ? encodedSioPackets : [encodedSioPackets];
    const eioPackets = encodedSioPackets.map((item) => {
        return { type: "message", data: item };
    });
    return encodeEioPayloadAsync(eioPackets);
}
exports.getSingleEioEncodedPayload = getSingleEioEncodedPayload;
//# sourceMappingURL=encoder.js.map