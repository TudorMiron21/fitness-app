"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.restoreClaims = exports.restorePassport = exports.usePassport = exports.negotiate = void 0;
const utils_1 = require("../../common/utils");
const constants_1 = require("./constants");
const SIO = __importStar(require("socket.io"));
const url_1 = require("url");
const debug = (0, utils_1.debugModule)("wps-sio-ext:SIO:negotiate");
const defaultNegotiateOptions = async () => ({});
/**
 * Returns a Express middleware to handle negotiate request
 *
 * @param io - a Socket.IO server processed by `useAzureSocketIO` or a option used by `useAzureSocketIO`.
 * @param configureNegotiateOptions - a customized function which defines how to extract information for negotiation from a HTTP request.
 * @returns
 */
function negotiate(io, configureNegotiateOptions) {
    debug(`getNegotiateExpressMiddleware`);
    const wpsOptions = io instanceof SIO.Server ? io[constants_1.WEB_PUBSUB_OPTIONS_PROPERY_NAME] : io;
    const serviceClient = (0, utils_1.getWebPubSubServiceClient)(wpsOptions);
    return async (req, res, _next) => {
        try {
            debug("negotiate, start");
            if (!configureNegotiateOptions) {
                configureNegotiateOptions = defaultNegotiateOptions;
            }
            const negotiateOptions = await configureNegotiateOptions(req);
            const tokenResponse = await serviceClient.getClientAccessToken(negotiateOptions);
            const url = new URL(tokenResponse.baseUrl);
            const message = {
                endpoint: url.origin,
                path: url.pathname,
                token: tokenResponse.token,
            };
            (0, utils_1.writeResponse)(res, 200, message);
            debug("negotiate, finished");
        }
        catch (e) {
            (0, utils_1.writeResponse)(res, 500, { message: "Internal Server Error" });
            debug(`negotiate, error: ${e.message}`);
        }
    };
}
exports.negotiate = negotiate;
/**
 * Get a `ConfigureNegotiateOptions` used by `negotaite` to enable passport authentication.
 * Using this middleware, the user id of passport will be put into the response for negotiate request as a part of JWT token.
 * When the Socket.IO client connects to the server, the user id in JWT token will be extracted and the corresponding passport will be restored and `socket.request.user` will be available.
 *
 * @param assignProperty - the property name of passport object in `socket.request`. Default value is `user`. Reference: https://www.jsdocs.io/package/@types/passport#AuthenticateOptions.assignProperty
 * @returns
 */
function usePassport(assignProperty = "user") {
    if (!assignProperty || assignProperty.length === 0) {
        throw new Error("Valid assignProperty is required.");
    }
    return async (req) => {
        const query = (0, url_1.parse)(req.url || "", true).query;
        const expirationMinutes = Number(query["expirationMinutes"] ?? 600);
        const passport = req[assignProperty];
        if (passport) {
            return { userId: passport.id, expirationTimeInMinutes: expirationMinutes };
        }
        return { expirationTimeInMinutes: expirationMinutes };
    };
}
exports.usePassport = usePassport;
/**
 * Get a Express which cooperates with `usePassport` to restore passport in `socket.request`.
 *
 * @param assignProperty - the property name of passport object in `socket.request`. Default value is `user`. Reference: https://www.jsdocs.io/package/@types/passport#AuthenticateOptions.assignProperty
 * @returns
 */
function restorePassport(assignProperty = "user") {
    return (request, response, next) => {
        try {
            /**
             * request["claims"] should be an one-element string array.
             * Examples: ['0'], ['bob']
             **/
            if (request["claims"]?.userId?.length !== 1) {
                throw new Error(`Invalid claims.userId = ${request["claims"]?.userId}`);
            }
            const passportUserId = request["claims"].userId[0];
            request["session"] = { passport: {} };
            request["session"]["passport"][assignProperty] = passportUserId;
        }
        catch (e) {
            debug(`restorePassport, error: ${e.message}`);
        }
        next();
    };
}
exports.restorePassport = restorePassport;
/**
 * Get a Express which cooperates with `negotiate` to restore claims in `socket.request`.
 *
 * @returns
 */ function restoreClaims() {
    return (request, response, next) => {
        try {
            if (!request["claims"])
                return next();
            if (!request["claims"]["customClaims"])
                return next();
        }
        catch (e) {
            debug(`restoreClaims, error: ${e.message}`);
        }
        next();
    };
}
exports.restoreClaims = restoreClaims;
//# sourceMappingURL=negotiate.js.map