{"version":3,"file":"decoder.js","sourceRoot":"","sources":["../../../src/SIO/components/decoder.ts"],"names":[],"mappings":";;;AAAA,8CAAiD;AACjD,uDAA8C;AAE9C,MAAM,KAAK,GAAG,IAAA,mBAAW,EAAC,yBAAyB,CAAC,CAAC;AAOrD;;;;;;GAMG;AACH,SAAgB,mBAAmB,CAAC,GAAW;IAC7C,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,eAAe;IACf,MAAM,CAAC,GAAqB;QAC1B,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC3B,WAAW,EAAE,CAAC;KACf,CAAC;IAEF,IAAI,6BAAU,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,SAAS,EAAE;QACpC,MAAM,IAAI,KAAK,CAAC,sBAAsB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;KAClD;IAED,qCAAqC;IACrC,IAAI,CAAC,CAAC,IAAI,KAAK,6BAAU,CAAC,YAAY,IAAI,CAAC,CAAC,IAAI,KAAK,6BAAU,CAAC,UAAU,EAAE;QAC1E,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;QACpB,oCAAoC;QACpC,OAAO,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,MAAM,EAAE,GAAE;QACrD,MAAM,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACpC,uGAAuG;QACvG,IAAI,GAAG,KAAK,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YAC3D,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;SACxC;QACD,CAAC,CAAC,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;KAC7B;IAED,mDAAmD;IAEnD,KAAK,CAAC,kBAAkB,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;IAClC,OAAO,CAAC,CAAC;AACX,CAAC;AA7BD,kDA6BC","sourcesContent":["import { debugModule } from \"../../common/utils\";\nimport { PacketType } from \"socket.io-parser\";\n\nconst debug = debugModule(\"wps-sio-ext:SIO:Decoder\");\n\nexport interface PartialSioPacket {\n  type: PacketType;\n  attachments: number;\n}\n\n/**\n * Decode a packet String partially(JSON data). Only type and the number of attachements are decoded.\n * Modified from https://github.com/socketio/socket.io-parser/blob/4.2.4/lib/index.ts#L210\n *\n * @param {String} str - target string\n * @return {Object} packet\n */\nexport function decodeStringPartial(str: string): PartialSioPacket {\n  let i = 0;\n  // look up type\n  const p: PartialSioPacket = {\n    type: Number(str.charAt(0)),\n    attachments: 0,\n  };\n\n  if (PacketType[p.type] === undefined) {\n    throw new Error(\"unknown packet type \" + p.type);\n  }\n\n  // look up attachments if type binary\n  if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n    const start = i + 1;\n    // eslint-disable-next-line no-empty\n    while (str.charAt(++i) !== \"-\" && i != str.length) {}\n    const buf = str.substring(start, i);\n    // Native implementation is `buf != Number(buf) || ...`. Modify it to pass typescript compilation check\n    if (buf !== Number(buf).toString() || str.charAt(i) !== \"-\") {\n      throw new Error(\"Illegal attachments\");\n    }\n    p.attachments = Number(buf);\n  }\n\n  // Skip decoding `p.namespace`, `p.id` and `p.data`\n\n  debug(\"decoded %s as %j\", str, p);\n  return p;\n}\n"]}