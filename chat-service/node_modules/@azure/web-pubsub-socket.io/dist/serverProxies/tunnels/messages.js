"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TunnelConnectionConnectedMessage = exports.TunnelConnectionRebalanceMessage = exports.TunnelServiceStatusMessage = exports.TunnelConnectionCloseMessage = exports.TunnelConnectionReconnectMessage = exports.TunnelHttpResponseMessage = exports.TunnelHttpRequestMessage = exports.TunnelByteContentMessage = exports.TunnelMessage = exports.TunnelMessageType = void 0;
var TunnelMessageType;
(function (TunnelMessageType) {
    TunnelMessageType[TunnelMessageType["None"] = 0] = "None";
    TunnelMessageType[TunnelMessageType["HttpRequest"] = 1] = "HttpRequest";
    TunnelMessageType[TunnelMessageType["HttpResponse"] = 2] = "HttpResponse";
    TunnelMessageType[TunnelMessageType["ServiceStatus"] = 5] = "ServiceStatus";
    TunnelMessageType[TunnelMessageType["ConnectionReconnect"] = 6] = "ConnectionReconnect";
    TunnelMessageType[TunnelMessageType["ConnectionClose"] = 7] = "ConnectionClose";
    TunnelMessageType[TunnelMessageType["ConnectionRebalance"] = 8] = "ConnectionRebalance";
    TunnelMessageType[TunnelMessageType["ConnectionConnected"] = 10] = "ConnectionConnected";
})(TunnelMessageType || (exports.TunnelMessageType = TunnelMessageType = {}));
class TunnelMessage {
    TracingId;
}
exports.TunnelMessage = TunnelMessage;
class TunnelByteContentMessage extends TunnelMessage {
    Content;
    constructor(Content) {
        super();
        this.Content = Content;
    }
}
exports.TunnelByteContentMessage = TunnelByteContentMessage;
class TunnelHttpRequestMessage extends TunnelByteContentMessage {
    AckId;
    LocalRouting;
    ChannelName;
    HttpMethod;
    Url;
    Headers;
    Content;
    Type = TunnelMessageType.HttpRequest;
    constructor(AckId, LocalRouting, ChannelName, HttpMethod, Url, Headers, Content) {
        super(Content);
        this.AckId = AckId;
        this.LocalRouting = LocalRouting;
        this.ChannelName = ChannelName;
        this.HttpMethod = HttpMethod;
        this.Url = Url;
        this.Headers = Headers;
        this.Content = Content;
    }
}
exports.TunnelHttpRequestMessage = TunnelHttpRequestMessage;
class TunnelHttpResponseMessage extends TunnelByteContentMessage {
    AckId;
    LocalRouting;
    StatusCode;
    ChannelName;
    NotCompleted;
    Headers;
    Content;
    Type = TunnelMessageType.HttpResponse;
    constructor(AckId, LocalRouting, StatusCode, ChannelName, NotCompleted, Headers, Content) {
        super(Content);
        this.AckId = AckId;
        this.LocalRouting = LocalRouting;
        this.StatusCode = StatusCode;
        this.ChannelName = ChannelName;
        this.NotCompleted = NotCompleted;
        this.Headers = Headers;
        this.Content = Content;
    }
}
exports.TunnelHttpResponseMessage = TunnelHttpResponseMessage;
class TunnelConnectionReconnectMessage extends TunnelMessage {
    TargetId;
    Endpoint;
    Message;
    Type = TunnelMessageType.ConnectionReconnect;
    constructor(TargetId, Endpoint, Message) {
        super();
        this.TargetId = TargetId;
        this.Endpoint = Endpoint;
        this.Message = Message;
    }
}
exports.TunnelConnectionReconnectMessage = TunnelConnectionReconnectMessage;
class TunnelConnectionCloseMessage extends TunnelMessage {
    Message;
    Type = TunnelMessageType.ConnectionClose;
    constructor(Message) {
        super();
        this.Message = Message;
    }
}
exports.TunnelConnectionCloseMessage = TunnelConnectionCloseMessage;
class TunnelServiceStatusMessage extends TunnelMessage {
    Message;
    Type = TunnelMessageType.ServiceStatus;
    constructor(Message) {
        super();
        this.Message = Message;
    }
}
exports.TunnelServiceStatusMessage = TunnelServiceStatusMessage;
class TunnelConnectionRebalanceMessage extends TunnelMessage {
    TargetId;
    Endpoint;
    Message;
    Type = TunnelMessageType.ConnectionRebalance;
    constructor(TargetId, Endpoint, Message) {
        super();
        this.TargetId = TargetId;
        this.Endpoint = Endpoint;
        this.Message = Message;
    }
}
exports.TunnelConnectionRebalanceMessage = TunnelConnectionRebalanceMessage;
class TunnelConnectionConnectedMessage extends TunnelMessage {
    ConnectionId;
    UserId;
    ReconnectionToken;
    Type = TunnelMessageType.ConnectionConnected;
    constructor(ConnectionId, UserId, ReconnectionToken) {
        super();
        this.ConnectionId = ConnectionId;
        this.UserId = UserId;
        this.ReconnectionToken = ReconnectionToken;
    }
}
exports.TunnelConnectionConnectedMessage = TunnelConnectionConnectedMessage;
