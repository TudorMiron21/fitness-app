"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInvokeOperationSpec = void 0;
const coreClient = __importStar(require("@azure/core-client"));
const parameters = __importStar(require("./parameters"));
const mappers = __importStar(require("./mappers"));
const serializer = coreClient.createSerializer(mappers, /* isXml */ false);
function getInvokeOperationSpec(baseUrl) {
    return {
        baseUrl: baseUrl,
        path: "/api/hubs/{hub}/:invoke",
        httpMethod: "POST",
        responses: {
            200: {
                bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" },
            },
            default: {
                bodyMapper: mappers.ErrorDetail,
                headersMapper: mappers.WebPubSubInvokeExceptionHeaders,
            },
        },
        requestBody: parameters.message,
        queryParameters: [parameters.apiVersion, parameters.excludedConnections, parameters.filter],
        urlParameters: [parameters.endpoint, parameters.hub],
        headerParameters: [parameters.contentType, parameters.accept],
        mediaType: "text",
        serializer,
    };
}
exports.getInvokeOperationSpec = getInvokeOperationSpec;
//# sourceMappingURL=operation-spec.js.map