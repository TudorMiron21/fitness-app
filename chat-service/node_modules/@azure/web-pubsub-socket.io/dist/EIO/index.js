"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebPubSubEioServer = void 0;
const utils_1 = require("../common/utils");
const web_pubsub_transport_1 = require("./components/web-pubsub-transport");
const web_pubsub_connection_manager_1 = require("./components/web-pubsub-connection-manager");
const engine = __importStar(require("engine.io"));
const serverProxies_1 = require("../serverProxies");
const constants_1 = require("./components/constants");
const debug = (0, utils_1.debugModule)("wps-sio-ext:EIO:index");
debug("load");
/**
 * In the design of Engine.IO package, the EIO server has its own middlewares rather than sharing with http server.
 * And EIO middlewares is put in the first place when receiving HTTP request. Http server listeners is behind EIO middlewares
 *
 *                          .---------------.   Yes
 *     a HTTP request ---\> |  check(req)?  | --------\>  `handleRequest(req)` (passed into Engine.IO middlewares)
 *                          |               | --------\>  HttpServer.listeners
 *                          .---------------.    No
 *
 * And the Engine.IO handshake behaviour is inside `handleRequest`
 * Web PubSub handshake handler is inside its express middleware.
 *
 * TODO: implment BaseServer rather than extends Server
 **/
class WebPubSubEioServer extends engine.Server {
    webPubSubOptions;
    webPubSubConnectionManager;
    _setuped;
    constructor(options, webPubSubOptions) {
        debug(`constructor, options: ${JSON.stringify(options)}, webPubSubOptions: ${JSON.stringify(webPubSubOptions)}`);
        super(options);
        this.webPubSubOptions = webPubSubOptions;
        this.webPubSubConnectionManager = new web_pubsub_connection_manager_1.WebPubSubConnectionManager(this, webPubSubOptions);
        // Using tunnel
        if (this.webPubSubConnectionManager.service instanceof serverProxies_1.InprocessServerProxy) {
            debug("constructor, use InprocessServerProxy");
            const tunnel = this.webPubSubConnectionManager.service;
            tunnel.use(this.webPubSubConnectionManager.getEventHandlerExpressMiddleware());
            this._setuped = tunnel.runAsync();
            /**
             * After closing the EIO server, internal tunnel should be closed as well.
             * Force override `cleanup`, which is executed when closing EIO server.
             * In native implementation, it close internal WebSocket server, this is not needed when using Azure Web PubSub.
             */
            this["cleanup"] = async () => {
                // TODO: Find the optimal time to close the tunnel
                debug("cleanup, stop internal tunnel");
                await this.webPubSubConnectionManager.close();
                tunnel.stop();
            };
        }
        else {
            debug("constructor, use RestApiServiceCaller");
            const webPubSubEioMiddleware = this.webPubSubConnectionManager.getEventHandlerEioMiddleware();
            this.use(webPubSubEioMiddleware);
        }
        debug(`constructor, finish`);
    }
    async setup() {
        if (this.webPubSubConnectionManager.service instanceof serverProxies_1.InprocessServerProxy) {
            await this._setuped;
        }
    }
    createTransport(transportName, req) {
        debug(`create transport, transportName=${transportName}, force redirect to ${web_pubsub_transport_1.WebPubSubTransport.name}`);
        return new web_pubsub_transport_1.WebPubSubTransport(req);
    }
    /**
     *
     * @param _req - handshake request
     * @returns socket id for EIO connection built from handshake request `req`
     */
    generateId = (_req) => this.webPubSubConnectionManager.getNextSid();
    /**
     *
     * @param _transport - transport name
     * @returns a list of available transports for upgrade given a certain Transport `transport`
     */
    upgrades = (_transport) => [];
    async onConnect(connectionId, connectReq, context) {
        await this.handshake(constants_1.WEBPUBSUB_TRANSPORT_NAME, connectReq, (errorCode, errorContext) => {
            const message = errorContext && errorContext["message"] ? errorContext["message"] : constants_1.EIO_CONNECTION_ERROR[errorCode];
            context.onRefuseEioConnection(message);
        });
        context.transport = this.clients[connectionId].transport;
    }
    async onUserEvent(connectionId, content) {
        const client = this.clients[connectionId];
        const packets = await client.transport.parser.decodePayload(content);
        for (const packet of packets) {
            client.onPacket(packet);
        }
    }
    async onDisconnected(connectionId) {
        this.clients[connectionId].transport.onClose();
    }
}
exports.WebPubSubEioServer = WebPubSubEioServer;
//# sourceMappingURL=index.js.map