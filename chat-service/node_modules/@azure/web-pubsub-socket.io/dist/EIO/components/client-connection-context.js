"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientConnectionContext = void 0;
const utils_1 = require("../../common/utils");
const constants_1 = require("./constants");
const debug = (0, utils_1.debugModule)("wps-sio-ext:EIO:ClientConnectionContext");
/**
 * A logical concept that stands for an Engine.IO client connection, every connection has a unique `connectionId`.
 * It maps Engine.IO Transport behaviours to Azure Web PubSub service REST API calls.
 */
class ClientConnectionContext {
    service;
    connectionId;
    connectResponded;
    transport;
    _connectResponseHandler;
    _refusedCallback;
    constructor(serviceClient, connectionId, connectResponseHandler, refusedCallback) {
        this.service = serviceClient;
        this.connectionId = connectionId;
        this._connectResponseHandler = connectResponseHandler;
        this.connectResponded = false;
        this._refusedCallback = refusedCallback;
    }
    /**
     * Send `message` to a the bound client connection.
     * @param message - The message
     * @param cb - Callback function to handle error
     */
    async send(message, cb) {
        debug(`send message ${message}, type = ${typeof message}`);
        const options = { contentType: "text/plain" };
        try {
            await this.service.sendToConnection(this.connectionId, message, options);
        }
        catch (error) {
            if (cb) {
                cb(error);
            }
        }
        debug(`send message, finish`);
    }
    /**
     * Action after an EIO connection is accepted by EIO server and the server is trying to send open packet to client
     * @param openPacketPayload - Open packet payload without type in first character
     */
    onAcceptEioConnection(openPacketPayload) {
        this._connectResponseHandler.success({
            [constants_1.WEBPUBSUB_CONNECT_RESPONSE_FIELD_NAME]: JSON.parse(openPacketPayload),
        });
        this.connectResponded = true;
    }
    /**
     * Action after an EIO connection is refused by EIO server
     * @param errorMessage - Error message
     */
    onRefuseEioConnection(errorMessage) {
        this._connectResponseHandler.fail(400, `EIO server refused connection with error: ${errorMessage}`);
        this.connectResponded = true;
        if (this._refusedCallback) {
            this._refusedCallback(errorMessage);
        }
    }
    async close() {
        try {
            await this.transport.send([{ type: "close" }]);
        }
        catch (error) {
            debug(`Close ClientConnectionContext got error: ${error}`);
        }
    }
}
exports.ClientConnectionContext = ClientConnectionContext;
//# sourceMappingURL=client-connection-context.js.map