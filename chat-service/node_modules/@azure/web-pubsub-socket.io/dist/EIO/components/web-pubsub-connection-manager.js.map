{"version":3,"file":"web-pubsub-connection-manager.js","sourceRoot":"","sources":["../../../src/EIO/components/web-pubsub-connection-manager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AzureSocketIOOptions,\n  AzureSocketIOCredentialOptions,\n  debugModule,\n  getWebPubSubServiceCaller,\n} from \"../../common/utils\";\nimport { ClientConnectionContext, ConnectionError } from \"./client-connection-context\";\nimport {\n  CONNECTION_ERROR_EVENT_NAME,\n  CONNECTION_ERROR_WEBPUBSUB_CODE,\n  CONNECTION_ERROR_WEBPUBSUB_MESSAGE,\n  TUNNEL_PATH,\n  WEBPUBSUB_CLIENT_CONNECTION_FILED_NAME,\n  WEBPUBSUB_TRANSPORT_NAME,\n} from \"./constants\";\nimport { ConnectRequest as WebPubSubConnectRequest, WebPubSubEventHandler } from \"@azure/web-pubsub-express\";\nimport { WebPubSubServiceCaller } from \"../../serverProxies\";\nimport { WebPubSubEioServer } from \"..\";\n\nconst debug = debugModule(\"wps-sio-ext:EIO:ConnectionManager\");\n\n/**\n * A `WebPubSubConnectionManager` instance is created for each Engine.IO server instance. It's designed to:\n * 1. Manages all Azure Web PubSub client connections and keep them consistent with corresponding EIO clients.\n * 2. Handle upstream invoke requests from AWPS and then translate them into Engine.IO behaviours.\n * 3. Translates Engine.IO behaviours to AWPS behaviours like REST API calls.\n * 4. Makes the EIO `sid` same as its corresponding Azure Web PubSub client connection id.\n */\nexport class WebPubSubConnectionManager {\n  /**\n   * Each `WebPubSubConnectionManager` instance is bound to a Engine.IO server instance and vice versa.\n   */\n  public eioServer: WebPubSubEioServer;\n\n  /**\n   * Client for connecting to a Web PubSub hub\n   */\n  public service: WebPubSubServiceCaller;\n\n  /**\n   * Map from the `connectionId` of each client to its corresponding logical `ClientConnectionContext`.\n   */\n  private _clientConnections: Map<string, ClientConnectionContext> = new Map();\n\n  /**\n   * Handle upstream invoke requests from AWPS.\n   */\n  private _webPubSubEventHandler: WebPubSubEventHandler;\n\n  /**\n   * Options for Azure Web PubSub service.\n   */\n  private _webPubSubOptions: AzureSocketIOOptions | AzureSocketIOCredentialOptions;\n\n  /**\n   * In native Engine.IO, the `sid` of each EIO connnection is generated by server randomly.\n   * As for AWPS, it generates `ConnectionId` for each client.\n   * For each EIO connection, the extension enforces its `sid` in server side is same as the ConnectionId assigned by service.\n   * This array stores all `ConnectionId` which is generated by AWPS and is prepared to be assigned to EIO connection.\n   */\n  private _candidateSids: Array<string> = [];\n\n  constructor(server: WebPubSubEioServer, options: AzureSocketIOOptions | AzureSocketIOCredentialOptions) {\n    this.service = getWebPubSubServiceCaller(options);\n    this.eioServer = server;\n    this._webPubSubOptions = options;\n\n    this._webPubSubEventHandler = new WebPubSubEventHandler(this._webPubSubOptions.hub, {\n      path: TUNNEL_PATH,\n      handleConnect: async (req, res) => {\n        let timeout: NodeJS.Timeout;\n        let cleanup: (error: string) => void;\n        try {\n          const connectionId = req.context.connectionId;\n          debug(`onConnect, connectionId = ${connectionId}`);\n\n          cleanup = (error: string): void => {\n            if (this._clientConnections.has(connectionId)) {\n              this._clientConnections.delete(connectionId);\n            }\n            if (this._candidateSids.lastIndexOf(connectionId) === this._candidateSids.length - 1) {\n              this._candidateSids.shift();\n            }\n            const connectionError = {\n              req: req,\n              code: CONNECTION_ERROR_WEBPUBSUB_CODE,\n              message: CONNECTION_ERROR_WEBPUBSUB_MESSAGE,\n              context: error,\n            } as ConnectionError;\n            this.eioServer.emit(CONNECTION_ERROR_EVENT_NAME, connectionError);\n          };\n\n          const context = new ClientConnectionContext(this.service, connectionId, res, cleanup);\n\n          /**\n           * Two conditions lead to returning reponse for connect event:\n           *   1. The connection is accepted or refused by EIO Server and the corresponding events are triggered.\n           *   2. Exception is thrown in following code\n           * As a defensive measure, a timeout is set to return response in 30000ms in case of both conditions don't happen.\n           */\n          timeout = setTimeout(() => {\n            if (!context.connectResponded) {\n              const error = `EIO server cannot handle connect request with error: Timeout 30000ms`;\n              cleanup(error);\n              res.fail(500, error);\n            }\n          }, 30000);\n\n          const connectReq = this.getEioHandshakeRequest(req, context);\n\n          this._candidateSids.push(connectionId);\n          this._clientConnections.set(connectionId, context);\n\n          await this.eioServer.onConnect(connectionId, connectReq, context);\n        } catch (error) {\n          debug(`onConnect, req = ${req}, err = ${error}`);\n          const errorMessage = `EIO server cannot handle connect request with error: ${error}`;\n          clearTimeout(timeout);\n          cleanup(errorMessage);\n          res.fail(500, errorMessage);\n        }\n      },\n\n      handleUserEvent: async (req, res) => {\n        try {\n          const connectionId = req.context.connectionId;\n\n          debug(`onUserEvent, connectionId = ${connectionId}, req.data = ${req.data}`);\n\n          if (this._clientConnections.has(connectionId)) {\n            await this.eioServer.onUserEvent(connectionId, req.data);\n            return res.success();\n          } else {\n            // `UserEventResponseHandler.fail(code, ...)` cannot set `code` with 404. Only 400, 401 and 500 are available.\n            return res.fail(400, `EIO server cannot find ConnectionId ${connectionId}`);\n          }\n        } catch (err) {\n          debug(`onUserEvent, req = ${req}, err = ${err}`);\n          return res.fail(500, `EIO server cannot handle user event with error: ${err}`);\n        }\n      },\n\n      onDisconnected: async (req) => {\n        const connectionId = req.context.connectionId;\n        debug(`onDisconnected, connectionId = ${connectionId}`);\n        if (this._clientConnections.delete(connectionId)) {\n          try {\n            await this.eioServer.onDisconnected(connectionId);\n            debug(`onDisconnected, Failed to delete non-existing connectionId = ${connectionId}`);\n          } catch (err) {\n            debug(`onDisconnected, Failed to close client connection, connectionId = ${connectionId}, err = ${err}`);\n          }\n        }\n      },\n    });\n  }\n\n  /**\n   * @returns AWPS event handler middleware for EIO Server.\n   */\n  public getEventHandlerEioMiddleware() {\n    /**\n     * AWPS package provides Express middleware for event handlers.\n     * However Express middleware is not compatiable to be directly used by EIO Server.\n     * expressMiddleware = (req: express.Request, res: express.Response, express.NextFunction) =\\> void;\n     * eioMiddleware = (req: IncomingMessage, res: ServerResponse) =\\> void;\n     * To resolve the difference, So a conversion from express middleware to EIO middleware.\n     */\n    const expressMiddleware = this._webPubSubEventHandler.getMiddleware();\n\n    const eioMiddleware = (req, res, errorCallback): void => {\n      /**\n       * `baseUrl` is a property of Express Request object and its used in `expressMiddleware`.\n       * Without actual usage as a part of Express, `req.baseUrl` is always ''.\n       * Ref https://expressjs.com/en/api.html#req.baseUrl\n       */\n      req.baseUrl = \"\";\n      req.path = req.url; // e.g. /eventhandler/\n      expressMiddleware(req, res, errorCallback);\n    };\n\n    return eioMiddleware;\n  }\n\n  /**\n   * @returns AWPS event handler middleware for Express Server.\n   */\n  public getEventHandlerExpressMiddleware() {\n    return this._webPubSubEventHandler.getMiddleware();\n  }\n\n  public getNextSid = (): string | undefined => this._candidateSids.shift();\n\n  public async close(): Promise<void> {\n    this._clientConnections.forEach(async (context) => {\n      await context.close();\n    });\n  }\n\n  /**\n   * Convert an AWPS `connect` request to an Engine.IO `handshake` request.\n   * @param req - AWPS `connect` request.\n   * @param context - Corrsponding `ClientConnectionContext` for the connecting client. It will be used in `createTransport` to bind each transport to the correct AWPS client connection.\n   */\n  private getEioHandshakeRequest(req: WebPubSubConnectRequest, context: ClientConnectionContext): unknown {\n    /**\n     * Properties inside `handshakeRequest` are used in Engine.IO `handshake` method in `Server` class.\n     * src: https://github.com/socketio/engine.io/blob/6.0.x/lib/server.ts#L396\n     */\n    const handshakeRequest: { [key: string]: unknown } = {\n      method: \"GET\",\n      headers: req.headers,\n      connection: {},\n      url: TUNNEL_PATH,\n      _query: {},\n      claims: req.claims,\n    };\n    // Preserve all queires. Each value of `req.queries` is an one-element array which is wrapped by AWPS. Just pick out the first element.\n    // Example: req.queries = { EIO:['4'], t: ['OXhVRj0'], transport: ['polling'] }.\n    for (const key in req.queries) {\n      handshakeRequest._query[key] = req.queries[key][0];\n    }\n    // AWPS helps server abstract the details of Long-Polling and WebSockets with the client. So server always use our own transport `WEBPUBSUB_TRANSPORT_NAME`.\n    handshakeRequest._query[\"transport\"] = WEBPUBSUB_TRANSPORT_NAME;\n    // AWPS client connection context is passed to Engine.IO `createTransport` method to bind each transport to the correct AWPS client connection.\n    handshakeRequest[WEBPUBSUB_CLIENT_CONNECTION_FILED_NAME] = context;\n    return handshakeRequest;\n  }\n}\n"]}