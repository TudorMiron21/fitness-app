{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/EIO/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureSocketIOOptions, AzureSocketIOCredentialOptions, debugModule } from \"../common/utils\";\nimport { WebPubSubTransport } from \"./components/web-pubsub-transport\";\nimport { WebPubSubConnectionManager } from \"./components/web-pubsub-connection-manager\";\nimport * as engine from \"engine.io\";\nimport { InprocessServerProxy } from \"../serverProxies\";\nimport { EIO_CONNECTION_ERROR, WEBPUBSUB_TRANSPORT_NAME } from \"./components/constants\";\nimport { ClientConnectionContext } from \"./components/client-connection-context\";\n\nconst debug = debugModule(\"wps-sio-ext:EIO:index\");\ndebug(\"load\");\n\n/**\n * In the design of Engine.IO package, the EIO server has its own middlewares rather than sharing with http server.\n * And EIO middlewares is put in the first place when receiving HTTP request. Http server listeners is behind EIO middlewares\n *\n *                          .---------------.   Yes\n *     a HTTP request ---\\> |  check(req)?  | --------\\>  `handleRequest(req)` (passed into Engine.IO middlewares)\n *                          |               | --------\\>  HttpServer.listeners\n *                          .---------------.    No\n *\n * And the Engine.IO handshake behaviour is inside `handleRequest`\n * Web PubSub handshake handler is inside its express middleware.\n *\n * TODO: implment BaseServer rather than extends Server\n **/\nexport class WebPubSubEioServer extends engine.Server {\n  public webPubSubOptions: AzureSocketIOOptions | AzureSocketIOCredentialOptions;\n  public webPubSubConnectionManager: WebPubSubConnectionManager;\n  private _setuped: Promise<void>;\n\n  constructor(options: engine.ServerOptions, webPubSubOptions: AzureSocketIOOptions | AzureSocketIOCredentialOptions) {\n    debug(`constructor, options: ${JSON.stringify(options)}, webPubSubOptions: ${JSON.stringify(webPubSubOptions)}`);\n    super(options);\n    this.webPubSubOptions = webPubSubOptions;\n    this.webPubSubConnectionManager = new WebPubSubConnectionManager(this, webPubSubOptions);\n\n    // Using tunnel\n    if (this.webPubSubConnectionManager.service instanceof InprocessServerProxy) {\n      debug(\"constructor, use InprocessServerProxy\");\n      const tunnel: InprocessServerProxy = this.webPubSubConnectionManager.service;\n      tunnel.use(this.webPubSubConnectionManager.getEventHandlerExpressMiddleware());\n      this._setuped = tunnel.runAsync();\n      /**\n       * After closing the EIO server, internal tunnel should be closed as well.\n       * Force override `cleanup`, which is executed when closing EIO server.\n       * In native implementation, it close internal WebSocket server, this is not needed when using Azure Web PubSub.\n       */\n      this[\"cleanup\"] = async () => {\n        // TODO: Find the optimal time to close the tunnel\n        debug(\"cleanup, stop internal tunnel\");\n        await this.webPubSubConnectionManager.close();\n        tunnel.stop();\n      };\n    } else {\n      debug(\"constructor, use RestApiServiceCaller\");\n      const webPubSubEioMiddleware = this.webPubSubConnectionManager.getEventHandlerEioMiddleware();\n      this.use(webPubSubEioMiddleware);\n    }\n    debug(`constructor, finish`);\n  }\n\n  public async setup(): Promise<void> {\n    if (this.webPubSubConnectionManager.service instanceof InprocessServerProxy) {\n      await this._setuped;\n    }\n  }\n\n  protected override createTransport(transportName: string, req: unknown): engine.Transport {\n    debug(`create transport, transportName=${transportName}, force redirect to ${WebPubSubTransport.name}`);\n    return new WebPubSubTransport(req);\n  }\n\n  /**\n   *\n   * @param _req - handshake request\n   * @returns socket id for EIO connection built from handshake request `req`\n   */\n  public override generateId = (_req: unknown): string | undefined => this.webPubSubConnectionManager.getNextSid();\n\n  /**\n   *\n   * @param _transport - transport name\n   * @returns a list of available transports for upgrade given a certain Transport `transport`\n   */\n  public override upgrades = (_transport: string): Array<string> => [];\n\n  public async onConnect(connectionId: string, connectReq: unknown, context: ClientConnectionContext): Promise<void> {\n    await this.handshake(WEBPUBSUB_TRANSPORT_NAME, connectReq, (errorCode: number, errorContext: unknown) => {\n      const message =\n        errorContext && errorContext[\"message\"] ? errorContext[\"message\"] : EIO_CONNECTION_ERROR[errorCode];\n      context.onRefuseEioConnection(message);\n    });\n\n    context.transport = this.clients[connectionId].transport;\n  }\n\n  public async onUserEvent(connectionId: string, content: unknown): Promise<void> {\n    const client = this.clients[connectionId];\n    const packets = await client.transport.parser.decodePayload(content);\n\n    for (const packet of packets) {\n      client.onPacket(packet);\n    }\n  }\n\n  public async onDisconnected(connectionId: string): Promise<void> {\n    this.clients[connectionId].transport.onClose();\n  }\n}\n"]}