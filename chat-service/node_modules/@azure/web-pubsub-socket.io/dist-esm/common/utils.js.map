{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/common/utils.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAKlC,OAAO,WAAW,MAAM,OAAO,CAAC;AAEhC,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAC1D,OAAO,EAAE,oBAAoB,EAA0B,MAAM,kBAAkB,CAAC;AAIhF,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,GAAS,EAAU,EAAE,CAAC,GAAG,GAAG,CAAC,cAAc,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,GAAG,CAAC,eAAe,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,kBAAkB;AAEhL,WAAW,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,EAAQ,EAAE;IACvC,MAAM,SAAS,GAAG,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;IAChC,OAAO,CAAC,GAAG,CAAC,IAAI,SAAS,KAAK,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;AAChD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,KAAK,GAAG,WAAW,CAAC,0BAA0B,CAAC,CAAC;AAE7D,MAAM,UAAU,WAAW,CAAC,CAAS,EAAE,CAAS,EAAE,CAAkC;IAClF,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE;QAC1B,KAAK,EAAE,CAAC;QACR,QAAQ,EAAE,IAAI;QACd,UAAU,EAAE,KAAK;QACjB,YAAY,EAAE,IAAI;KACnB,CAAC,CAAC;AACL,CAAC;AA0FD,SAAS,iBAAiB,CAAC,OAAgB,EAAE,YAAsB;IACjE,KAAK,MAAM,GAAG,IAAI,YAAY,EAAE;QAC9B,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,IAAI,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE;YAAE,OAAO,KAAK,CAAC;KAC9F;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,UAAU,yBAAyB,CACvC,OAA8D;IAE9D,KAAK,CAAC,8BAA8B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC/D,8DAA8D;IAC9D,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAAE;QAC3D,KAAK,CAAC,kDAAkD,CAAC,CAAC;QAC1D,MAAM,YAAY,GAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QACjD,IAAI,iBAAiB,CAAC,OAAO,EAAE,YAAY,CAAC,EAAE;YAC5C,MAAM,IAAI,GAAqB,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;YAC1E,OAAO,oBAAoB,CAAC,oBAAoB,CAAC,GAAG,IAAI,CAAC,CAAC;SAC3D;QACD,MAAM,IAAI,KAAK,CAAC,kCAAkC,YAAY,4CAA4C,CAAC,CAAC;KAC7G;SAAM;QACL,KAAK,CAAC,2CAA2C,CAAC,CAAC;QACnD,MAAM,YAAY,GAAG,CAAC,UAAU,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;QACvD,IAAI,iBAAiB,CAAC,OAAO,EAAE,YAAY,CAAC,EAAE;YAC5C,MAAM,IAAI,GAAsC,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,OAAO,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;YAC1G,OAAO,IAAI,oBAAoB,CAAC,GAAG,IAAI,CAAC,CAAC;SAC1C;QACD,MAAM,IAAI,KAAK,CAAC,kCAAkC,YAAY,4CAA4C,CAAC,CAAC;KAC7G;AACH,CAAC;AAED,MAAM,UAAU,yBAAyB,CACvC,OAA8D;IAE9D,KAAK,CAAC,8BAA8B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC/D,8DAA8D;IAC9D,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAAE;QAC3D,KAAK,CAAC,kDAAkD,CAAC,CAAC;QAC1D,MAAM,YAAY,GAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QACjD,IAAI,iBAAiB,CAAC,OAAO,EAAE,YAAY,CAAC,EAAE;YAC5C,MAAM,IAAI,GAAqB,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;YAC1E,OAAO,IAAI,iBAAiB,CAAC,GAAG,IAAI,EAAE,EAAE,oBAAoB,EAAE,OAAO,CAAC,oBAAoB,EAAE,CAAC,CAAC;SAC/F;QACD,MAAM,IAAI,KAAK,CAAC,kCAAkC,YAAY,4CAA4C,CAAC,CAAC;KAC7G;SAAM;QACL,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAChD,MAAM,YAAY,GAAG,CAAC,UAAU,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;QACvD,IAAI,iBAAiB,CAAC,OAAO,EAAE,YAAY,CAAC,EAAE;YAC5C,MAAM,IAAI,GAAsC,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,OAAO,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;YAC1G,OAAO,IAAI,iBAAiB,CAAC,GAAG,IAAI,EAAE,EAAE,oBAAoB,EAAE,OAAO,CAAC,oBAAoB,EAAE,CAAC,CAAC;SAC/F;QACD,MAAM,IAAI,KAAK,CAAC,kCAAkC,YAAY,4CAA4C,CAAC,CAAC;KAC7G;AACH,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,OAAO,CAAI,QAAyC;IAClE,OAAO,CAAC,GAAG,IAAe,EAAE,EAAE,CAC5B,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC9B,IAAI;YACF,QAAQ,CAAC,GAAG,IAAI,EAAE,CAAC,GAAM,EAAE,EAAE;gBAC3B,OAAO,CAAC,GAAG,CAAC,CAAC;YACf,CAAC,CAAC,CAAC;SACJ;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,CAAC,KAAK,CAAC,CAAC;SACf;IACH,CAAC,CAAC,CAAC;AACP,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,QAAQ,CAAC,GAAsD;IAC7E,mDAAmD;IACnD,OAAO,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;AACvD,CAAC;AAED,6GAA6G;AAC7G,MAAM,UAAU,eAAe,CAAC,MAAwB;IACtD,OAAO,WAAW,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC;SACrE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;AACzC,CAAC;AAED,MAAM,UAAU,aAAa,CAC3B,GAAqC,EACrC,UAAkB,EAClB,OAAgB,EAChB,WAAW,GAAG,kBAAkB;IAEhC,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,cAAc,EAAE,WAAW,EAAE,CAAC,CAAC;IAC3D,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;AACnC,CAAC;AAED,MAAM,UAAU,2BAA2B,CACzC,UAAmF;IAEnF,OAAO,CAAC,MAAc,EAAE,IAA2B,EAAE,EAAE;QACrD,OAAO,UAAU,CAAC,MAAM,CAAC,OAAyB,EAAE,EAAqB,EAAE,IAAoB,CAAC,CAAC;IACnG,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,EAAE,WAAW,EAAE,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureKeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { WebPubSubServiceClient } from \"@azure/web-pubsub\";\nimport debugModule from \"debug\";\nimport { BroadcastOptions } from \"socket.io-adapter\";\nimport { RestServiceClient } from \"./rest-service-client\";\nimport { InprocessServerProxy, WebPubSubServiceCaller } from \"../serverProxies\";\nimport { Request as ExpressRequest, Response as ExpressResponse, NextFunction } from \"express\";\nimport { Socket } from \"socket.io\";\n\nexport const T = (now: Date): string => `${now.toLocaleString().replace(\" AM\", \"\").replace(\" PM\", \"\")}:${now.getMilliseconds().toString().padStart(3, '0')}`; // prettier-ignore\n\ndebugModule.log = (msg, ...args): void => {\n  const timestamp = T(new Date());\n  console.log(`[${timestamp}] ${msg}`, ...args);\n};\n\nexport const debug = debugModule(\"wps-sio-ext:common:utils\");\n\nexport function addProperty(o: object, p: string, f: (...args: unknown[]) => unknown): void {\n  Object.defineProperty(o, p, {\n    value: f,\n    writable: true,\n    enumerable: false,\n    configurable: true,\n  });\n}\n\n/**\n * Options for generating a token to connect a client to Web PubSub for Socket.IO.\n *\n * @public\n */\nexport interface NegotiateOptions {\n  /**\n   * The userId for the client.\n   */\n  userId?: string;\n  /**\n   * Minutes until the token expires.\n   */\n  expirationTimeInMinutes?: number;\n}\n\n/**\n * The negotiate response when negotiate is enabled\n *\n * @public\n */\nexport interface NegotiateResponse {\n  /**\n   * The endpoint of Web PubSub for Socket.IO.\n   */\n  endpoint: string;\n  /**\n   * The path of Web PubSub for Socket.IO.\n   */\n  path: string;\n  /**\n   * The token used to connect to Web PubSub for Socket.IO.\n   */\n  token: string;\n}\n\n/**\n * A function to extract a `NegotiateOptions` from a HTTP `IncomingMessage`\n * @param req - the HTTP `IncomingMessage`\n * @returns a Promise of `NegotiateOptions`\n */\nexport type ConfigureNegotiateOptions = (req: IncomingMessage) => Promise<NegotiateOptions>;\n\n/**\n * Common options for `AzureSocketIOOptions` and `AzureSocketIOCredentialOptions`\n *\n * @public\n */\nexport interface AzureSocketIOCommonOptions {\n  /**\n   * The hub name of Web PubSub for Socket.IO.\n   */\n  hub: string;\n\n  /**\n   * The reverse proxy endpoint of Web PubSub for Socket.IO.\n   */\n  reverseProxyEndpoint?: string;\n}\n\n/**\n * Options for connecting to Web PubSub for Socket.IO using connection string.\n *\n * @public\n */\nexport interface AzureSocketIOOptions extends AzureSocketIOCommonOptions {\n  /**\n   * The connection string of Web PubSub for Socket.IO.\n   */\n  connectionString: string;\n}\n\n/**\n * Options for connecting to Web PubSub for Socket.IO using credential.\n *\n * @public\n */\nexport interface AzureSocketIOCredentialOptions extends AzureSocketIOCommonOptions {\n  /**\n   * The endpoint of Web PubSub for Socket.IO.\n   */\n  endpoint: string;\n  /**\n   * The credential of Web PubSub for Socket.IO.\n   */\n  credential: AzureKeyCredential | TokenCredential;\n}\n\nfunction checkRequiredKeys(options: unknown, requiredKeys: string[]): boolean {\n  for (const key of requiredKeys) {\n    if (options[key] === undefined || options[key] === null || options[key] === \"\") return false;\n  }\n  return true;\n}\n\nexport function getWebPubSubServiceCaller(\n  options: AzureSocketIOOptions | AzureSocketIOCredentialOptions\n): WebPubSubServiceCaller {\n  debug(`getWebPubSubServiceCaller, ${JSON.stringify(options)}`);\n  // if owns connection string, handle as `AzureSocketIOOptions`\n  if (Object.keys(options).indexOf(\"connectionString\") !== -1) {\n    debug(`getWebPubSubServiceCaller, use connection string`);\n    const requiredKeys = [\"connectionString\", \"hub\"];\n    if (checkRequiredKeys(options, requiredKeys)) {\n      const args: [string, string] = [options[\"connectionString\"], options.hub];\n      return InprocessServerProxy.fromConnectionString(...args);\n    }\n    throw new Error(`Expect valid options with keys ${requiredKeys} are expected, but got null or empty value`);\n  } else {\n    debug(`getWebPubSubServiceCaller, use credential`);\n    const requiredKeys = [\"endpoint\", \"credential\", \"hub\"];\n    if (checkRequiredKeys(options, requiredKeys)) {\n      const args: [string, TokenCredential, string] = [options[\"endpoint\"], options[\"credential\"], options.hub];\n      return new InprocessServerProxy(...args);\n    }\n    throw new Error(`Expect valid options with keys ${requiredKeys} are expected, but got null or empty value`);\n  }\n}\n\nexport function getWebPubSubServiceClient(\n  options: AzureSocketIOOptions | AzureSocketIOCredentialOptions\n): WebPubSubServiceClient {\n  debug(`getWebPubSubServiceClient, ${JSON.stringify(options)}`);\n  // if owns connection string, handle as `AzureSocketIOOptions`\n  if (Object.keys(options).indexOf(\"connectionString\") !== -1) {\n    debug(`getWebPubSubServiceClient, use connection string`);\n    const requiredKeys = [\"connectionString\", \"hub\"];\n    if (checkRequiredKeys(options, requiredKeys)) {\n      const args: [string, string] = [options[\"connectionString\"], options.hub];\n      return new RestServiceClient(...args, { reverseProxyEndpoint: options.reverseProxyEndpoint });\n    }\n    throw new Error(`Expect valid options with keys ${requiredKeys} are expected, but got null or empty value`);\n  } else {\n    debug(`WebPubSubServiceClient, use credential`);\n    const requiredKeys = [\"endpoint\", \"credential\", \"hub\"];\n    if (checkRequiredKeys(options, requiredKeys)) {\n      const args: [string, TokenCredential, string] = [options[\"endpoint\"], options[\"credential\"], options.hub];\n      return new RestServiceClient(...args, { reverseProxyEndpoint: options.reverseProxyEndpoint });\n    }\n    throw new Error(`Expect valid options with keys ${requiredKeys} are expected, but got null or empty value`);\n  }\n}\n\n/**\n * Convert a sync function with callback parameter to its async form.\n * @param syncFunc - a sync function with callback as its last parameter\n * @returns the async function converted from sync function `syncFunc`\n */\nexport function toAsync<T>(syncFunc: (...args: unknown[]) => unknown): (...args: unknown[]) => Promise<T> {\n  return (...args: unknown[]) =>\n    new Promise((resolve, reject) => {\n      try {\n        syncFunc(...args, (ret: T) => {\n          resolve(ret);\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n}\n\n/**\n * Stringify a set or list of string .\n * @param set - a set or list of string. Example: Set\\<string\\>{\"a\", \"b\"}\n * @returns the stringified set. Example: \"{ \"a\", \"b\" }\"\n */\nexport function toString(set: Set<string> | string[] | IterableIterator<string>): string {\n  // if (set.rooms) return `${{toString(set.rooms)}}`\n  return set ? `{ \"${[...set].join('\", \"')}\" }` : \"{}\";\n}\n\n// `JSON.stringify` cannot stringify `BroadcastOptions` completely. `rooms` and `except` detail will be lost.\nexport function toOptionsString(option: BroadcastOptions): string {\n  return `{rooms: ${toString(option.rooms)}, except: ${toString(option.except)},\\\nflags: ${JSON.stringify(option.flags)}}`;\n}\n\nexport function writeResponse(\n  res: ExpressResponse | ServerResponse,\n  statusCode: number,\n  message: unknown,\n  contentType = \"application/json\"\n): void {\n  res.writeHead(statusCode, { \"Content-Type\": contentType });\n  res.end(JSON.stringify(message));\n}\n\nexport function getSioMiddlewareFromExpress(\n  middleware: (req: ExpressRequest, res: ExpressResponse, next: NextFunction) => void\n) {\n  return (socket: Socket, next: (err?: Error) => void) => {\n    return middleware(socket.request as ExpressRequest, {} as ExpressResponse, next as NextFunction);\n  };\n}\n\nexport { debugModule };\n"]}