// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import debugModule from "debug";
import { RestServiceClient } from "./rest-service-client";
import { InprocessServerProxy } from "../serverProxies";
export const T = (now) => `${now.toLocaleString().replace(" AM", "").replace(" PM", "")}:${now.getMilliseconds().toString().padStart(3, '0')}`; // prettier-ignore
debugModule.log = (msg, ...args) => {
    const timestamp = T(new Date());
    console.log(`[${timestamp}] ${msg}`, ...args);
};
export const debug = debugModule("wps-sio-ext:common:utils");
export function addProperty(o, p, f) {
    Object.defineProperty(o, p, {
        value: f,
        writable: true,
        enumerable: false,
        configurable: true,
    });
}
function checkRequiredKeys(options, requiredKeys) {
    for (const key of requiredKeys) {
        if (options[key] === undefined || options[key] === null || options[key] === "")
            return false;
    }
    return true;
}
export function getWebPubSubServiceCaller(options) {
    debug(`getWebPubSubServiceCaller, ${JSON.stringify(options)}`);
    // if owns connection string, handle as `AzureSocketIOOptions`
    if (Object.keys(options).indexOf("connectionString") !== -1) {
        debug(`getWebPubSubServiceCaller, use connection string`);
        const requiredKeys = ["connectionString", "hub"];
        if (checkRequiredKeys(options, requiredKeys)) {
            const args = [options["connectionString"], options.hub];
            return InprocessServerProxy.fromConnectionString(...args);
        }
        throw new Error(`Expect valid options with keys ${requiredKeys} are expected, but got null or empty value`);
    }
    else {
        debug(`getWebPubSubServiceCaller, use credential`);
        const requiredKeys = ["endpoint", "credential", "hub"];
        if (checkRequiredKeys(options, requiredKeys)) {
            const args = [options["endpoint"], options["credential"], options.hub];
            return new InprocessServerProxy(...args);
        }
        throw new Error(`Expect valid options with keys ${requiredKeys} are expected, but got null or empty value`);
    }
}
export function getWebPubSubServiceClient(options) {
    debug(`getWebPubSubServiceClient, ${JSON.stringify(options)}`);
    // if owns connection string, handle as `AzureSocketIOOptions`
    if (Object.keys(options).indexOf("connectionString") !== -1) {
        debug(`getWebPubSubServiceClient, use connection string`);
        const requiredKeys = ["connectionString", "hub"];
        if (checkRequiredKeys(options, requiredKeys)) {
            const args = [options["connectionString"], options.hub];
            return new RestServiceClient(...args, { reverseProxyEndpoint: options.reverseProxyEndpoint });
        }
        throw new Error(`Expect valid options with keys ${requiredKeys} are expected, but got null or empty value`);
    }
    else {
        debug(`WebPubSubServiceClient, use credential`);
        const requiredKeys = ["endpoint", "credential", "hub"];
        if (checkRequiredKeys(options, requiredKeys)) {
            const args = [options["endpoint"], options["credential"], options.hub];
            return new RestServiceClient(...args, { reverseProxyEndpoint: options.reverseProxyEndpoint });
        }
        throw new Error(`Expect valid options with keys ${requiredKeys} are expected, but got null or empty value`);
    }
}
/**
 * Convert a sync function with callback parameter to its async form.
 * @param syncFunc - a sync function with callback as its last parameter
 * @returns the async function converted from sync function `syncFunc`
 */
export function toAsync(syncFunc) {
    return (...args) => new Promise((resolve, reject) => {
        try {
            syncFunc(...args, (ret) => {
                resolve(ret);
            });
        }
        catch (error) {
            reject(error);
        }
    });
}
/**
 * Stringify a set or list of string .
 * @param set - a set or list of string. Example: Set\<string\>{"a", "b"}
 * @returns the stringified set. Example: "{ "a", "b" }"
 */
export function toString(set) {
    // if (set.rooms) return `${{toString(set.rooms)}}`
    return set ? `{ "${[...set].join('", "')}" }` : "{}";
}
// `JSON.stringify` cannot stringify `BroadcastOptions` completely. `rooms` and `except` detail will be lost.
export function toOptionsString(option) {
    return `{rooms: ${toString(option.rooms)}, except: ${toString(option.except)},\
flags: ${JSON.stringify(option.flags)}}`;
}
export function writeResponse(res, statusCode, message, contentType = "application/json") {
    res.writeHead(statusCode, { "Content-Type": contentType });
    res.end(JSON.stringify(message));
}
export function getSioMiddlewareFromExpress(middleware) {
    return (socket, next) => {
        return middleware(socket.request, {}, next);
    };
}
export { debugModule };
//# sourceMappingURL=utils.js.map