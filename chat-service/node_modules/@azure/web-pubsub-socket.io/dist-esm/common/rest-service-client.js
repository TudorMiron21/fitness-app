import { WebPubSubServiceClient } from "@azure/web-pubsub";
import { getInvokeOperationSpec } from "./azure-api/operation-spec";
import { debugModule } from "./utils";
import { isTokenCredential } from "@azure/core-auth";
import jwt from "jsonwebtoken";
import { createTracingClient } from "@azure/core-tracing";
/** @internal */
const tracingClient = createTracingClient({
    namespace: "Microsoft.WebPubSub",
    packageName: "@azure/web-pubsub-socket.io",
});
const debug = debugModule("wps-sio-ext:common:rest-service-client");
/**
 * Communicate with Azure Web PubSub service via traditional REST API.
 */
export class RestServiceClient extends WebPubSubServiceClient {
    async invoke(message, bodyHandler, options) {
        const onResponse = (rawResponse, flatResponse, error) => {
            if (error || rawResponse.status !== 200) {
                // Log and do nothing, let it timeout
                debug(`broadcastWithAck response status code = ${rawResponse["status"]}, error = ${error},\
rawResponse = ${JSON.stringify(rawResponse)}`);
                return;
            }
            if (rawResponse.browserStreamBody) {
                // Browser stream
                const reader = rawResponse.browserStreamBody["getReader"]();
                reader.read().then(function processText({ done, value }) {
                    bodyHandler(value, done);
                });
            }
            else {
                const stream = rawResponse["readableStreamBody"];
                stream.on("end", () => {
                    bodyHandler(undefined, true);
                });
                stream.on("data", (chunk) => {
                    bodyHandler(chunk.toString(), false);
                });
            }
        };
        const operationArguments = {
            ...options,
            hub: this.hubName,
            message: message,
            options: { onResponse: onResponse },
            filter: options?.filter,
            contentType: options?.contentType,
        };
        await this["client"].sendOperationRequest(operationArguments, getInvokeOperationSpec(this.endpoint));
    }
    /**
     * Generate a token for a client to connect to the Azure Web PubSub service.
     *
     * @param options - Additional options
     */
    async getClientAccessToken(options = {}) {
        return tracingClient.withSpan("getClientAccessToken", options, async (updatedOptions) => {
            const endpoint = this.endpoint.endsWith("/") ? this.endpoint : this.endpoint + "/";
            const baseUrl = `${endpoint}clients/socketio/hubs/${this.hubName}`;
            const credential = this["credential"];
            const innerClient = this["client"];
            let token;
            if (isTokenCredential(credential)) {
                const response = await innerClient.webPubSub.generateClientToken(this.hubName, updatedOptions);
                token = response.token;
                if (token === null || token === undefined) {
                    throw new Error(`Response from "generateClientToken" doesn't contain valid property "token"`);
                }
            }
            else {
                const key = credential.key;
                const payload = {
                    role: options?.roles,
                    "webpubsub.group": options?.groups,
                    userId: options?.userId,
                };
                const signOptions = {
                    audience: baseUrl,
                    expiresIn: options?.expirationTimeInMinutes === undefined ? "1h" : `${options.expirationTimeInMinutes}m`,
                    algorithm: "HS256",
                };
                if (options?.userId) {
                    signOptions.subject = options?.userId;
                }
                token = jwt.sign(payload, key, signOptions);
            }
            return {
                token,
                baseUrl,
                url: `${baseUrl}?access_token=${token}`,
            };
        });
    }
}
//# sourceMappingURL=rest-service-client.js.map