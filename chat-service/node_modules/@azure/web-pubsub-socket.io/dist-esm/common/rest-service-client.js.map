{"version":3,"file":"rest-service-client.js","sourceRoot":"","sources":["../../src/common/rest-service-client.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPubSubServiceClient, GenerateClientTokenOptions, ClientTokenResponse } from \"@azure/web-pubsub\";\nimport { getInvokeOperationSpec } from \"./azure-api/operation-spec\";\nimport { debugModule } from \"./utils\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport jwt from \"jsonwebtoken\";\n\nimport { createTracingClient } from \"@azure/core-tracing\";\n\n/** @internal */\nconst tracingClient = createTracingClient({\n  namespace: \"Microsoft.WebPubSub\",\n  packageName: \"@azure/web-pubsub-socket.io\",\n});\n\nimport * as coreClient from \"@azure/core-client\";\n\nconst debug = debugModule(\"wps-sio-ext:common:rest-service-client\");\n\n/**\n * Communicate with Azure Web PubSub service via traditional REST API.\n */\nexport class RestServiceClient extends WebPubSubServiceClient {\n  async invoke(\n    message: string,\n    bodyHandler: (data: Uint8Array, end: boolean) => void,\n    options?: { filter: string; contentType: string }\n  ): Promise<void> {\n    const onResponse = (rawResponse: coreClient.FullOperationResponse, flatResponse: unknown, error?: unknown) => {\n      if (error || rawResponse.status !== 200) {\n        // Log and do nothing, let it timeout\n        debug(`broadcastWithAck response status code = ${rawResponse[\"status\"]}, error = ${error},\\\nrawResponse = ${JSON.stringify(rawResponse)}`);\n        return;\n      }\n\n      if (rawResponse.browserStreamBody) {\n        // Browser stream\n        const reader = rawResponse.browserStreamBody[\"getReader\"]();\n        reader.read().then(function processText({ done, value }) {\n          bodyHandler(value, done);\n        });\n      } else {\n        const stream = rawResponse[\"readableStreamBody\"];\n        stream.on(\"end\", () => {\n          bodyHandler(undefined, true);\n        });\n        stream.on(\"data\", (chunk) => {\n          bodyHandler(chunk.toString(), false);\n        });\n      }\n    };\n\n    const operationArguments: coreClient.OperationArguments = {\n      ...options,\n      hub: this.hubName,\n      message: message,\n      options: { onResponse: onResponse },\n      filter: options?.filter,\n      contentType: options?.contentType,\n    };\n\n    await (this[\"client\"] as coreClient.ServiceClient).sendOperationRequest(\n      operationArguments,\n      getInvokeOperationSpec(this.endpoint)\n    );\n  }\n\n  /**\n   * Generate a token for a client to connect to the Azure Web PubSub service.\n   *\n   * @param options - Additional options\n   */\n  public async getClientAccessToken(options: GenerateClientTokenOptions = {}): Promise<ClientTokenResponse> {\n    return tracingClient.withSpan(\"getClientAccessToken\", options, async (updatedOptions) => {\n      const endpoint = this.endpoint.endsWith(\"/\") ? this.endpoint : this.endpoint + \"/\";\n      const baseUrl = `${endpoint}clients/socketio/hubs/${this.hubName}`;\n      const credential = this[\"credential\"];\n      const innerClient = this[\"client\"];\n      let token: string;\n      if (isTokenCredential(credential)) {\n        const response = await innerClient.webPubSub.generateClientToken(this.hubName, updatedOptions);\n        token = response.token;\n        if (token === null || token === undefined) {\n          throw new Error(`Response from \"generateClientToken\" doesn't contain valid property \"token\"`);\n        }\n      } else {\n        const key = credential.key;\n        const payload = {\n          role: options?.roles,\n          \"webpubsub.group\": options?.groups,\n          userId: options?.userId,\n        };\n        const signOptions: jwt.SignOptions = {\n          audience: baseUrl,\n          expiresIn: options?.expirationTimeInMinutes === undefined ? \"1h\" : `${options.expirationTimeInMinutes}m`,\n          algorithm: \"HS256\",\n        };\n        if (options?.userId) {\n          signOptions.subject = options?.userId;\n        }\n        token = jwt.sign(payload, key, signOptions);\n      }\n\n      return {\n        token,\n        baseUrl,\n        url: `${baseUrl}?access_token=${token}`,\n      };\n    });\n  }\n}\n"]}