/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { toAsync } from "../../common/utils";
import { encodePayload as encodeEioPayload } from "engine.io-parser";
import { Encoder as SioEncoder } from "socket.io-parser";
const encodeEioPayloadAsync = toAsync(encodeEioPayload);
const sioEncoder = new SioEncoder();
// Modified from https://github.com/socketio/socket.io-adapter/blob/2.5.2/lib/index.ts#L233
export function getSingleEioEncodedPayload(packet) {
    // if `packet` owns binary attachements, `sioEncoder.encode` returns [string, ...buffers].
    // Otherwise, it returns a single element of string which is the encoded SIO packet.
    let encodedSioPackets = sioEncoder.encode(packet);
    // Ensure `encodedSioPackets` is an array
    encodedSioPackets = Array.isArray(encodedSioPackets) ? encodedSioPackets : [encodedSioPackets];
    const eioPackets = encodedSioPackets.map((item) => {
        return { type: "message", data: item };
    });
    return encodeEioPayloadAsync(eioPackets);
}
//# sourceMappingURL=encoder.js.map