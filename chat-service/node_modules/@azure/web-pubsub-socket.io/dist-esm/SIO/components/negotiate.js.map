{"version":3,"file":"negotiate.js","sourceRoot":"","sources":["../../../src/SIO/components/negotiate.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  debugModule,\n  AzureSocketIOOptions,\n  AzureSocketIOCredentialOptions,\n  getWebPubSubServiceClient,\n  ConfigureNegotiateOptions,\n  NegotiateOptions,\n  NegotiateResponse,\n  writeResponse,\n} from \"../../common/utils\";\nimport { WEB_PUBSUB_OPTIONS_PROPERY_NAME } from \"./constants\";\nimport * as SIO from \"socket.io\";\nimport { Session } from \"express-session\";\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { parse } from \"url\";\n\nconst debug = debugModule(\"wps-sio-ext:SIO:negotiate\");\nconst defaultNegotiateOptions: ConfigureNegotiateOptions = async () => ({} as NegotiateOptions);\n\n/**\n * Returns a Express middleware to handle negotiate request\n *\n * @param io - a Socket.IO server processed by `useAzureSocketIO` or a option used by `useAzureSocketIO`.\n * @param configureNegotiateOptions - a customized function which defines how to extract information for negotiation from a HTTP request.\n * @returns\n */\nexport function negotiate(\n  io: SIO.Server | AzureSocketIOOptions | AzureSocketIOCredentialOptions,\n  configureNegotiateOptions?: ConfigureNegotiateOptions\n): (req: IncomingMessage, res: ServerResponse, next: (err?: Error) => void) => void {\n  debug(`getNegotiateExpressMiddleware`);\n\n  const wpsOptions: AzureSocketIOOptions | AzureSocketIOCredentialOptions =\n    io instanceof SIO.Server ? io[WEB_PUBSUB_OPTIONS_PROPERY_NAME] : io;\n  const serviceClient = getWebPubSubServiceClient(wpsOptions);\n\n  return async (req: IncomingMessage, res: ServerResponse, _next: (err?: Error) => void): Promise<void> => {\n    try {\n      debug(\"negotiate, start\");\n\n      if (!configureNegotiateOptions) {\n        configureNegotiateOptions = defaultNegotiateOptions;\n      }\n      const negotiateOptions = await configureNegotiateOptions(req);\n      const tokenResponse = await serviceClient.getClientAccessToken(negotiateOptions);\n      const url = new URL(tokenResponse.baseUrl);\n      const message: NegotiateResponse = {\n        endpoint: url.origin,\n        path: url.pathname,\n        token: tokenResponse.token,\n      };\n      writeResponse(res, 200, message);\n      debug(\"negotiate, finished\");\n    } catch (e) {\n      writeResponse(res, 500, { message: \"Internal Server Error\" });\n      debug(`negotiate, error: ${e.message}`);\n    }\n  };\n}\n\n/**\n * Get a `ConfigureNegotiateOptions` used by `negotaite` to enable passport authentication.\n * Using this middleware, the user id of passport will be put into the response for negotiate request as a part of JWT token.\n * When the Socket.IO client connects to the server, the user id in JWT token will be extracted and the corresponding passport will be restored and `socket.request.user` will be available.\n *\n * @param assignProperty - the property name of passport object in `socket.request`. Default value is `user`. Reference: https://www.jsdocs.io/package/@types/passport#AuthenticateOptions.assignProperty\n * @returns\n */\nexport function usePassport(assignProperty = \"user\"): ConfigureNegotiateOptions {\n  if (!assignProperty || assignProperty.length === 0) {\n    throw new Error(\"Valid assignProperty is required.\");\n  }\n\n  return async (req: IncomingMessage) => {\n    const query = parse(req.url || \"\", true).query;\n    const expirationMinutes = Number(query[\"expirationMinutes\"] ?? 600);\n\n    const passport = req[assignProperty];\n    if (passport) {\n      return { userId: passport.id, expirationTimeInMinutes: expirationMinutes };\n    }\n    return { expirationTimeInMinutes: expirationMinutes };\n  };\n}\n\n/**\n * Get a Express which cooperates with `usePassport` to restore passport in `socket.request`.\n *\n * @param assignProperty - the property name of passport object in `socket.request`. Default value is `user`. Reference: https://www.jsdocs.io/package/@types/passport#AuthenticateOptions.assignProperty\n * @returns\n */\nexport function restorePassport(assignProperty = \"user\") {\n  return (request: IncomingMessage, response: ServerResponse, next: (err?: Error) => void) => {\n    try {\n      /**\n       * request[\"claims\"] should be an one-element string array.\n       * Examples: ['0'], ['bob']\n       **/\n      if (request[\"claims\"]?.userId?.length !== 1) {\n        throw new Error(`Invalid claims.userId = ${request[\"claims\"]?.userId}`);\n      }\n      const passportUserId = request[\"claims\"].userId[0];\n      request[\"session\"] = { passport: {} } as unknown as Session;\n      request[\"session\"][\"passport\"][assignProperty] = passportUserId;\n    } catch (e) {\n      debug(`restorePassport, error: ${e.message}`);\n    }\n    next();\n  };\n}\n\n/**\n * Get a Express which cooperates with `negotiate` to restore claims in `socket.request`.\n *\n * @returns\n */ export function restoreClaims() {\n  return (request: IncomingMessage, response: ServerResponse, next: (err?: Error) => void) => {\n    try {\n      if (!request[\"claims\"]) return next();\n      if (!request[\"claims\"][\"customClaims\"]) return next();\n    } catch (e) {\n      debug(`restoreClaims, error: ${e.message}`);\n    }\n    next();\n  };\n}\n"]}