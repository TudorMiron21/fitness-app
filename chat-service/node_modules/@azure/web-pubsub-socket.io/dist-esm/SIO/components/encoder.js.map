{"version":3,"file":"encoder.js","sourceRoot":"","sources":["../../../src/SIO/components/encoder.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAC7C,OAAO,EAAuB,aAAa,IAAI,gBAAgB,EAA+B,MAAM,kBAAkB,CAAC;AACvH,OAAO,EAAuB,OAAO,IAAI,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAE9E,MAAM,qBAAqB,GAAG,OAAO,CAAS,gBAAgB,CAAC,CAAC;AAChE,MAAM,UAAU,GAAe,IAAI,UAAU,EAAE,CAAC;AAEhD,2FAA2F;AAC3F,MAAM,UAAU,0BAA0B,CAAC,MAAiB;IAC1D,0FAA0F;IAC1F,oFAAoF;IACpF,IAAI,iBAAiB,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAElD,yCAAyC;IACzC,iBAAiB,GAAG,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC;IAE/F,MAAM,UAAU,GAAgB,iBAAiB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QAC7D,OAAO,EAAE,IAAI,EAAE,SAA0B,EAAE,IAAI,EAAE,IAAI,EAAe,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,OAAO,qBAAqB,CAAC,UAAU,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { toAsync } from \"../../common/utils\";\nimport { Packet as EioPacket, encodePayload as encodeEioPayload, PacketType as EioPacketType } from \"engine.io-parser\";\nimport { Packet as SioPacket, Encoder as SioEncoder } from \"socket.io-parser\";\n\nconst encodeEioPayloadAsync = toAsync<string>(encodeEioPayload);\nconst sioEncoder: SioEncoder = new SioEncoder();\n\n// Modified from https://github.com/socketio/socket.io-adapter/blob/2.5.2/lib/index.ts#L233\nexport function getSingleEioEncodedPayload(packet: SioPacket): Promise<string> {\n  // if `packet` owns binary attachements, `sioEncoder.encode` returns [string, ...buffers].\n  // Otherwise, it returns a single element of string which is the encoded SIO packet.\n  let encodedSioPackets = sioEncoder.encode(packet);\n\n  // Ensure `encodedSioPackets` is an array\n  encodedSioPackets = Array.isArray(encodedSioPackets) ? encodedSioPackets : [encodedSioPackets];\n\n  const eioPackets: EioPacket[] = encodedSioPackets.map((item) => {\n    return { type: \"message\" as EioPacketType, data: item } as EioPacket;\n  });\n\n  return encodeEioPayloadAsync(eioPackets);\n}\n"]}