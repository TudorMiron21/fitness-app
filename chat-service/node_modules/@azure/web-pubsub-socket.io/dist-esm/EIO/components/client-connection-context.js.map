{"version":3,"file":"client-connection-context.js","sourceRoot":"","sources":["../../../src/EIO/components/client-connection-context.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAKjD,OAAO,EAAE,qCAAqC,EAAE,MAAM,aAAa,CAAC;AAIpE,MAAM,KAAK,GAAG,WAAW,CAAC,yCAAyC,CAAC,CAAC;AAUrE;;;GAGG;AACH,MAAM,OAAO,uBAAuB;IAC3B,OAAO,CAAyB;IAChC,YAAY,CAAS;IACrB,gBAAgB,CAAU;IAC1B,SAAS,CAAY;IACpB,uBAAuB,CAAkC;IACzD,gBAAgB,CAA0B;IAElD,YACE,aAAqC,EACrC,YAAoB,EACpB,sBAAuD,EACvD,eAAyC;QAEzC,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,uBAAuB,GAAG,sBAAsB,CAAC;QACtD,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;IAC1C,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,IAAI,CAAC,OAAe,EAAE,EAA0B;QAC3D,KAAK,CAAC,gBAAgB,OAAO,YAAY,OAAO,OAAO,EAAE,CAAC,CAAC;QAE3D,MAAM,OAAO,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;QAE9C,IAAI;YACF,MAAM,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;SAC1E;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,EAAE,EAAE;gBACN,EAAE,CAAC,KAAK,CAAC,CAAC;aACX;SACF;QAED,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAChC,CAAC;IAED;;;OAGG;IACI,qBAAqB,CAAC,iBAAyB;QACpD,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC;YACnC,CAAC,qCAAqC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;SAC3C,CAAC,CAAC;QAC/B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACI,qBAAqB,CAAC,YAAoB;QAC/C,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,GAAG,EAAE,6CAA6C,YAAY,EAAE,CAAC,CAAC;QACpG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;SACrC;IACH,CAAC;IAEM,KAAK,CAAC,KAAK;QAChB,IAAI;YACF,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;SAChD;QAAC,OAAO,KAAK,EAAE;YACd,KAAK,CAAC,4CAA4C,KAAK,EAAE,CAAC,CAAC;SAC5D;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { debugModule } from \"../../common/utils\";\nimport {\n  ConnectResponse as WebPubSubConnectResponse,\n  ConnectResponseHandler as WebPubSubConnectResponseHandler,\n} from \"@azure/web-pubsub-express\";\nimport { WEBPUBSUB_CONNECT_RESPONSE_FIELD_NAME } from \"./constants\";\nimport { WebPubSubServiceCaller } from \"../../serverProxies\";\nimport { Transport } from \"engine.io\";\n\nconst debug = debugModule(\"wps-sio-ext:EIO:ClientConnectionContext\");\n\n// Reference: https://github.com/socketio/engine.io/blob/123b68c04f9e971f59b526e0f967a488ee6b0116/README.md?plain=1#L219\nexport interface ConnectionError {\n  req: unknown;\n  code: number;\n  message: string;\n  context: unknown;\n}\n\n/**\n * A logical concept that stands for an Engine.IO client connection, every connection has a unique `connectionId`.\n * It maps Engine.IO Transport behaviours to Azure Web PubSub service REST API calls.\n */\nexport class ClientConnectionContext {\n  public service: WebPubSubServiceCaller;\n  public connectionId: string;\n  public connectResponded: boolean;\n  public transport: Transport;\n  private _connectResponseHandler: WebPubSubConnectResponseHandler;\n  private _refusedCallback: (error: string) => void;\n\n  constructor(\n    serviceClient: WebPubSubServiceCaller,\n    connectionId: string,\n    connectResponseHandler: WebPubSubConnectResponseHandler,\n    refusedCallback?: (error: string) => void\n  ) {\n    this.service = serviceClient;\n    this.connectionId = connectionId;\n    this._connectResponseHandler = connectResponseHandler;\n    this.connectResponded = false;\n    this._refusedCallback = refusedCallback;\n  }\n\n  /**\n   * Send `message` to a the bound client connection.\n   * @param message - The message\n   * @param cb - Callback function to handle error\n   */\n  public async send(message: string, cb?: (err?: Error) => void): Promise<void> {\n    debug(`send message ${message}, type = ${typeof message}`);\n\n    const options = { contentType: \"text/plain\" };\n\n    try {\n      await this.service.sendToConnection(this.connectionId, message, options);\n    } catch (error) {\n      if (cb) {\n        cb(error);\n      }\n    }\n\n    debug(`send message, finish`);\n  }\n\n  /**\n   * Action after an EIO connection is accepted by EIO server and the server is trying to send open packet to client\n   * @param openPacketPayload - Open packet payload without type in first character\n   */\n  public onAcceptEioConnection(openPacketPayload: string): void {\n    this._connectResponseHandler.success({\n      [WEBPUBSUB_CONNECT_RESPONSE_FIELD_NAME]: JSON.parse(openPacketPayload),\n    } as WebPubSubConnectResponse);\n    this.connectResponded = true;\n  }\n\n  /**\n   * Action after an EIO connection is refused by EIO server\n   * @param errorMessage - Error message\n   */\n  public onRefuseEioConnection(errorMessage: string): void {\n    this._connectResponseHandler.fail(400, `EIO server refused connection with error: ${errorMessage}`);\n    this.connectResponded = true;\n    if (this._refusedCallback) {\n      this._refusedCallback(errorMessage);\n    }\n  }\n\n  public async close(): Promise<void> {\n    try {\n      await this.transport.send([{ type: \"close\" }]);\n    } catch (error) {\n      debug(`Close ClientConnectionContext got error: ${error}`);\n    }\n  }\n}\n"]}