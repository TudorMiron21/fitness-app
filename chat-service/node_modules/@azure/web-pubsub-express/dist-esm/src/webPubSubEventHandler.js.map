{"version":3,"file":"webPubSubEventHandler.js","sourceRoot":"","sources":["../../src/webPubSubEventHandler.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAGhE;;GAEG;AACH,MAAM,OAAO,qBAAqB;IAQhC;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2BG;IACH,YAAoB,GAAW,EAAE,OAAsC;;QAAnD,QAAG,GAAH,GAAG,CAAQ;QAC7B,MAAM,IAAI,GAAG,CAAC,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,mCAAI,uBAAuB,GAAG,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAC5E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC;QACnD,IAAI,CAAC,mBAAmB,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACI,aAAa;QAClB,OAAO,KAAK,EACV,GAAoB,EACpB,GAAqB,EACrB,IAA0B,EACX,EAAE;YACjB,iEAAiE;YACjE,IAAI,UAAU,GAAG,CAAC,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;YAExD,oBAAoB;YACpB,UAAU,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,GAAG,GAAG,CAAC;YACtE,IAAI,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACpC,IAAI,GAAG,CAAC,MAAM,KAAK,SAAS,EAAE;oBAC5B,IAAI,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;wBACtD,OAAO;qBACR;iBACF;qBAAM,IAAI,GAAG,CAAC,MAAM,KAAK,MAAM,EAAE;oBAChC,IAAI;wBACF,IAAI,MAAM,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;4BAC1D,OAAO;yBACR;qBACF;oBAAC,OAAO,GAAQ,EAAE;wBACjB,IAAI,CAAC,GAAG,CAAC,CAAC;wBACV,OAAO;qBACR;iBACF;aACF;YAED,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;IACJ,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport express from \"express-serve-static-core\";\n\nimport { CloudEventsDispatcher } from \"./cloudEventsDispatcher\";\nimport { WebPubSubEventHandlerOptions } from \"./cloudEventsProtocols\";\n\n/**\n * The handler to handle incoming CloudEvents messages\n */\nexport class WebPubSubEventHandler {\n  /**\n   * The path this CloudEvents handler listens to\n   */\n  public readonly path: string;\n\n  private _cloudEventsHandler: CloudEventsDispatcher;\n\n  /**\n   * Creates an instance of a WebPubSubEventHandler for handling incoming CloudEvents messages.\n   *\n   * Example usage:\n   * ```ts\n   * import express from \"express\";\n   * import { WebPubSubEventHandler } from \"@azure/web-pubsub-express\";\n   * const endpoint = \"https://xxxx.webpubsubdev.azure.com\"\n   * const handler = new WebPubSubEventHandler('chat', {\n   *   handleConnect: (req, res) => {\n   *     console.log(JSON.stringify(req));\n   *     return {};\n   *   },\n   *   onConnected: req => {\n   *     console.log(JSON.stringify(req));\n   *   },\n   *   handleUserEvent: (req, res) => {\n   *     console.log(JSON.stringify(req));\n   *     res.success(\"Hey \" + req.data, req.dataType);\n   *    };\n   *   allowedEndpoints: [ endpoint ]\n   *  },\n   * });\n   * ```\n   *\n   * @param hub - The name of the hub to listen to\n   * @param options - Options to configure the event handler\n   */\n  constructor(private hub: string, options?: WebPubSubEventHandlerOptions) {\n    const path = (options?.path ?? `/api/webpubsub/hubs/${hub}/`).toLowerCase();\n    this.path = path.endsWith(\"/\") ? path : path + \"/\";\n    this._cloudEventsHandler = new CloudEventsDispatcher(this.hub, options);\n  }\n\n  /**\n   * Get the middleware to process the CloudEvents requests\n   */\n  public getMiddleware(): express.RequestHandler {\n    return async (\n      req: express.Request,\n      res: express.Response,\n      next: express.NextFunction\n    ): Promise<void> => {\n      // Request originalUrl can contain query while baseUrl + path not\n      let requestUrl = (req.baseUrl + req.path).toLowerCase();\n\n      // normalize the Url\n      requestUrl = requestUrl.endsWith(\"/\") ? requestUrl : requestUrl + \"/\";\n      if (requestUrl.startsWith(this.path)) {\n        if (req.method === \"OPTIONS\") {\n          if (this._cloudEventsHandler.handlePreflight(req, res)) {\n            return;\n          }\n        } else if (req.method === \"POST\") {\n          try {\n            if (await this._cloudEventsHandler.handleRequest(req, res)) {\n              return;\n            }\n          } catch (err: any) {\n            next(err);\n            return;\n          }\n        }\n      }\n\n      next();\n    };\n  }\n}\n"]}