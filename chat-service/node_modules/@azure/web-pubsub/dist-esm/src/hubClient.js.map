{"version":3,"file":"hubClient.js","sourceRoot":"","sources":["../../src/hubClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CommonClientOptions, FullOperationResponse, OperationOptions } from \"@azure/core-client\";\nimport { RestError, RequestBodyType } from \"@azure/core-rest-pipeline\";\nimport { GeneratedClient } from \"./generated/generatedClient\";\nimport { WebPubSubGroup, WebPubSubGroupImpl } from \"./groupClient\";\nimport { AzureKeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { webPubSubKeyCredentialPolicy } from \"./webPubSubCredentialPolicy\";\nimport { tracingClient } from \"./tracing\";\nimport { logger } from \"./logger\";\nimport { parseConnectionString } from \"./parseConnectionString\";\nimport jwt from \"jsonwebtoken\";\nimport { getPayloadForMessage } from \"./utils\";\nimport { GeneratedClientOptionalParams } from \"./generated\";\nimport { webPubSubReverseProxyPolicy } from \"./reverseProxyPolicy\";\n\n/**\n * Options for closing a connection to a hub.\n */\nexport interface HubCloseConnectionOptions extends OperationOptions {\n  /**\n   * Reason the connection is being closed.\n   */\n  reason?: string;\n}\n\n/**\n * Options for closing all connections to a hub.\n */\nexport interface HubCloseAllConnectionsOptions extends OperationOptions {\n  /**\n   * Reason the connection is being closed.\n   */\n  reason?: string;\n}\n\n/**\n * Options for closing all of a user's connections to a hub.\n */\nexport interface HubCloseUserConnectionsOptions extends OperationOptions {\n  /**\n   * Reason the connection is being closed.\n   */\n  reason?: string;\n}\n\n/**\n * Options for sending messages to hubs.\n */\nexport interface HubSendToAllOptions extends OperationOptions {\n  /**\n   * Connection ids to exclude from receiving this message.\n   */\n  excludedConnections?: string[];\n  /**\n   * The filter syntax to filter out the connections to send the messages to following OData filter syntax.\n   * Examples:\n   *  * Exclude connections from `user1` and `user2`: `userId ne 'user1' and userId ne 'user2'`\n   *  * Exclude connections in `group1`: `not('group1' in groups)`\n   * Details about `filter` syntax please see [OData filter syntax for Azure Web PubSub](https://aka.ms/awps/filter-syntax).\n   */\n  filter?: string;\n}\n\n/**\n * Options for sending text messages to hubs.\n */\nexport interface HubSendTextToAllOptions extends HubSendToAllOptions {\n  /**\n   * The content will be sent to the clients in plain text.\n   */\n  contentType: \"text/plain\";\n}\n\n/**\n * Types which can be serialized and sent as JSON.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type JSONTypes = string | number | boolean | object;\n\n/**\n * Options for constructing a HubAdmin client.\n */\nexport interface WebPubSubServiceClientOptions extends CommonClientOptions {\n  /**\n   * Reverse proxy endpoint (for example, your Azure API management endpoint)\n   */\n  reverseProxyEndpoint?: string;\n  /**\n   * Options to configure the logging options.\n   */\n  loggingOptions?: WebPubSubServiceClientLogOptions;\n}\n\n/**\n * Options to configure the logging options.\n */\nexport declare interface WebPubSubServiceClientLogOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled.\n   * Defaults include a list of well-known safe headers. Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  additionalAllowedHeaderNames?: string[];\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  additionalAllowedQueryParameters?: string[];\n}\n\n/**\n * Options for checking if a connection exists.\n */\nexport interface HasConnectionOptions extends OperationOptions {}\n\n/**\n * Options for checking if a group exists.\n */\nexport interface HubHasGroupOptions extends OperationOptions {}\n\n/**\n * Options for checking if a user exists.\n */\nexport interface HubHasUserOptions extends OperationOptions {}\n\n/**\n * Options for removing a user from all groups.\n */\nexport interface HubRemoveUserFromAllGroupsOptions extends HubCloseConnectionOptions {}\n\n/**\n * Options for sending a message to a specific connection.\n */\nexport interface HubSendToConnectionOptions extends OperationOptions {}\n\n/**\n * Options for sending a text message to a connection.\n */\nexport interface HubSendTextToConnectionOptions extends HubSendToConnectionOptions {\n  contentType: \"text/plain\";\n}\n\n/**\n * Options for sending a message to a user.\n */\nexport interface HubSendToUserOptions extends OperationOptions {\n  /**\n   * The filter syntax to filter out the connections to send the messages to following OData filter syntax.\n   * Examples:\n   *  * Exclude connections in `group1`: `not('group1' in groups)`\n   *  * Send to connections in `group1` or `group2`: `'group1' in groups or `group2` in groups`\n   * Details about `filter` syntax please see [OData filter syntax for Azure Web PubSub](https://aka.ms/awps/filter-syntax).\n   */\n  filter?: string;\n}\n\n/**\n * Options for sending a text message to a user.\n */\nexport interface HubSendTextToUserOptions extends HubSendToUserOptions {\n  /**\n   * The content will be sent to the clients in plain text.\n   */\n  contentType: \"text/plain\";\n}\n\nexport type Permission = \"joinLeaveGroup\" | \"sendToGroup\";\n\n/**\n * Options for grant permissions to a connection\n */\nexport interface HubGrantPermissionOptions extends OperationOptions {\n  /**\n   * The meaning of the target depends on the specific permission.\n   * For joinLeaveGroup and sendToGroup, targetName is a required parameter standing for the group name.\n   */\n  targetName?: string;\n}\n\n/**\n * Options for revoke permissions from a connection\n */\nexport interface HubRevokePermissionOptions extends OperationOptions {\n  /**\n   * The meaning of the target depends on the specific permission.\n   * For joinLeaveGroup and sendToGroup, targetName is a required parameter standing for the group name.\n   */\n  targetName?: string;\n}\n\n/**\n * Options for checking if a connection has the specified permission\n */\nexport interface HubHasPermissionOptions extends OperationOptions {\n  /**\n   * The meaning of the target depends on the specific permission.\n   * For joinLeaveGroup and sendToGroup, targetName is a required parameter standing for the group name.\n   */\n  targetName?: string;\n}\n\n/**\n * Options for generating a token to connect a client to the Azure Web Pubsub service.\n */\nexport interface GenerateClientTokenOptions extends OperationOptions {\n  /**\n   * The userId for the client.\n   */\n  userId?: string;\n\n  /**\n   * The roles that the connection with the generated token will have.\n   * Roles give the client initial permissions to leave, join, or publish to groups when using PubSub subprotocol\n   * * `webpubsub.joinLeaveGroup`: the client can join or leave any group\n   * * `webpubsub.sendToGroup`: the client can send messages to any group\n   * * `webpubsub.joinLeaveGroup.<group>`: the client can join or leave group `<group>`\n   * * `webpubsub.sendToGroup.<group>`: the client can send messages to group `<group>`\n   *\n   * {@link https://azure.github.io/azure-webpubsub/references/pubsub-websocket-subprotocol#permissions}\n   */\n  roles?: string[];\n\n  /**\n   * Minutes until the token expires.\n   */\n  expirationTimeInMinutes?: number;\n\n  /**\n   * The groups to join when the client connects\n   */\n  groups?: string[];\n}\n\n/**\n * A response containing the client token.\n */\nexport interface ClientTokenResponse {\n  /**\n   * The client token.\n   */\n  token: string;\n  /**\n   * The URL client connects to\n   */\n  baseUrl: string;\n  /**\n   * The URL client connects to with access_token query string\n   */\n  url: string;\n}\n\n/**\n * Client for connecting to a Web PubSub hub\n */\nexport class WebPubSubServiceClient {\n  private readonly client: GeneratedClient;\n  private credential!: AzureKeyCredential | TokenCredential;\n  private readonly clientOptions?: WebPubSubServiceClientOptions;\n\n  /**\n   * The name of the hub this client is connected to\n   */\n  public readonly hubName: string;\n  /**\n   * The Web PubSub API version being used by this client\n   */\n  public readonly apiVersion: string = \"2022-11-01\";\n\n  /**\n   * The Web PubSub endpoint this client is connected to\n   */\n  public endpoint!: string;\n\n  /**\n   * Creates an instance of a WebPubSubServiceClient for sending messages and managing groups, connections, and users.\n   *\n   * Example usage:\n   * ```ts\n   * import { WebPubSubServiceClient } from \"@azure/web-pubsub\";\n   * const connectionString = process.env['WEB_PUBSUB_CONNECTION_STRING'];\n   * const client = new WebPubSubServiceClient(connectionString, 'chat');\n   * ```\n   *\n   * @param connectionString - The connection string\n   * @param hubName - The name of the hub to connect to. If omitted, '_default' is used.\n   * @param options - Options to configure the http pipeline\n   */\n  constructor(connectionString: string, hubName: string, options?: WebPubSubServiceClientOptions);\n\n  /**\n   * Creates an instance of a WebPubSubServiceClient for sending messages and managing groups, connections, and users.\n   *\n   * Example usage:\n   * ```ts\n   * import { WebPubSubServiceClient, AzureKeyCredential } from \"@azure/web-pubsub\";\n   * const cred = new AzureKeyCredential(\"<your web pubsub api key>\");\n   * const endpoint = \"https://xxxx.webpubsubdev.azure.com\"\n   * const client = new WebPubSubServiceClient(endpoint, cred, 'chat');\n   * ```\n   *\n   * @param endpoint - The endpoint to connect to\n   * @param credential - An AzureKeyCredential holding your service key\n   * @param hubName - The name of the hub to connect to.\n   * @param options - Options to configure the http pipeline\n   */\n  constructor(\n    endpoint: string,\n    credential: AzureKeyCredential | TokenCredential,\n    hubName: string,\n    options?: WebPubSubServiceClientOptions\n  );\n  constructor(\n    endpointOrConnectionString: string,\n    credsOrHubName?: AzureKeyCredential | TokenCredential | string,\n    hubNameOrOpts?: string | WebPubSubServiceClientOptions,\n    opts?: WebPubSubServiceClientOptions\n  ) {\n    // unpack constructor arguments\n    if (typeof credsOrHubName === \"object\") {\n      this.endpoint = endpointOrConnectionString;\n      this.hubName = hubNameOrOpts as string;\n      this.clientOptions = opts;\n      this.credential = credsOrHubName;\n    } else {\n      const parsedCs = parseConnectionString(endpointOrConnectionString);\n      this.endpoint = parsedCs.endpoint;\n      this.credential = parsedCs.credential;\n      this.hubName = credsOrHubName as string;\n      this.clientOptions = hubNameOrOpts as WebPubSubServiceClientOptions;\n    }\n\n    const internalPipelineOptions: GeneratedClientOptionalParams = {\n      ...this.clientOptions,\n      ...{\n        apiVersion: this.apiVersion,\n        loggingOptions: {\n          additionalAllowedHeaderNames:\n            this.clientOptions?.loggingOptions?.additionalAllowedHeaderNames,\n          additionalAllowedQueryParameters:\n            this.clientOptions?.loggingOptions?.additionalAllowedQueryParameters,\n          logger: logger.info,\n        },\n      },\n      ...(isTokenCredential(this.credential)\n        ? {\n            credential: this.credential,\n            credentialScopes: [\"https://webpubsub.azure.com/.default\"],\n          }\n        : {}),\n    };\n\n    this.client = new GeneratedClient(this.endpoint, internalPipelineOptions);\n\n    if (!isTokenCredential(this.credential)) {\n      this.client.pipeline.addPolicy(webPubSubKeyCredentialPolicy(this.credential));\n    }\n\n    if (this.clientOptions?.reverseProxyEndpoint) {\n      this.client.pipeline.addPolicy(\n        webPubSubReverseProxyPolicy(this.clientOptions?.reverseProxyEndpoint)\n      );\n    }\n  }\n\n  /**\n   * Get a client for a group\n   * @param groupName - The name of the group to connect to.\n   */\n  public group(groupName: string): WebPubSubGroup {\n    return new WebPubSubGroupImpl(this.client, this.hubName, groupName);\n  }\n\n  /**\n   * Broadcast a text message to all connections on this hub.\n   *\n   * @param message - The text message to send\n   * @param options - Additional options\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  public async sendToAll(message: string, options: HubSendTextToAllOptions): Promise<void>;\n  /**\n   * Broadcast a JSON message to all connections on this hub.\n   *\n   * @param message - The JSON message to send\n   * @param options - Additional options\n   */\n  public async sendToAll(message: JSONTypes, options?: HubSendToAllOptions): Promise<void>;\n  /**\n   * Broadcast a binary message to all connections on this hub.\n   *\n   * @param message - The message to send\n   * @param options - Additional options\n   */\n  public async sendToAll(message: RequestBodyType, options?: HubSendToAllOptions): Promise<void>;\n\n  public async sendToAll(\n    message: RequestBodyType | JSONTypes,\n    options: HubSendToAllOptions | HubSendTextToAllOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\"WebPubSubServiceClient.sendToAll\", options, (updatedOptions) => {\n      const { contentType, payload } = getPayloadForMessage(message, updatedOptions);\n      return this.client.webPubSub.sendToAll(\n        this.hubName,\n        contentType,\n        payload as any,\n        updatedOptions\n      );\n    });\n  }\n\n  /**\n   * Send a text message to a specific user\n   *\n   * @param username - User name to send to\n   * @param message - The text message to send\n   * @param options - Additional options\n   */\n  public async sendToUser(\n    username: string,\n    message: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: HubSendTextToUserOptions\n  ): Promise<void>;\n\n  /**\n   * Send a JSON message to a specific user\n   *\n   * @param username - User name to send to\n   * @param message - The josn message to send\n   * @param options - Additional options\n   */\n  public async sendToUser(\n    username: string,\n    message: JSONTypes,\n    options?: HubSendToUserOptions\n  ): Promise<void>;\n\n  /**\n   * Send a binary message to a specific user\n   *\n   * @param username - The user name to send to\n   * @param message - The binary message to send\n   * @param options - Additional options\n   */\n  public async sendToUser(\n    username: string,\n    message: RequestBodyType,\n    options?: HubSendToUserOptions | HubSendTextToUserOptions\n  ): Promise<void>;\n  public async sendToUser(\n    username: string,\n    message: RequestBodyType | JSONTypes,\n    options: HubSendToUserOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"WebPubSubServiceClient.sendToUser\",\n      options,\n      (updatedOptions) => {\n        const { contentType, payload } = getPayloadForMessage(message, updatedOptions);\n        return this.client.webPubSub.sendToUser(\n          this.hubName,\n          username,\n          contentType,\n          payload as any,\n          updatedOptions\n        );\n      }\n    );\n  }\n\n  /**\n   * Send a text message to a specific connection\n   *\n   * @param connectionId - Connection id to send to\n   * @param message - The text message\n   * @param options - Additional options\n   */\n  public async sendToConnection(\n    connectionId: string,\n    message: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: HubSendTextToConnectionOptions\n  ): Promise<void>;\n\n  /**\n   * Send a binary message to a specific connection\n   *\n   * @param connectionId - Connection id to send to\n   * @param message - The JSON message\n   * @param options - Additional options\n   */\n  public async sendToConnection(\n    connectionId: string,\n    message: JSONTypes,\n    options?: HubSendToConnectionOptions\n  ): Promise<void>;\n\n  /**\n   * Send a binary message to a specific connection\n   *\n   * @param connectionId - Connection id to send to\n   * @param message - The binary message\n   * @param options - Additional options\n   */\n  public async sendToConnection(\n    connectionId: string,\n    message: RequestBodyType,\n    options?: HubSendToConnectionOptions | HubSendTextToConnectionOptions\n  ): Promise<void>;\n  public async sendToConnection(\n    connectionId: string,\n    message: RequestBodyType | JSONTypes,\n    options: HubSendToConnectionOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"WebPubSubServiceClient.sendToConnection\",\n      options,\n      (updatedOptions) => {\n        const { contentType, payload } = getPayloadForMessage(message, updatedOptions);\n\n        return this.client.webPubSub.sendToConnection(\n          this.hubName,\n          connectionId,\n          contentType,\n          payload as any,\n          updatedOptions\n        );\n      }\n    );\n  }\n\n  /**\n   * Check if a specific connection is connected to this hub\n   *\n   * @param connectionId - Connection id to check\n   * @param options - Additional options\n   */\n  public async connectionExists(\n    connectionId: string,\n    options: HasConnectionOptions = {}\n  ): Promise<boolean> {\n    let response: FullOperationResponse | undefined;\n    function onResponse(rawResponse: FullOperationResponse, flatResponse: unknown): void {\n      response = rawResponse;\n      if (options.onResponse) {\n        options.onResponse(rawResponse, flatResponse);\n      }\n    }\n\n    return tracingClient.withSpan(\n      \"WebPubSubServiceClient.connectionExists\",\n      options,\n      async (updatedOptions) => {\n        await this.client.webPubSub.connectionExists(this.hubName, connectionId, {\n          ...updatedOptions,\n          onResponse,\n        });\n\n        if (response!.status === 200) {\n          return true;\n        } else if (response!.status === 404) {\n          return false;\n        } else {\n          // this is sad - wish this was handled by autorest.\n          throw new RestError(response!.bodyAsText!, {\n            statusCode: response?.status,\n            request: response?.request,\n            response: response,\n          });\n        }\n      }\n    );\n  }\n\n  /**\n   * Close a specific connection to this hub\n   *\n   * @param connectionId - Connection id to close\n   * @param options - Additional options\n   */\n  public async closeConnection(\n    connectionId: string,\n    options: HubCloseConnectionOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"WebPubSubServiceClient.closeConnection\",\n      options,\n      (updatedOptions) => {\n        return this.client.webPubSub.closeConnection(this.hubName, connectionId, updatedOptions);\n      }\n    );\n  }\n\n  /**\n   * Close all connections to this hub\n   *\n   * @param options - Additional options\n   */\n  public async closeAllConnections(options: HubCloseAllConnectionsOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"WebPubSubServiceClient.closeAllConnections\",\n      options,\n      (updatedOptions) => {\n        return this.client.webPubSub.closeAllConnections(this.hubName, updatedOptions);\n      }\n    );\n  }\n\n  /**\n   * Close all connections with the given user id\n   *\n   * @param user - User id to close\n   * @param options - Additional options\n   */\n  public async closeUserConnections(\n    userId: string,\n    options: HubCloseUserConnectionsOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"WebPubSubServiceClient.closeUserConnections\",\n      options,\n      (updatedOptions) => {\n        return this.client.webPubSub.closeUserConnections(this.hubName, userId, updatedOptions);\n      }\n    );\n  }\n\n  /**\n   * Remove a specific user from all groups they are joined to\n   * @param userId - The user id to remove from all groups\n   * @param options - Additional options\n   */\n  public async removeUserFromAllGroups(\n    userId: string,\n    options: HubCloseConnectionOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"WebPubSubServiceClient.removeUserFromAllGroups\",\n      options,\n      (updatedOptions) => {\n        return this.client.webPubSub.removeUserFromAllGroups(this.hubName, userId, updatedOptions);\n      }\n    );\n  }\n\n  /**\n   * Remove a specific connection from all groups they are joined to\n   * @param connectionId - The connection id to remove from all groups\n   * @param options - Additional options\n   */\n  public async removeConnectionFromAllGroups(\n    connectionId: string,\n    options: HubCloseConnectionOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"WebPubSubServiceClient.removeConnectionFromAllGroups\",\n      options,\n      (updatedOptions) => {\n        return this.client.webPubSub.removeConnectionFromAllGroups(\n          this.hubName,\n          connectionId,\n          updatedOptions\n        );\n      }\n    );\n  }\n\n  /**\n   * Check if a particular group exists (i.e. has active connections).\n   *\n   * @param groupName - The group name to check for\n   * @param options - Additional options\n   */\n  public async groupExists(groupName: string, options: HubHasGroupOptions = {}): Promise<boolean> {\n    let response: FullOperationResponse | undefined;\n    function onResponse(rawResponse: FullOperationResponse, flatResponse: unknown): void {\n      response = rawResponse;\n      if (options.onResponse) {\n        options.onResponse(rawResponse, flatResponse);\n      }\n    }\n\n    return tracingClient.withSpan(\n      \"WebPubSubServiceClient.groupExists\",\n      options,\n      async (updatedOptions) => {\n        await this.client.webPubSub.groupExists(this.hubName, groupName, {\n          ...updatedOptions,\n          onResponse,\n        });\n\n        if (response!.status === 200) {\n          return true;\n        } else if (response!.status === 404) {\n          return false;\n        } else {\n          throw new RestError(response!.bodyAsText!, {\n            statusCode: response?.status,\n            request: response?.request,\n            response: response,\n          });\n        }\n      }\n    );\n  }\n\n  /**\n   * Check if a particular user is connected to this hub.\n   *\n   * @param username - The user name to check for\n   * @param options - Additional options\n   */\n  public async userExists(username: string, options: HubHasUserOptions = {}): Promise<boolean> {\n    let response: FullOperationResponse | undefined;\n    function onResponse(rawResponse: FullOperationResponse, flatResponse: unknown): void {\n      response = rawResponse;\n      if (options.onResponse) {\n        options.onResponse(rawResponse, flatResponse);\n      }\n    }\n\n    return tracingClient.withSpan(\n      \"WebPubSubServiceClient.userExists\",\n      options,\n      async (updatedOptions) => {\n        await this.client.webPubSub.userExists(this.hubName, username, {\n          ...updatedOptions,\n          onResponse,\n        });\n\n        if (response!.status === 200) {\n          return true;\n        } else if (response!.status === 404) {\n          return false;\n        } else {\n          // this is sad - wish this was handled by autorest.\n          throw new RestError(response!.bodyAsText!, {\n            statusCode: response?.status,\n            request: response?.request,\n            response: response,\n          });\n        }\n      }\n    );\n  }\n\n  /**\n   * Grant permissions to a connection\n   *\n   * @param connectionId - The connection id to grant permissions to\n   * @param Permission - The permission to grant\n   * @param options - Additional options\n   */\n  public async grantPermission(\n    connectionId: string,\n    permission: Permission,\n    options: HubGrantPermissionOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"WebPubSubServiceClient.grantPermission\",\n      options,\n      (updatedOptions) => {\n        return this.client.webPubSub.grantPermission(\n          this.hubName,\n          permission,\n          connectionId,\n          updatedOptions\n        );\n      }\n    );\n  }\n\n  /**\n   * Revoke permissions from a connection\n   *\n   * @param connectionId - The connection id to revoke permissions from\n   * @param Permission - The permission to revoke\n   * @param options - Additional options\n   */\n  public async revokePermission(\n    connectionId: string,\n    permission: Permission,\n    options: HubRevokePermissionOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"WebPubSubServiceClient.revokePermission\",\n      options,\n      (updatedOptions) => {\n        return this.client.webPubSub.revokePermission(\n          this.hubName,\n          permission,\n          connectionId,\n          updatedOptions\n        );\n      }\n    );\n  }\n\n  /**\n   * Check if the connection has the specified permission\n   *\n   * @param connectionId - The connection id to check permission\n   * @param Permission - The permission to check\n   * @param options - Additional options\n   */\n  public async hasPermission(\n    connectionId: string,\n    permission: Permission,\n    options: HubHasPermissionOptions = {}\n  ): Promise<boolean> {\n    let response: FullOperationResponse | undefined;\n    function onResponse(rawResponse: FullOperationResponse, flatResponse: unknown): void {\n      response = rawResponse;\n      if (options.onResponse) {\n        options.onResponse(rawResponse, flatResponse);\n      }\n    }\n\n    return tracingClient.withSpan(\n      \"WebPubSubServiceClient.hasPermission\",\n      options,\n      async (updatedOptions) => {\n        await this.client.webPubSub.checkPermission(this.hubName, permission, connectionId, {\n          ...updatedOptions,\n          onResponse,\n        });\n\n        if (response!.status === 200) {\n          return true;\n        } else if (response!.status === 404) {\n          return false;\n        } else {\n          // this is sad - wish this was handled by autorest.\n          throw new RestError(response!.bodyAsText!, {\n            statusCode: response?.status,\n            request: response?.request,\n            response: response,\n          });\n        }\n      }\n    );\n  }\n\n  /**\n   * Generate a token for a client to connect to the Azure Web PubSub service.\n   *\n   * @param options - Additional options\n   */\n  public async getClientAccessToken(\n    options: GenerateClientTokenOptions = {}\n  ): Promise<ClientTokenResponse> {\n    return tracingClient.withSpan(\n      \"WebPubSubServiceClient.getClientAccessToken\",\n      options,\n      async (updatedOptions) => {\n        const endpoint = this.endpoint.endsWith(\"/\") ? this.endpoint : this.endpoint + \"/\";\n        const clientEndpoint = endpoint.replace(/(http)(s?:\\/\\/)/gi, \"ws$2\");\n        const baseUrl = `${clientEndpoint}client/hubs/${this.hubName}`;\n\n        let token: string;\n        if (isTokenCredential(this.credential)) {\n          const response = await this.client.webPubSub.generateClientToken(\n            this.hubName,\n            updatedOptions\n          );\n          token = response.token!;\n        } else {\n          const key = this.credential.key;\n          const audience = `${endpoint}client/hubs/${this.hubName}`;\n          const payload = { role: options?.roles, \"webpubsub.group\": options?.groups };\n          const signOptions: jwt.SignOptions = {\n            audience: audience,\n            expiresIn:\n              options?.expirationTimeInMinutes === undefined\n                ? \"1h\"\n                : `${options.expirationTimeInMinutes}m`,\n            algorithm: \"HS256\",\n          };\n          if (options?.userId) {\n            signOptions.subject = options?.userId;\n          }\n          token = jwt.sign(payload, key, signOptions);\n        }\n\n        return {\n          token,\n          baseUrl,\n          url: `${baseUrl}?access_token=${token}`,\n        };\n      }\n    );\n  }\n}\n"]}