{"version":3,"file":"parseConnectionString.js","sourceRoot":"","sources":["../../src/parseConnectionString.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAOtD,MAAM,UAAU,qBAAqB,CAAC,IAAY;IAChD,MAAM,MAAM,GAA6B,EAAE,CAAC;IAE5C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;QAC5B,MAAM,aAAa,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACrC,IAAI,aAAa,KAAK,CAAC,CAAC;YAAE,OAAO;QACjC,MAAM,GAAG,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;QACxD,MAAM,KAAK,GAAG,CAAC,CAAC,SAAS,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;QAC7C,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,IAAI,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;IACtC,IAAI,CAAC,YAAY;QAAE,MAAM,IAAI,SAAS,CAAC,oCAAoC,CAAC,CAAC;IAC7E,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;QACpC,YAAY,GAAG,WAAW,YAAY,EAAE,CAAC;KAC1C;IACD,MAAM,GAAG,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;IAChC,IAAI,CAAC,GAAG;QAAE,MAAM,IAAI,SAAS,CAAC,sCAAsC,CAAC,CAAC;IACtE,MAAM,UAAU,GAAG,IAAI,kBAAkB,CAAC,GAAG,CAAC,CAAC;IAC/C,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;IAC5B,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;IAClC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;IAChB,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;IAChC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC;IAEd,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC;AAClC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureKeyCredential } from \"@azure/core-auth\";\n\ninterface ParsedConnectionString {\n  credential: AzureKeyCredential;\n  endpoint: string;\n}\n\nexport function parseConnectionString(conn: string): ParsedConnectionString {\n  const parsed: { [id: string]: string } = {};\n\n  conn.split(\";\").forEach((i) => {\n    const assignmentPos = i.indexOf(\"=\");\n    if (assignmentPos === -1) return;\n    const key = i.substring(0, assignmentPos).toLowerCase();\n    const value = i.substring(assignmentPos + 1);\n    parsed[key] = value;\n  });\n\n  let endpointPart = parsed[\"endpoint\"];\n  if (!endpointPart) throw new TypeError(\"connection string missing endpoint\");\n  if (!endpointPart.startsWith(\"http\")) {\n    endpointPart = `https://${endpointPart}`;\n  }\n  const key = parsed[\"accesskey\"];\n  if (!key) throw new TypeError(\"connection string missing access key\");\n  const credential = new AzureKeyCredential(key);\n  const port = parsed[\"port\"];\n  const url = new URL(endpointPart);\n  url.port = port;\n  const endpoint = url.toString();\n  url.port = \"\";\n\n  return { credential, endpoint };\n}\n"]}