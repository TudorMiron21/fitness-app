{"version":3,"file":"webPubSub.js","sourceRoot":"","sources":["../../../../src/generated/operationsInterfaces/webPubSub.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport {\n  WebPubSubCloseAllConnectionsOptionalParams,\n  WebPubSubGenerateClientTokenOptionalParams,\n  WebPubSubGenerateClientTokenResponse,\n  ContentType,\n  WebPubSubSendToAll$binaryOptionalParams,\n  WebPubSubSendToAll$textOptionalParams,\n  WebPubSubCloseConnectionOptionalParams,\n  WebPubSubConnectionExistsOptionalParams,\n  WebPubSubSendToConnection$binaryOptionalParams,\n  WebPubSubSendToConnection$textOptionalParams,\n  WebPubSubRemoveConnectionFromAllGroupsOptionalParams,\n  WebPubSubGroupExistsOptionalParams,\n  WebPubSubCloseGroupConnectionsOptionalParams,\n  WebPubSubSendToGroup$binaryOptionalParams,\n  WebPubSubSendToGroup$textOptionalParams,\n  WebPubSubRemoveConnectionFromGroupOptionalParams,\n  WebPubSubAddConnectionToGroupOptionalParams,\n  WebPubSubPermission,\n  WebPubSubRevokePermissionOptionalParams,\n  WebPubSubCheckPermissionOptionalParams,\n  WebPubSubGrantPermissionOptionalParams,\n  WebPubSubUserExistsOptionalParams,\n  WebPubSubCloseUserConnectionsOptionalParams,\n  WebPubSubSendToUser$binaryOptionalParams,\n  WebPubSubSendToUser$textOptionalParams,\n  WebPubSubRemoveUserFromAllGroupsOptionalParams,\n  WebPubSubRemoveUserFromGroupOptionalParams,\n  WebPubSubAddUserToGroupOptionalParams\n} from \"../models\";\n\n/** Interface representing a WebPubSub. */\nexport interface WebPubSub {\n  /**\n   * Close the connections in the hub.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param options The options parameters.\n   */\n  closeAllConnections(\n    hub: string,\n    options?: WebPubSubCloseAllConnectionsOptionalParams\n  ): Promise<void>;\n  /**\n   * Generate token for the client to connect Azure Web PubSub service.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param options The options parameters.\n   */\n  generateClientToken(\n    hub: string,\n    options?: WebPubSubGenerateClientTokenOptionalParams\n  ): Promise<WebPubSubGenerateClientTokenResponse>;\n  /**\n   * Broadcast content inside request body to all the connected client connections.\n   * @param args Includes all the parameters for this operation.\n   */\n  sendToAll(\n    ...args:\n      | [\n          string,\n          ContentType,\n          coreRestPipeline.RequestBodyType,\n          WebPubSubSendToAll$binaryOptionalParams?\n        ]\n      | [string, \"text/plain\", string, WebPubSubSendToAll$textOptionalParams?]\n  ): Promise<void>;\n  /**\n   * Close the client connection.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  closeConnection(\n    hub: string,\n    connectionId: string,\n    options?: WebPubSubCloseConnectionOptionalParams\n  ): Promise<void>;\n  /**\n   * Check if the connection with the given connectionId exists.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param connectionId The connection Id.\n   * @param options The options parameters.\n   */\n  connectionExists(\n    hub: string,\n    connectionId: string,\n    options?: WebPubSubConnectionExistsOptionalParams\n  ): Promise<void>;\n  /**\n   * Send content inside request body to the specific connection.\n   * @param args Includes all the parameters for this operation.\n   */\n  sendToConnection(\n    ...args:\n      | [\n          string,\n          string,\n          ContentType,\n          coreRestPipeline.RequestBodyType,\n          WebPubSubSendToConnection$binaryOptionalParams?\n        ]\n      | [\n          string,\n          string,\n          \"text/plain\",\n          string,\n          WebPubSubSendToConnection$textOptionalParams?\n        ]\n  ): Promise<void>;\n  /**\n   * Remove a connection from all groups.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  removeConnectionFromAllGroups(\n    hub: string,\n    connectionId: string,\n    options?: WebPubSubRemoveConnectionFromAllGroupsOptionalParams\n  ): Promise<void>;\n  /**\n   * Check if there are any client connections inside the given group\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param options The options parameters.\n   */\n  groupExists(\n    hub: string,\n    group: string,\n    options?: WebPubSubGroupExistsOptionalParams\n  ): Promise<void>;\n  /**\n   * Close connections in the specific group.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param options The options parameters.\n   */\n  closeGroupConnections(\n    hub: string,\n    group: string,\n    options?: WebPubSubCloseGroupConnectionsOptionalParams\n  ): Promise<void>;\n  /**\n   * Send content inside request body to a group of connections.\n   * @param args Includes all the parameters for this operation.\n   */\n  sendToGroup(\n    ...args:\n      | [\n          string,\n          string,\n          ContentType,\n          coreRestPipeline.RequestBodyType,\n          WebPubSubSendToGroup$binaryOptionalParams?\n        ]\n      | [\n          string,\n          string,\n          \"text/plain\",\n          string,\n          WebPubSubSendToGroup$textOptionalParams?\n        ]\n  ): Promise<void>;\n  /**\n   * Remove a connection from the target group.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  removeConnectionFromGroup(\n    hub: string,\n    group: string,\n    connectionId: string,\n    options?: WebPubSubRemoveConnectionFromGroupOptionalParams\n  ): Promise<void>;\n  /**\n   * Add a connection to the target group.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param connectionId Target connection Id\n   * @param options The options parameters.\n   */\n  addConnectionToGroup(\n    hub: string,\n    group: string,\n    connectionId: string,\n    options?: WebPubSubAddConnectionToGroupOptionalParams\n  ): Promise<void>;\n  /**\n   * Revoke permission for the connection.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  revokePermission(\n    hub: string,\n    permission: WebPubSubPermission,\n    connectionId: string,\n    options?: WebPubSubRevokePermissionOptionalParams\n  ): Promise<void>;\n  /**\n   * Check if a connection has permission to the specified action.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  checkPermission(\n    hub: string,\n    permission: WebPubSubPermission,\n    connectionId: string,\n    options?: WebPubSubCheckPermissionOptionalParams\n  ): Promise<void>;\n  /**\n   * Grant permission to the connection.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  grantPermission(\n    hub: string,\n    permission: WebPubSubPermission,\n    connectionId: string,\n    options?: WebPubSubGrantPermissionOptionalParams\n  ): Promise<void>;\n  /**\n   * Check if there are any client connections connected for the given user.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param userId Target user Id.\n   * @param options The options parameters.\n   */\n  userExists(\n    hub: string,\n    userId: string,\n    options?: WebPubSubUserExistsOptionalParams\n  ): Promise<void>;\n  /**\n   * Close connections for the specific user.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param userId The user Id.\n   * @param options The options parameters.\n   */\n  closeUserConnections(\n    hub: string,\n    userId: string,\n    options?: WebPubSubCloseUserConnectionsOptionalParams\n  ): Promise<void>;\n  /**\n   * Send content inside request body to the specific user.\n   * @param args Includes all the parameters for this operation.\n   */\n  sendToUser(\n    ...args:\n      | [\n          string,\n          string,\n          ContentType,\n          coreRestPipeline.RequestBodyType,\n          WebPubSubSendToUser$binaryOptionalParams?\n        ]\n      | [\n          string,\n          string,\n          \"text/plain\",\n          string,\n          WebPubSubSendToUser$textOptionalParams?\n        ]\n  ): Promise<void>;\n  /**\n   * Remove a user from all groups.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param userId Target user Id.\n   * @param options The options parameters.\n   */\n  removeUserFromAllGroups(\n    hub: string,\n    userId: string,\n    options?: WebPubSubRemoveUserFromAllGroupsOptionalParams\n  ): Promise<void>;\n  /**\n   * Remove a user from the target group.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param userId Target user Id.\n   * @param options The options parameters.\n   */\n  removeUserFromGroup(\n    hub: string,\n    group: string,\n    userId: string,\n    options?: WebPubSubRemoveUserFromGroupOptionalParams\n  ): Promise<void>;\n  /**\n   * Add a user to the target group.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param userId Target user Id.\n   * @param options The options parameters.\n   */\n  addUserToGroup(\n    hub: string,\n    group: string,\n    userId: string,\n    options?: WebPubSubAddUserToGroupOptionalParams\n  ): Promise<void>;\n}\n"]}