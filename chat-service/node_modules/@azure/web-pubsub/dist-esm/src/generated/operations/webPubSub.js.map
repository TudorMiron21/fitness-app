{"version":3,"file":"webPubSub.js","sourceRoot":"","sources":["../../../../src/generated/operations/webPubSub.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { WebPubSub } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClient } from \"../generatedClient\";\nimport {\n  WebPubSubCloseAllConnectionsOptionalParams,\n  WebPubSubGenerateClientTokenOptionalParams,\n  WebPubSubGenerateClientTokenResponse,\n  ContentType,\n  WebPubSubSendToAll$binaryOptionalParams,\n  WebPubSubSendToAll$textOptionalParams,\n  WebPubSubCloseConnectionOptionalParams,\n  WebPubSubConnectionExistsOptionalParams,\n  WebPubSubSendToConnection$binaryOptionalParams,\n  WebPubSubSendToConnection$textOptionalParams,\n  WebPubSubRemoveConnectionFromAllGroupsOptionalParams,\n  WebPubSubGroupExistsOptionalParams,\n  WebPubSubCloseGroupConnectionsOptionalParams,\n  WebPubSubSendToGroup$binaryOptionalParams,\n  WebPubSubSendToGroup$textOptionalParams,\n  WebPubSubRemoveConnectionFromGroupOptionalParams,\n  WebPubSubAddConnectionToGroupOptionalParams,\n  WebPubSubPermission,\n  WebPubSubRevokePermissionOptionalParams,\n  WebPubSubCheckPermissionOptionalParams,\n  WebPubSubGrantPermissionOptionalParams,\n  WebPubSubUserExistsOptionalParams,\n  WebPubSubCloseUserConnectionsOptionalParams,\n  WebPubSubSendToUser$binaryOptionalParams,\n  WebPubSubSendToUser$textOptionalParams,\n  WebPubSubRemoveUserFromAllGroupsOptionalParams,\n  WebPubSubRemoveUserFromGroupOptionalParams,\n  WebPubSubAddUserToGroupOptionalParams\n} from \"../models\";\n\n/** Class containing WebPubSub operations. */\nexport class WebPubSubImpl implements WebPubSub {\n  private readonly client: GeneratedClient;\n\n  /**\n   * Initialize a new instance of the class WebPubSub class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClient) {\n    this.client = client;\n  }\n\n  /**\n   * Close the connections in the hub.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param options The options parameters.\n   */\n  closeAllConnections(\n    hub: string,\n    options?: WebPubSubCloseAllConnectionsOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, options },\n      closeAllConnectionsOperationSpec\n    );\n  }\n\n  /**\n   * Generate token for the client to connect Azure Web PubSub service.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param options The options parameters.\n   */\n  generateClientToken(\n    hub: string,\n    options?: WebPubSubGenerateClientTokenOptionalParams\n  ): Promise<WebPubSubGenerateClientTokenResponse> {\n    return this.client.sendOperationRequest(\n      { hub, options },\n      generateClientTokenOperationSpec\n    );\n  }\n\n  /**\n   * Broadcast content inside request body to all the connected client connections.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param contentType Upload file type\n   * @param message The payload body.\n   * @param options The options parameters.\n   */\n  sendToAll(\n    hub: string,\n    contentType: ContentType,\n    message: coreRestPipeline.RequestBodyType,\n    options?: WebPubSubSendToAll$binaryOptionalParams\n  ): Promise<void>;\n  /**\n   * Broadcast content inside request body to all the connected client connections.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param contentType Upload file type\n   * @param message The payload body.\n   * @param options The options parameters.\n   */\n  sendToAll(\n    hub: string,\n    contentType: \"text/plain\",\n    message: string,\n    options?: WebPubSubSendToAll$textOptionalParams\n  ): Promise<void>;\n  /**\n   * Broadcast content inside request body to all the connected client connections.\n   * @param args Includes all the parameters for this operation.\n   */\n  sendToAll(\n    ...args:\n      | [\n          string,\n          ContentType,\n          coreRestPipeline.RequestBodyType,\n          WebPubSubSendToAll$binaryOptionalParams?\n        ]\n      | [string, \"text/plain\", string, WebPubSubSendToAll$textOptionalParams?]\n  ): Promise<void> {\n    let operationSpec: coreClient.OperationSpec;\n    let operationArguments: coreClient.OperationArguments;\n    let options;\n    if (\n      args[1] === \"application/json\" ||\n      args[1] === \"application/octet-stream\"\n    ) {\n      operationSpec = sendToAll$binaryOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        contentType: args[1],\n        message: args[2],\n        options: args[3]\n      };\n      options = args[3];\n    } else if (args[1] === \"text/plain\") {\n      operationSpec = sendToAll$textOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        contentType: args[1],\n        message: args[2],\n        options: args[3]\n      };\n      options = args[3];\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[1]}\".`\n      );\n    }\n    operationArguments.options = options || {};\n    return this.client.sendOperationRequest(operationArguments, operationSpec);\n  }\n\n  /**\n   * Close the client connection.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  closeConnection(\n    hub: string,\n    connectionId: string,\n    options?: WebPubSubCloseConnectionOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, connectionId, options },\n      closeConnectionOperationSpec\n    );\n  }\n\n  /**\n   * Check if the connection with the given connectionId exists.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param connectionId The connection Id.\n   * @param options The options parameters.\n   */\n  connectionExists(\n    hub: string,\n    connectionId: string,\n    options?: WebPubSubConnectionExistsOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, connectionId, options },\n      connectionExistsOperationSpec\n    );\n  }\n\n  /**\n   * Send content inside request body to the specific connection.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param connectionId The connection Id.\n   * @param contentType Upload file type\n   * @param message The payload body.\n   * @param options The options parameters.\n   */\n  sendToConnection(\n    hub: string,\n    connectionId: string,\n    contentType: ContentType,\n    message: coreRestPipeline.RequestBodyType,\n    options?: WebPubSubSendToConnection$binaryOptionalParams\n  ): Promise<void>;\n  /**\n   * Send content inside request body to the specific connection.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param connectionId The connection Id.\n   * @param contentType Upload file type\n   * @param message The payload body.\n   * @param options The options parameters.\n   */\n  sendToConnection(\n    hub: string,\n    connectionId: string,\n    contentType: \"text/plain\",\n    message: string,\n    options?: WebPubSubSendToConnection$textOptionalParams\n  ): Promise<void>;\n  /**\n   * Send content inside request body to the specific connection.\n   * @param args Includes all the parameters for this operation.\n   */\n  sendToConnection(\n    ...args:\n      | [\n          string,\n          string,\n          ContentType,\n          coreRestPipeline.RequestBodyType,\n          WebPubSubSendToConnection$binaryOptionalParams?\n        ]\n      | [\n          string,\n          string,\n          \"text/plain\",\n          string,\n          WebPubSubSendToConnection$textOptionalParams?\n        ]\n  ): Promise<void> {\n    let operationSpec: coreClient.OperationSpec;\n    let operationArguments: coreClient.OperationArguments;\n    let options;\n    if (\n      args[2] === \"application/json\" ||\n      args[2] === \"application/octet-stream\"\n    ) {\n      operationSpec = sendToConnection$binaryOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        connectionId: args[1],\n        contentType: args[2],\n        message: args[3],\n        options: args[4]\n      };\n      options = args[4];\n    } else if (args[2] === \"text/plain\") {\n      operationSpec = sendToConnection$textOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        connectionId: args[1],\n        contentType: args[2],\n        message: args[3],\n        options: args[4]\n      };\n      options = args[4];\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[2]}\".`\n      );\n    }\n    operationArguments.options = options || {};\n    return this.client.sendOperationRequest(operationArguments, operationSpec);\n  }\n\n  /**\n   * Remove a connection from all groups.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  removeConnectionFromAllGroups(\n    hub: string,\n    connectionId: string,\n    options?: WebPubSubRemoveConnectionFromAllGroupsOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, connectionId, options },\n      removeConnectionFromAllGroupsOperationSpec\n    );\n  }\n\n  /**\n   * Check if there are any client connections inside the given group\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param options The options parameters.\n   */\n  groupExists(\n    hub: string,\n    group: string,\n    options?: WebPubSubGroupExistsOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, group, options },\n      groupExistsOperationSpec\n    );\n  }\n\n  /**\n   * Close connections in the specific group.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param options The options parameters.\n   */\n  closeGroupConnections(\n    hub: string,\n    group: string,\n    options?: WebPubSubCloseGroupConnectionsOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, group, options },\n      closeGroupConnectionsOperationSpec\n    );\n  }\n\n  /**\n   * Send content inside request body to a group of connections.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param contentType Upload file type\n   * @param message The payload body.\n   * @param options The options parameters.\n   */\n  sendToGroup(\n    hub: string,\n    group: string,\n    contentType: ContentType,\n    message: coreRestPipeline.RequestBodyType,\n    options?: WebPubSubSendToGroup$binaryOptionalParams\n  ): Promise<void>;\n  /**\n   * Send content inside request body to a group of connections.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param contentType Upload file type\n   * @param message The payload body.\n   * @param options The options parameters.\n   */\n  sendToGroup(\n    hub: string,\n    group: string,\n    contentType: \"text/plain\",\n    message: string,\n    options?: WebPubSubSendToGroup$textOptionalParams\n  ): Promise<void>;\n  /**\n   * Send content inside request body to a group of connections.\n   * @param args Includes all the parameters for this operation.\n   */\n  sendToGroup(\n    ...args:\n      | [\n          string,\n          string,\n          ContentType,\n          coreRestPipeline.RequestBodyType,\n          WebPubSubSendToGroup$binaryOptionalParams?\n        ]\n      | [\n          string,\n          string,\n          \"text/plain\",\n          string,\n          WebPubSubSendToGroup$textOptionalParams?\n        ]\n  ): Promise<void> {\n    let operationSpec: coreClient.OperationSpec;\n    let operationArguments: coreClient.OperationArguments;\n    let options;\n    if (\n      args[2] === \"application/json\" ||\n      args[2] === \"application/octet-stream\"\n    ) {\n      operationSpec = sendToGroup$binaryOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        group: args[1],\n        contentType: args[2],\n        message: args[3],\n        options: args[4]\n      };\n      options = args[4];\n    } else if (args[2] === \"text/plain\") {\n      operationSpec = sendToGroup$textOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        group: args[1],\n        contentType: args[2],\n        message: args[3],\n        options: args[4]\n      };\n      options = args[4];\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[2]}\".`\n      );\n    }\n    operationArguments.options = options || {};\n    return this.client.sendOperationRequest(operationArguments, operationSpec);\n  }\n\n  /**\n   * Remove a connection from the target group.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  removeConnectionFromGroup(\n    hub: string,\n    group: string,\n    connectionId: string,\n    options?: WebPubSubRemoveConnectionFromGroupOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, group, connectionId, options },\n      removeConnectionFromGroupOperationSpec\n    );\n  }\n\n  /**\n   * Add a connection to the target group.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param connectionId Target connection Id\n   * @param options The options parameters.\n   */\n  addConnectionToGroup(\n    hub: string,\n    group: string,\n    connectionId: string,\n    options?: WebPubSubAddConnectionToGroupOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, group, connectionId, options },\n      addConnectionToGroupOperationSpec\n    );\n  }\n\n  /**\n   * Revoke permission for the connection.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  revokePermission(\n    hub: string,\n    permission: WebPubSubPermission,\n    connectionId: string,\n    options?: WebPubSubRevokePermissionOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, permission, connectionId, options },\n      revokePermissionOperationSpec\n    );\n  }\n\n  /**\n   * Check if a connection has permission to the specified action.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  checkPermission(\n    hub: string,\n    permission: WebPubSubPermission,\n    connectionId: string,\n    options?: WebPubSubCheckPermissionOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, permission, connectionId, options },\n      checkPermissionOperationSpec\n    );\n  }\n\n  /**\n   * Grant permission to the connection.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.\n   * @param connectionId Target connection Id.\n   * @param options The options parameters.\n   */\n  grantPermission(\n    hub: string,\n    permission: WebPubSubPermission,\n    connectionId: string,\n    options?: WebPubSubGrantPermissionOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, permission, connectionId, options },\n      grantPermissionOperationSpec\n    );\n  }\n\n  /**\n   * Check if there are any client connections connected for the given user.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param userId Target user Id.\n   * @param options The options parameters.\n   */\n  userExists(\n    hub: string,\n    userId: string,\n    options?: WebPubSubUserExistsOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, userId, options },\n      userExistsOperationSpec\n    );\n  }\n\n  /**\n   * Close connections for the specific user.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param userId The user Id.\n   * @param options The options parameters.\n   */\n  closeUserConnections(\n    hub: string,\n    userId: string,\n    options?: WebPubSubCloseUserConnectionsOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, userId, options },\n      closeUserConnectionsOperationSpec\n    );\n  }\n\n  /**\n   * Send content inside request body to the specific user.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param userId The user Id.\n   * @param contentType Upload file type\n   * @param message The payload body.\n   * @param options The options parameters.\n   */\n  sendToUser(\n    hub: string,\n    userId: string,\n    contentType: ContentType,\n    message: coreRestPipeline.RequestBodyType,\n    options?: WebPubSubSendToUser$binaryOptionalParams\n  ): Promise<void>;\n  /**\n   * Send content inside request body to the specific user.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param userId The user Id.\n   * @param contentType Upload file type\n   * @param message The payload body.\n   * @param options The options parameters.\n   */\n  sendToUser(\n    hub: string,\n    userId: string,\n    contentType: \"text/plain\",\n    message: string,\n    options?: WebPubSubSendToUser$textOptionalParams\n  ): Promise<void>;\n  /**\n   * Send content inside request body to the specific user.\n   * @param args Includes all the parameters for this operation.\n   */\n  sendToUser(\n    ...args:\n      | [\n          string,\n          string,\n          ContentType,\n          coreRestPipeline.RequestBodyType,\n          WebPubSubSendToUser$binaryOptionalParams?\n        ]\n      | [\n          string,\n          string,\n          \"text/plain\",\n          string,\n          WebPubSubSendToUser$textOptionalParams?\n        ]\n  ): Promise<void> {\n    let operationSpec: coreClient.OperationSpec;\n    let operationArguments: coreClient.OperationArguments;\n    let options;\n    if (\n      args[2] === \"application/json\" ||\n      args[2] === \"application/octet-stream\"\n    ) {\n      operationSpec = sendToUser$binaryOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        userId: args[1],\n        contentType: args[2],\n        message: args[3],\n        options: args[4]\n      };\n      options = args[4];\n    } else if (args[2] === \"text/plain\") {\n      operationSpec = sendToUser$textOperationSpec;\n      operationArguments = {\n        hub: args[0],\n        userId: args[1],\n        contentType: args[2],\n        message: args[3],\n        options: args[4]\n      };\n      options = args[4];\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[2]}\".`\n      );\n    }\n    operationArguments.options = options || {};\n    return this.client.sendOperationRequest(operationArguments, operationSpec);\n  }\n\n  /**\n   * Remove a user from all groups.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param userId Target user Id.\n   * @param options The options parameters.\n   */\n  removeUserFromAllGroups(\n    hub: string,\n    userId: string,\n    options?: WebPubSubRemoveUserFromAllGroupsOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, userId, options },\n      removeUserFromAllGroupsOperationSpec\n    );\n  }\n\n  /**\n   * Remove a user from the target group.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param userId Target user Id.\n   * @param options The options parameters.\n   */\n  removeUserFromGroup(\n    hub: string,\n    group: string,\n    userId: string,\n    options?: WebPubSubRemoveUserFromGroupOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, group, userId, options },\n      removeUserFromGroupOperationSpec\n    );\n  }\n\n  /**\n   * Add a user to the target group.\n   * @param hub Target hub name, which should start with alphabetic characters and only contain\n   *            alpha-numeric characters or underscore.\n   * @param group Target group name, which length should be greater than 0 and less than 1025.\n   * @param userId Target user Id.\n   * @param options The options parameters.\n   */\n  addUserToGroup(\n    hub: string,\n    group: string,\n    userId: string,\n    options?: WebPubSubAddUserToGroupOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { hub, group, userId, options },\n      addUserToGroupOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst closeAllConnectionsOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/:closeConnections\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubCloseAllConnectionsExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.excluded,\n    Parameters.reason\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.hub],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst generateClientTokenOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/:generateToken\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ClientTokenResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubGenerateClientTokenExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.userId,\n    Parameters.roles,\n    Parameters.expirationTimeInMinutes,\n    Parameters.groups\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.hub],\n  headerParameters: [Parameters.accept1],\n  serializer\n};\nconst sendToAll$binaryOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/:send\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubSendToAllExceptionHeaders\n    }\n  },\n  requestBody: Parameters.message,\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.excludedConnections,\n    Parameters.filter\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.hub],\n  headerParameters: [Parameters.contentType, Parameters.accept2],\n  mediaType: \"binary\",\n  serializer\n};\nconst sendToAll$textOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/:send\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubSendToAllExceptionHeaders\n    }\n  },\n  requestBody: Parameters.message1,\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.excludedConnections,\n    Parameters.filter\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.hub],\n  headerParameters: [Parameters.contentType1, Parameters.accept3],\n  mediaType: \"text\",\n  serializer\n};\nconst closeConnectionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/connections/{connectionId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubCloseConnectionExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.reason],\n  urlParameters: [Parameters.endpoint, Parameters.hub, Parameters.connectionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst connectionExistsOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/connections/{connectionId}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {},\n    404: {},\n    default: {\n      headersMapper: Mappers.WebPubSubConnectionExistsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.hub, Parameters.connectionId],\n  serializer\n};\nconst sendToConnection$binaryOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/connections/{connectionId}/:send\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubSendToConnectionExceptionHeaders\n    }\n  },\n  requestBody: Parameters.message,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.hub, Parameters.connectionId],\n  headerParameters: [Parameters.contentType, Parameters.accept2],\n  mediaType: \"binary\",\n  serializer\n};\nconst sendToConnection$textOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/connections/{connectionId}/:send\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubSendToConnectionExceptionHeaders\n    }\n  },\n  requestBody: Parameters.message1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.hub, Parameters.connectionId],\n  headerParameters: [Parameters.contentType1, Parameters.accept3],\n  mediaType: \"text\",\n  serializer\n};\nconst removeConnectionFromAllGroupsOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/connections/{connectionId}/groups\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper:\n        Mappers.WebPubSubRemoveConnectionFromAllGroupsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.hub, Parameters.connectionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst groupExistsOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/groups/{group}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {},\n    404: {},\n    default: {\n      headersMapper: Mappers.WebPubSubGroupExistsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.hub, Parameters.group],\n  serializer\n};\nconst closeGroupConnectionsOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/groups/{group}/:closeConnections\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubCloseGroupConnectionsExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.excluded,\n    Parameters.reason\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.hub, Parameters.group],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst sendToGroup$binaryOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/groups/{group}/:send\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubSendToGroupExceptionHeaders\n    }\n  },\n  requestBody: Parameters.message,\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.excludedConnections,\n    Parameters.filter\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.hub, Parameters.group],\n  headerParameters: [Parameters.contentType, Parameters.accept2],\n  mediaType: \"binary\",\n  serializer\n};\nconst sendToGroup$textOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/groups/{group}/:send\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubSendToGroupExceptionHeaders\n    }\n  },\n  requestBody: Parameters.message1,\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.excludedConnections,\n    Parameters.filter\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.hub, Parameters.group],\n  headerParameters: [Parameters.contentType1, Parameters.accept3],\n  mediaType: \"text\",\n  serializer\n};\nconst removeConnectionFromGroupOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/groups/{group}/connections/{connectionId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubRemoveConnectionFromGroupExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.hub,\n    Parameters.connectionId,\n    Parameters.group\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst addConnectionToGroupOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/groups/{group}/connections/{connectionId}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubAddConnectionToGroupExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.hub,\n    Parameters.connectionId,\n    Parameters.group\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst revokePermissionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/permissions/{permission}/connections/{connectionId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubRevokePermissionExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.targetName],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.hub,\n    Parameters.connectionId,\n    Parameters.permission\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst checkPermissionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/permissions/{permission}/connections/{connectionId}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {},\n    404: {},\n    default: {\n      headersMapper: Mappers.WebPubSubCheckPermissionExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.targetName],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.hub,\n    Parameters.connectionId,\n    Parameters.permission\n  ],\n  serializer\n};\nconst grantPermissionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/permissions/{permission}/connections/{connectionId}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubGrantPermissionExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.targetName],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.hub,\n    Parameters.connectionId,\n    Parameters.permission\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst userExistsOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/users/{userId}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {},\n    404: {},\n    default: {\n      headersMapper: Mappers.WebPubSubUserExistsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.hub, Parameters.userId1],\n  serializer\n};\nconst closeUserConnectionsOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/users/{userId}/:closeConnections\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubCloseUserConnectionsExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.excluded,\n    Parameters.reason\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.hub, Parameters.userId1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst sendToUser$binaryOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/users/{userId}/:send\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubSendToUserExceptionHeaders\n    }\n  },\n  requestBody: Parameters.message,\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [Parameters.endpoint, Parameters.hub, Parameters.userId1],\n  headerParameters: [Parameters.contentType, Parameters.accept2],\n  mediaType: \"binary\",\n  serializer\n};\nconst sendToUser$textOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/users/{userId}/:send\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubSendToUserExceptionHeaders\n    }\n  },\n  requestBody: Parameters.message1,\n  queryParameters: [Parameters.apiVersion, Parameters.filter],\n  urlParameters: [Parameters.endpoint, Parameters.hub, Parameters.userId1],\n  headerParameters: [Parameters.contentType1, Parameters.accept3],\n  mediaType: \"text\",\n  serializer\n};\nconst removeUserFromAllGroupsOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/users/{userId}/groups\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubRemoveUserFromAllGroupsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.hub, Parameters.userId1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst removeUserFromGroupOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/users/{userId}/groups/{group}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubRemoveUserFromGroupExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.hub,\n    Parameters.group,\n    Parameters.userId1\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst addUserToGroupOperationSpec: coreClient.OperationSpec = {\n  path: \"/api/hubs/{hub}/users/{userId}/groups/{group}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.ErrorDetail,\n      headersMapper: Mappers.WebPubSubAddUserToGroupExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.hub,\n    Parameters.group,\n    Parameters.userId1\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}