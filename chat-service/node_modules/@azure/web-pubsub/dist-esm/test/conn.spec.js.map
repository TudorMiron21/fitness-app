{"version":3,"file":"conn.spec.js","sourceRoot":"","sources":["../../test/conn.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,oCAAoC;AACpC,OAAO,EAAE,qBAAqB,EAAE,MAAM,8BAA8B,CAAC;AACrE,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAE9B,QAAQ,CAAC,6BAA6B,EAAE;IACtC,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,IAAI,IAAI,GAAG,gEAAgE,CAAC;QAC5E,IAAI,MAAM,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;QACzC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC3C,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;QACxD,IAAI,GAAG,0CAA0C,CAAC;QAClD,MAAM,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC3C,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC,4BAA4B,CAAC,CAAC,CAAC;QACzE,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAChE,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/* eslint-disable no-invalid-this */\nimport { parseConnectionString } from \"../src/parseConnectionString\";\nimport { assert } from \"chai\";\n\ndescribe(\"Can parse connection string\", function () {\n  it(\"can parse valid connection string\", async () => {\n    let conn = \"Endpoint=http://localhost;AccessKey=ABC;Port=8080;Version=1.0;\";\n    let parsed = parseConnectionString(conn);\n    assert.equal(parsed.credential.key, \"ABC\");\n    assert.equal(parsed.endpoint, \"http://localhost:8080/\");\n    conn = \"Endpoint=http://localhost;AccessKey=ABC;\";\n    parsed = parseConnectionString(conn);\n    assert.equal(parsed.credential.key, \"ABC\");\n    assert.equal(parsed.endpoint, \"http://localhost/\");\n  });\n  it(\"can throw with invalid connection string\", async () => {\n    assert.throws(() => parseConnectionString(\"Endpoint=http://localhost;\"));\n    assert.throws(() => parseConnectionString(\"http://localhost;\"));\n    assert.throws(() => parseConnectionString(\"localhost;\"));\n  });\n});\n"]}