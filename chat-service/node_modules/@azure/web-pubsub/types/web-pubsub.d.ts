import { AzureKeyCredential } from '@azure/core-auth';
import { CommonClientOptions } from '@azure/core-client';
import { OperationOptions } from '@azure/core-client';
import { RequestBodyType } from '@azure/core-rest-pipeline';
import { TokenCredential } from '@azure/core-auth';

export { AzureKeyCredential }

/**
 * A response containing the client token.
 */
export declare interface ClientTokenResponse {
    /**
     * The client token.
     */
    token: string;
    /**
     * The URL client connects to
     */
    baseUrl: string;
    /**
     * The URL client connects to with access_token query string
     */
    url: string;
}

/**
 * Options for generating a token to connect a client to the Azure Web Pubsub service.
 */
export declare interface GenerateClientTokenOptions extends OperationOptions {
    /**
     * The userId for the client.
     */
    userId?: string;
    /**
     * The roles that the connection with the generated token will have.
     * Roles give the client initial permissions to leave, join, or publish to groups when using PubSub subprotocol
     * * `webpubsub.joinLeaveGroup`: the client can join or leave any group
     * * `webpubsub.sendToGroup`: the client can send messages to any group
     * * `webpubsub.joinLeaveGroup.<group>`: the client can join or leave group `<group>`
     * * `webpubsub.sendToGroup.<group>`: the client can send messages to group `<group>`
     *
     * {@link https://azure.github.io/azure-webpubsub/references/pubsub-websocket-subprotocol#permissions}
     */
    roles?: string[];
    /**
     * Minutes until the token expires.
     */
    expirationTimeInMinutes?: number;
    /**
     * The groups to join when the client connects
     */
    groups?: string[];
}

/**
 * Options for adding a connection to a group.
 */
export declare interface GroupAddConnectionOptions extends OperationOptions {
}

/**
 * Options for adding a user to a group.
 */
export declare interface GroupAddUserOptions extends OperationOptions {
}

/**
 * Options for constructing a GroupAdmin client.
 */
export declare interface GroupAdminClientOptions extends CommonClientOptions {
}

/**
 * Options for closing all connections to a group.
 */
export declare interface GroupCloseAllConnectionsOptions extends OperationOptions {
    /**
     * Reason the connection is being closed.
     */
    reason?: string;
}

/**
 * Options for checking if a user is in a group
 */
export declare interface GroupHasUserOptions extends OperationOptions {
}

/**
 * Options for removing a connection from a group
 */
export declare interface GroupRemoveConnectionOptions extends OperationOptions {
}

/**
 * Options for removing a user from a group
 */
export declare interface GroupRemoveUserOptions extends OperationOptions {
}

/**
 * Options for sending text messages to a group..
 */
export declare interface GroupSendTextToAllOptions extends GroupSendToAllOptions {
    /**
     * The content will be sent to the clients in plain text.
     */
    contentType: "text/plain";
}

/**
 * Options for sending messages to a group.
 */
export declare interface GroupSendToAllOptions extends OperationOptions {
    /**
     * Connection ids to exclude from receiving this message.
     */
    excludedConnections?: string[];
    /**
     * The filter syntax to filter out the connections to send the messages to following OData filter syntax.
     * Examples:
     *  * Exclude connections from `user1` and `user2`: `userId ne 'user1' and userId ne 'user2'`
     *  * Exclude connections in `group1`: `not('group1' in groups)`
     * Details about `filter` syntax please see [OData filter syntax for Azure Web PubSub](https://aka.ms/awps/filter-syntax).
     */
    filter?: string;
}

/**
 * Options for checking if a connection exists.
 */
export declare interface HasConnectionOptions extends OperationOptions {
}

/**
 * Options for closing all connections to a hub.
 */
export declare interface HubCloseAllConnectionsOptions extends OperationOptions {
    /**
     * Reason the connection is being closed.
     */
    reason?: string;
}

/**
 * Options for closing a connection to a hub.
 */
export declare interface HubCloseConnectionOptions extends OperationOptions {
    /**
     * Reason the connection is being closed.
     */
    reason?: string;
}

/**
 * Options for closing all of a user's connections to a hub.
 */
export declare interface HubCloseUserConnectionsOptions extends OperationOptions {
    /**
     * Reason the connection is being closed.
     */
    reason?: string;
}

/**
 * Options for grant permissions to a connection
 */
export declare interface HubGrantPermissionOptions extends OperationOptions {
    /**
     * The meaning of the target depends on the specific permission.
     * For joinLeaveGroup and sendToGroup, targetName is a required parameter standing for the group name.
     */
    targetName?: string;
}

/**
 * Options for checking if a group exists.
 */
export declare interface HubHasGroupOptions extends OperationOptions {
}

/**
 * Options for checking if a connection has the specified permission
 */
export declare interface HubHasPermissionOptions extends OperationOptions {
    /**
     * The meaning of the target depends on the specific permission.
     * For joinLeaveGroup and sendToGroup, targetName is a required parameter standing for the group name.
     */
    targetName?: string;
}

/**
 * Options for checking if a user exists.
 */
export declare interface HubHasUserOptions extends OperationOptions {
}

/**
 * Options for removing a user from all groups.
 */
export declare interface HubRemoveUserFromAllGroupsOptions extends HubCloseConnectionOptions {
}

/**
 * Options for revoke permissions from a connection
 */
export declare interface HubRevokePermissionOptions extends OperationOptions {
    /**
     * The meaning of the target depends on the specific permission.
     * For joinLeaveGroup and sendToGroup, targetName is a required parameter standing for the group name.
     */
    targetName?: string;
}

/**
 * Options for sending text messages to hubs.
 */
export declare interface HubSendTextToAllOptions extends HubSendToAllOptions {
    /**
     * The content will be sent to the clients in plain text.
     */
    contentType: "text/plain";
}

/**
 * Options for sending a text message to a connection.
 */
export declare interface HubSendTextToConnectionOptions extends HubSendToConnectionOptions {
    contentType: "text/plain";
}

/**
 * Options for sending a text message to a user.
 */
export declare interface HubSendTextToUserOptions extends HubSendToUserOptions {
    /**
     * The content will be sent to the clients in plain text.
     */
    contentType: "text/plain";
}

/**
 * Options for sending messages to hubs.
 */
export declare interface HubSendToAllOptions extends OperationOptions {
    /**
     * Connection ids to exclude from receiving this message.
     */
    excludedConnections?: string[];
    /**
     * The filter syntax to filter out the connections to send the messages to following OData filter syntax.
     * Examples:
     *  * Exclude connections from `user1` and `user2`: `userId ne 'user1' and userId ne 'user2'`
     *  * Exclude connections in `group1`: `not('group1' in groups)`
     * Details about `filter` syntax please see [OData filter syntax for Azure Web PubSub](https://aka.ms/awps/filter-syntax).
     */
    filter?: string;
}

/**
 * Options for sending a message to a specific connection.
 */
export declare interface HubSendToConnectionOptions extends OperationOptions {
}

/**
 * Options for sending a message to a user.
 */
export declare interface HubSendToUserOptions extends OperationOptions {
    /**
     * The filter syntax to filter out the connections to send the messages to following OData filter syntax.
     * Examples:
     *  * Exclude connections in `group1`: `not('group1' in groups)`
     *  * Send to connections in `group1` or `group2`: `'group1' in groups or `group2` in groups`
     * Details about `filter` syntax please see [OData filter syntax for Azure Web PubSub](https://aka.ms/awps/filter-syntax).
     */
    filter?: string;
}

/**
 * Types which can be serialized and sent as JSON.
 */
export declare type JSONTypes = string | number | boolean | object;

/**
 * Escapes an odata filter expression to avoid errors with quoting string literals.
 * Example usage:
 * ```ts
 * const userId = "vic's";
 * const anonymous = null;
 * const length = 3
 * const filter = odata`userId eq ${anonymous} or userId eq ${userId} or length(userId) > ${length}`;
 * ```
 * @param strings - Array of strings for the expression
 * @param values - Array of values for the expression
 */
export declare function odata(strings: TemplateStringsArray, ...values: unknown[]): string;

export declare type Permission = "joinLeaveGroup" | "sendToGroup";

export declare interface WebPubSubGroup {
    /**
     * The name of this group
     */
    readonly groupName: string;
    /**
     * The name of the hub this group belongs to
     */
    readonly hubName: string;
    /**
     * The Web PubSub API version being used by this client
     */
    readonly apiVersion: string;
    /**
     * The Web PubSub endpoint this client is connected to
     */
    readonly endpoint: string;
    /**
     * Add a specific connection to this group
     *
     * @param connectionId - The connection id to add to this group
     * @param options - Additional options
     */
    addConnection(connectionId: string, options?: GroupAddConnectionOptions): Promise<void>;
    /**
     * Remove a specific connection from this group
     *
     * @param connectionId - The connection id to remove from this group
     * @param options - Additional options
     */
    removeConnection(connectionId: string, options?: GroupRemoveConnectionOptions): Promise<void>;
    /**
     * Close all connections to the group
     *
     * @param options - Additional options
     */
    closeAllConnections(options?: GroupCloseAllConnectionsOptions): Promise<void>;
    /**
     * Add a user to this group
     *
     * @param username - The user name to add
     * @param options - Additional options
     */
    addUser(username: string, options?: GroupAddUserOptions): Promise<void>;
    /**
     * Remove a user from this group
     *
     * @param username - The user name to remove
     * @param options - Additional options
     */
    removeUser(username: string, options?: GroupRemoveUserOptions): Promise<void>;
    /**
     * Send a text message to every connection in this group
     *
     * @param message - The message to send
     * @param options - Additional options
     */
    sendToAll(message: string, options: GroupSendTextToAllOptions): Promise<void>;
    /**
     * Send a json message to every connection in this group
     *
     * @param message - The message to send
     * @param options - Additional options
     */
    sendToAll(message: JSONTypes, options?: GroupSendToAllOptions): Promise<void>;
    /**
     * Send a binary message to every connection in this group
     *
     * @param message - The binary message to send
     * @param options - Additional options
     */
    sendToAll(message: RequestBodyType, options?: GroupSendToAllOptions): Promise<void>;
}

/**
 * Client for connecting to a Web PubSub hub
 */
export declare class WebPubSubServiceClient {
    private readonly client;
    private credential;
    private readonly clientOptions?;
    /**
     * The name of the hub this client is connected to
     */
    readonly hubName: string;
    /**
     * The Web PubSub API version being used by this client
     */
    readonly apiVersion: string;
    /**
     * The Web PubSub endpoint this client is connected to
     */
    endpoint: string;
    /**
     * Creates an instance of a WebPubSubServiceClient for sending messages and managing groups, connections, and users.
     *
     * Example usage:
     * ```ts
     * import { WebPubSubServiceClient } from "@azure/web-pubsub";
     * const connectionString = process.env['WEB_PUBSUB_CONNECTION_STRING'];
     * const client = new WebPubSubServiceClient(connectionString, 'chat');
     * ```
     *
     * @param connectionString - The connection string
     * @param hubName - The name of the hub to connect to. If omitted, '_default' is used.
     * @param options - Options to configure the http pipeline
     */
    constructor(connectionString: string, hubName: string, options?: WebPubSubServiceClientOptions);
    /**
     * Creates an instance of a WebPubSubServiceClient for sending messages and managing groups, connections, and users.
     *
     * Example usage:
     * ```ts
     * import { WebPubSubServiceClient, AzureKeyCredential } from "@azure/web-pubsub";
     * const cred = new AzureKeyCredential("<your web pubsub api key>");
     * const endpoint = "https://xxxx.webpubsubdev.azure.com"
     * const client = new WebPubSubServiceClient(endpoint, cred, 'chat');
     * ```
     *
     * @param endpoint - The endpoint to connect to
     * @param credential - An AzureKeyCredential holding your service key
     * @param hubName - The name of the hub to connect to.
     * @param options - Options to configure the http pipeline
     */
    constructor(endpoint: string, credential: AzureKeyCredential | TokenCredential, hubName: string, options?: WebPubSubServiceClientOptions);
    /**
     * Get a client for a group
     * @param groupName - The name of the group to connect to.
     */
    group(groupName: string): WebPubSubGroup;
    /**
     * Broadcast a text message to all connections on this hub.
     *
     * @param message - The text message to send
     * @param options - Additional options
     */
    sendToAll(message: string, options: HubSendTextToAllOptions): Promise<void>;
    /**
     * Broadcast a JSON message to all connections on this hub.
     *
     * @param message - The JSON message to send
     * @param options - Additional options
     */
    sendToAll(message: JSONTypes, options?: HubSendToAllOptions): Promise<void>;
    /**
     * Broadcast a binary message to all connections on this hub.
     *
     * @param message - The message to send
     * @param options - Additional options
     */
    sendToAll(message: RequestBodyType, options?: HubSendToAllOptions): Promise<void>;
    /**
     * Send a text message to a specific user
     *
     * @param username - User name to send to
     * @param message - The text message to send
     * @param options - Additional options
     */
    sendToUser(username: string, message: string, options: HubSendTextToUserOptions): Promise<void>;
    /**
     * Send a JSON message to a specific user
     *
     * @param username - User name to send to
     * @param message - The josn message to send
     * @param options - Additional options
     */
    sendToUser(username: string, message: JSONTypes, options?: HubSendToUserOptions): Promise<void>;
    /**
     * Send a binary message to a specific user
     *
     * @param username - The user name to send to
     * @param message - The binary message to send
     * @param options - Additional options
     */
    sendToUser(username: string, message: RequestBodyType, options?: HubSendToUserOptions | HubSendTextToUserOptions): Promise<void>;
    /**
     * Send a text message to a specific connection
     *
     * @param connectionId - Connection id to send to
     * @param message - The text message
     * @param options - Additional options
     */
    sendToConnection(connectionId: string, message: string, options: HubSendTextToConnectionOptions): Promise<void>;
    /**
     * Send a binary message to a specific connection
     *
     * @param connectionId - Connection id to send to
     * @param message - The JSON message
     * @param options - Additional options
     */
    sendToConnection(connectionId: string, message: JSONTypes, options?: HubSendToConnectionOptions): Promise<void>;
    /**
     * Send a binary message to a specific connection
     *
     * @param connectionId - Connection id to send to
     * @param message - The binary message
     * @param options - Additional options
     */
    sendToConnection(connectionId: string, message: RequestBodyType, options?: HubSendToConnectionOptions | HubSendTextToConnectionOptions): Promise<void>;
    /**
     * Check if a specific connection is connected to this hub
     *
     * @param connectionId - Connection id to check
     * @param options - Additional options
     */
    connectionExists(connectionId: string, options?: HasConnectionOptions): Promise<boolean>;
    /**
     * Close a specific connection to this hub
     *
     * @param connectionId - Connection id to close
     * @param options - Additional options
     */
    closeConnection(connectionId: string, options?: HubCloseConnectionOptions): Promise<void>;
    /**
     * Close all connections to this hub
     *
     * @param options - Additional options
     */
    closeAllConnections(options?: HubCloseAllConnectionsOptions): Promise<void>;
    /**
     * Close all connections with the given user id
     *
     * @param user - User id to close
     * @param options - Additional options
     */
    closeUserConnections(userId: string, options?: HubCloseUserConnectionsOptions): Promise<void>;
    /**
     * Remove a specific user from all groups they are joined to
     * @param userId - The user id to remove from all groups
     * @param options - Additional options
     */
    removeUserFromAllGroups(userId: string, options?: HubCloseConnectionOptions): Promise<void>;
    /**
     * Remove a specific connection from all groups they are joined to
     * @param connectionId - The connection id to remove from all groups
     * @param options - Additional options
     */
    removeConnectionFromAllGroups(connectionId: string, options?: HubCloseConnectionOptions): Promise<void>;
    /**
     * Check if a particular group exists (i.e. has active connections).
     *
     * @param groupName - The group name to check for
     * @param options - Additional options
     */
    groupExists(groupName: string, options?: HubHasGroupOptions): Promise<boolean>;
    /**
     * Check if a particular user is connected to this hub.
     *
     * @param username - The user name to check for
     * @param options - Additional options
     */
    userExists(username: string, options?: HubHasUserOptions): Promise<boolean>;
    /**
     * Grant permissions to a connection
     *
     * @param connectionId - The connection id to grant permissions to
     * @param Permission - The permission to grant
     * @param options - Additional options
     */
    grantPermission(connectionId: string, permission: Permission, options?: HubGrantPermissionOptions): Promise<void>;
    /**
     * Revoke permissions from a connection
     *
     * @param connectionId - The connection id to revoke permissions from
     * @param Permission - The permission to revoke
     * @param options - Additional options
     */
    revokePermission(connectionId: string, permission: Permission, options?: HubRevokePermissionOptions): Promise<void>;
    /**
     * Check if the connection has the specified permission
     *
     * @param connectionId - The connection id to check permission
     * @param Permission - The permission to check
     * @param options - Additional options
     */
    hasPermission(connectionId: string, permission: Permission, options?: HubHasPermissionOptions): Promise<boolean>;
    /**
     * Generate a token for a client to connect to the Azure Web PubSub service.
     *
     * @param options - Additional options
     */
    getClientAccessToken(options?: GenerateClientTokenOptions): Promise<ClientTokenResponse>;
}

/**
 * Options to configure the logging options.
 */
export declare interface WebPubSubServiceClientLogOptions {
    /**
     * Header names whose values will be logged when logging is enabled.
     * Defaults include a list of well-known safe headers. Any headers
     * specified in this field will be added to that list.  Any other values will
     * be written to logs as "REDACTED".
     */
    additionalAllowedHeaderNames?: string[];
    /**
     * Query string names whose values will be logged when logging is enabled. By default no
     * query string values are logged.
     */
    additionalAllowedQueryParameters?: string[];
}

/**
 * Options for constructing a HubAdmin client.
 */
export declare interface WebPubSubServiceClientOptions extends CommonClientOptions {
    /**
     * Reverse proxy endpoint (for example, your Azure API management endpoint)
     */
    reverseProxyEndpoint?: string;
    /**
     * Options to configure the logging options.
     */
    loggingOptions?: WebPubSubServiceClientLogOptions;
}

export { }
