{"version":3,"file":"messages.js","sourceRoot":"","sources":["../../../src/models/messages.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { JSONTypes } from \"../webPubSubClient\";\n\n/**\n * The web pubsub message\n */\nexport type WebPubSubMessage =\n  | GroupDataMessage\n  | ServerDataMessage\n  | JoinGroupMessage\n  | LeaveGroupMessage\n  | ConnectedMessage\n  | DisconnectedMessage\n  | SendToGroupMessage\n  | SendEventMessage\n  | SequenceAckMessage\n  | AckMessage;\n\n/**\n * The common of web pubsub message\n */\nexport interface WebPubSubMessageBase {\n  kind: DownstreamMessageType | UpstreamMessageType;\n}\n\n/**\n * Types for downstream messages\n */\nexport type DownstreamMessageType =\n  /**\n   * Type for AckMessage\n   */\n  | \"ack\"\n  /**\n   * Type for ConnectedMessage\n   */\n  | \"connected\"\n  /**\n   * Type for DisconnectedMessage\n   */\n  | \"disconnected\"\n  /**\n   * Type for GroupDataMessage\n   */\n  | \"groupData\"\n  /**\n   * Type for ServerDataMessage\n   */\n  | \"serverData\";\n\n/**\n * Types for upstream messages\n */\nexport type UpstreamMessageType =\n  /**\n   * Type for JoinGroupMessage\n   */\n  | \"joinGroup\"\n  /**\n   * Type for LeaveGroupMessage\n   */\n  | \"leaveGroup\"\n  /**\n   * Type for SendToGroupMessage\n   */\n  | \"sendToGroup\"\n  /**\n   * Type for SendEventMessage\n   */\n  | \"sendEvent\"\n  /**\n   * Type for SequenceAckMessage\n   */\n  | \"sequenceAck\";\n\n/**\n * The ack message\n */\nexport interface AckMessage extends WebPubSubMessageBase {\n  /**\n   * Message type\n   */\n  readonly kind: \"ack\";\n  /**\n   * The correspending id\n   */\n  ackId: number;\n  /**\n   * Is operation success or not\n   */\n  success: boolean;\n  /**\n   * The error detail. Only available when success is false\n   */\n  error?: AckMessageError;\n}\n\n/**\n * Error detail in AckMessage\n */\nexport interface AckMessageError {\n  /**\n   * Error name\n   */\n  name: string;\n  /**\n   * Details error message\n   */\n  message: string;\n}\n\n/**\n * Connected message\n */\nexport interface ConnectedMessage extends WebPubSubMessageBase {\n  /**\n   * Message type\n   */\n  readonly kind: \"connected\";\n  /**\n   * The connection id\n   */\n  connectionId: string;\n  /**\n   * The user id of the client connection\n   */\n  userId: string;\n  /**\n   * The reconnection token. Only available in reliable protocols.\n   */\n  reconnectionToken: string;\n}\n\n/**\n * Disconnected message\n */\nexport interface DisconnectedMessage extends WebPubSubMessageBase {\n  /**\n   * Message type\n   */\n  readonly kind: \"disconnected\";\n  /**\n   * Reason of disconnection.\n   */\n  message: string;\n}\n\n/**\n * Group data message\n */\nexport interface GroupDataMessage extends WebPubSubMessageBase {\n  /**\n   * Message type\n   */\n  readonly kind: \"groupData\";\n  /**\n   * The data type\n   */\n  dataType: WebPubSubDataType;\n  /**\n   * The data\n   */\n  data: JSONTypes | ArrayBuffer;\n  /**\n   * The sequence id of the data. Only available in reliable protocols\n   */\n  sequenceId?: number;\n  /**\n   * The name of group that the message come from.\n   */\n  group: string;\n  /**\n   * The user id of the sender\n   */\n  fromUserId: string;\n}\n\n/**\n * Server data message\n */\nexport interface ServerDataMessage extends WebPubSubMessageBase {\n  /**\n   * Message type\n   */\n  readonly kind: \"serverData\";\n  /**\n   * The data type\n   */\n  dataType: WebPubSubDataType;\n  /**\n   * The data\n   */\n  data: JSONTypes | ArrayBuffer;\n  /**\n   * The sequence id of the data. Only available in reliable protocols\n   */\n  sequenceId?: number;\n}\n\n/**\n * Join group message\n */\nexport interface JoinGroupMessage extends WebPubSubMessageBase {\n  /**\n   * Message type\n   */\n  readonly kind: \"joinGroup\";\n  /**\n   * The group to join\n   */\n  group: string;\n  /**\n   * Optional ack id. If specified, an AckMessage with success or not will be returned with the same ackId\n   */\n  ackId?: number;\n}\n\n/**\n * Leave group message\n */\nexport interface LeaveGroupMessage extends WebPubSubMessageBase {\n  /**\n   * Message type\n   */\n  readonly kind: \"leaveGroup\";\n  /**\n   * The group to leave\n   */\n  group: string;\n  /**\n   * Optional ack id. If specified, an AckMessage with success or not will be returned with the same ackId\n   */\n  ackId?: number;\n}\n\n/**\n * Send custom event message\n */\nexport interface SendEventMessage extends WebPubSubMessageBase {\n  /**\n   * Message type\n   */\n  readonly kind: \"sendEvent\";\n  /**\n   * Optional ack id. If specified, an AckMessage with success or not will be returned with the same ackId\n   */\n  ackId?: number;\n  /**\n   * The data type\n   */\n  dataType: WebPubSubDataType;\n  /**\n   * The data\n   */\n  data: JSONTypes | ArrayBuffer;\n  /**\n   * The event name\n   */\n  event: string;\n}\n\n/**\n * Send to group message\n */\nexport interface SendToGroupMessage extends WebPubSubMessageBase {\n  /**\n   * Message type\n   */\n  readonly kind: \"sendToGroup\";\n  /**\n   * The group to send\n   */\n  group: string;\n  /**\n   * Optional ack id. If specified, an AckMessage with success or not will be returned with the same ackId\n   */\n  ackId?: number;\n  /**\n   * The data type\n   */\n  dataType: WebPubSubDataType;\n  /**\n   * The data\n   */\n  data: JSONTypes | ArrayBuffer;\n  /**\n   * Whether the message needs to echo to sender\n   */\n  noEcho: boolean;\n}\n\n/**\n * Sequence ack message\n */\nexport interface SequenceAckMessage extends WebPubSubMessageBase {\n  /**\n   * Message type\n   */\n  readonly kind: \"sequenceAck\";\n  /**\n   * The sequence id\n   */\n  sequenceId: number;\n}\n\n/**\n * The data type\n */\nexport type WebPubSubDataType =\n  /**\n   * Binary type\n   */\n  | \"binary\"\n  /**\n   * Json type\n   */\n  | \"json\"\n  /**\n   * Text type\n   */\n  | \"text\"\n  /**\n   * Protobuf type\n   */\n  | \"protobuf\";\n"]}