{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/models/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAyOlC,cAAc,YAAY,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { WebPubSubClientProtocol } from \"../protocols\";\nimport { DisconnectedMessage, GroupDataMessage, ServerDataMessage } from \"./messages\";\n\n/**\n * The client options\n */\nexport interface WebPubSubClientOptions {\n  /**\n   * The subprotocol\n   */\n  protocol?: WebPubSubClientProtocol;\n  /**\n   * Whether to auto reconnect after connection is dropped and not recoverable\n   */\n  autoReconnect?: boolean;\n  /**\n   * Whether to enable restoring group after reconnecting\n   */\n  autoRejoinGroups?: boolean;\n  /**\n   * The retry options for operations like joining group and sending messages\n   */\n  messageRetryOptions?: WebPubSubRetryOptions;\n  /**\n   * The retry options for reconnection. Only available when autoReconnect is true.\n   */\n  reconnectRetryOptions?: WebPubSubRetryOptions;\n}\n\n/**\n * The retry options\n */\nexport interface WebPubSubRetryOptions {\n  /**\n   * Number of times the operation needs to be retried in case\n   * of retryable error. Default: 3.\n   */\n  maxRetries?: number;\n  /**\n   * Amount of time to wait in milliseconds before making the\n   * next attempt. Default: `1000 milliseconds`.\n   * When `mode` option is set to `Exponential`,\n   * this is used to compute the exponentially increasing delays between retries.\n   */\n  retryDelayInMs?: number;\n  /**\n   * Denotes the maximum delay between retries\n   * that the retry attempts will be capped at. Applicable only when performing exponential retry.\n   */\n  maxRetryDelayInMs?: number;\n  /**\n   * Denotes which retry mode to apply. If undefined, defaults to `Fixed`\n   */\n  mode?: RetryMode;\n}\n\n/**\n * Describes the Retry Mode type\n */\nexport type RetryMode = \"Exponential\" | \"Fixed\";\n\n/**\n * The start options\n */\nexport interface StartOptions {\n  /**\n   * The abort signal\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Join group operation options\n */\nexport interface JoinGroupOptions {\n  /**\n   * The optional ackId. If not specified, client will generate one.\n   */\n  ackId?: number;\n  /**\n   * The abort signal\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Leave group operation options\n */\nexport interface LeaveGroupOptions {\n  /**\n   * The optional ackId. If not specified, client will generate one.\n   */\n  ackId?: number;\n  /**\n   * The abort signal\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Send to group operation options\n */\nexport interface SendToGroupOptions {\n  /**\n   * Whether the message needs to echo to sender\n   */\n  noEcho?: boolean;\n  /**\n   * If true, the message won't contains ackId. No AckMessage will be returned from the service.\n   */\n  fireAndForget?: boolean;\n  /**\n   * The optional ackId. If not specified, client will generate one.\n   */\n  ackId?: number;\n  /**\n   * The abort signal\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Send event operation options\n */\nexport interface SendEventOptions {\n  /**\n   * If true, the message won't contains ackId. No AckMessage will be returned from the service.\n   */\n  fireAndForget?: boolean;\n  /**\n   * The optional ackId. If not specified, client will generate one.\n   */\n  ackId?: number;\n  /**\n   * The abort signal\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Parameter of OnConnected callback\n */\nexport interface OnConnectedArgs {\n  /**\n   * The connection id\n   */\n  connectionId: string;\n  /**\n   * The user id of the client connection\n   */\n  userId: string;\n}\n\n/**\n * Parameter of OnDisconnected callback\n */\nexport interface OnDisconnectedArgs {\n  /**\n   * The connection id\n   */\n  connectionId?: string;\n  /**\n   * The disconnected message\n   */\n  message?: DisconnectedMessage;\n}\n\n/**\n * Parameter of OnStopped callback\n */\nexport interface OnStoppedArgs {}\n\n/**\n * Parameter of OnDataMessage callback\n */\nexport interface OnServerDataMessageArgs {\n  /**\n   * The data message\n   */\n  message: ServerDataMessage;\n}\n\n/**\n * Parameter of OnGroupDataMessage callback\n */\nexport interface OnGroupDataMessageArgs {\n  /**\n   * The group data message\n   */\n  message: GroupDataMessage;\n}\n\n/**\n * Parameter of RejoinGroupFailed callback\n */\nexport interface OnRejoinGroupFailedArgs {\n  /**\n   * The group name\n   */\n  group: string;\n  /**\n   * The failure error\n   */\n  error: Error;\n}\n\n/**\n * The ack result\n */\nexport interface WebPubSubResult {\n  /**\n   * The ack message from the service. If the message is fire-and-forget, this will be undefined.\n   */\n  ackId?: number;\n  /**\n   * Whether the message is duplicated.\n   */\n  isDuplicated: boolean;\n}\n\n/**\n * The start options\n */\nexport interface GetClientAccessUrlOptions {\n  /**\n   * The abort signal\n   */\n  abortSignal?: AbortSignalLike;\n}\n\nexport * from \"./messages\";\n"]}