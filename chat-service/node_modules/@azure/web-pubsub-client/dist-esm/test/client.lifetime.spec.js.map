{"version":3,"file":"client.lifetime.spec.js","sourceRoot":"","sources":["../../test/client.lifetime.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AACtC,OAAO,KAAK,MAAM,OAAO,CAAC;AAY1B,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAC;AACzD,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AACzC,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,qBAAqB,EAAE,MAAM,kBAAkB,CAAC;AACzD,OAAO,EAAE,mBAAmB,EAAE,MAAM,SAAS,CAAC;AAC9C,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAC;AAC1D,OAAO,EAAE,gBAAgB,EAAE,MAAM,eAAe,CAAC;AAEjD,QAAQ,CAAC,iBAAiB,EAAE;IAC1B,QAAQ,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAChE,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,mBAAmB,CAAC,CAAC;YACxD,MAAM,MAAM,GAAG,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAC/C,aAAa,CAAC,MAAM,CAAC,CAAC;YACtB,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,yBAAyB;YACzB,MAAM,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gDAAgD,EAAE,GAAG,EAAE;QAC9D,MAAM,KAAK,GAAG;YACZ;gBACE,QAAQ,EAAE,YAAY;gBACtB,aAAa,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,EAAsB;gBACtF,YAAY,EAAE,KAAK,EAAE,MAAuB,EAAE,EAAE,CAC9C,MAAM,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,CAAC,EAAsB,CAAC;aACxE;YACD;gBACE,QAAQ,EAAE,aAAa;gBACvB,aAAa,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,EAAuB;gBACxF,YAAY,EAAE,KAAK,EAAE,MAAuB,EAAE,EAAE,CAC9C,MAAM,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,CAAC,EAAsB,CAAC;aACzE;YACD;gBACE,QAAQ,EAAE,eAAe;gBACzB,aAAa,EAAE;oBACb,IAAI,EAAE,aAAa;oBACnB,KAAK,EAAE,WAAW;oBAClB,KAAK,EAAE,CAAC;oBACR,QAAQ,EAAE,MAAM;oBAChB,IAAI,EAAE,KAAK;oBACX,MAAM,EAAE,KAAK;iBACQ;gBACvB,YAAY,EAAE,KAAK,EAAE,MAAuB,EAAE,EAAE,CAC9C,MAAM,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;aACrE;YACD;gBACE,QAAQ,EAAE,YAAY;gBACtB,aAAa,EAAE;oBACb,IAAI,EAAE,WAAW;oBACjB,KAAK,EAAE,WAAW;oBAClB,KAAK,EAAE,CAAC;oBACR,QAAQ,EAAE,MAAM;oBAChB,IAAI,EAAE,KAAK;iBACQ;gBACrB,YAAY,EAAE,KAAK,EAAE,MAAuB,EAAE,EAAE,CAC9C,MAAM,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;aACnE;SACF,CAAC;QAEF,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,EAAE,aAAa,EAAE,YAAY,EAAE,EAAE,EAAE;YAC1D,EAAE,CAAC,kBAAkB,QAAQ,EAAE,EAAE,KAAK,IAAI,EAAE;gBAC1C,iDAAiD;gBACjD,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,mBAAmB,EAAE;oBACtD,mBAAmB,EAAE,EAAE,cAAc,EAAE,EAAE,EAA2B;iBAC3C,CAAC,CAAC;gBAC7B,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAChC,IAAI;qBACD,OAAO,CAAC,cAAc,CAAC;qBACvB,OAAO,CAAC,CAAC,CAAC;qBACV,QAAQ,CAAC,aAAa,CAAC;qBACvB,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;gBACtC,IAAI,CAAC;oBACH,MAAM,YAAY,CAAC,MAAM,CAAC,CAAC;gBAC7B,CAAC;gBAAC,WAAM,CAAC,CAAA,CAAC;gBACV,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,EAAE,aAAa,EAAE,YAAY,EAAE,EAAE,EAAE;YAC1D,EAAE,CAAC,uBAAuB,QAAQ,EAAE,EAAE,KAAK,IAAI,EAAE;gBAC/C,iDAAiD;gBACjD,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,mBAAmB,EAAE;oBACtD,mBAAmB,EAAE,EAAE,cAAc,EAAE,EAAE,EAAE,UAAU,EAAE,CAAC,EAA2B;iBAC1D,CAAC,CAAC;gBAC7B,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAChC,IAAI;qBACD,OAAO,CAAC,cAAc,CAAC;qBACvB,OAAO,CAAC,CAAC,CAAC;qBACV,QAAQ,CAAC,aAAa,CAAC;qBACvB,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;gBACtC,IAAI,CAAC;oBACH,MAAM,YAAY,CAAC,MAAM,CAAC,CAAC;gBAC7B,CAAC;gBAAC,WAAM,CAAC,CAAA,CAAC;gBACV,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,EAAE,aAAa,EAAE,YAAY,EAAE,EAAE,EAAE;YAC1D,EAAE,CAAC,6BAA6B,QAAQ,EAAE,EAAE,KAAK,IAAI,EAAE;gBACrD,iDAAiD;gBACjD,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,mBAAmB,EAAE;oBACtD,mBAAmB,EAAE,EAAE,cAAc,EAAE,EAAE,EAA2B;iBAC3C,CAAC,CAAC;gBAC7B,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAChC,IAAI;qBACD,OAAO,CAAC,cAAc,CAAC;qBACvB,OAAO,CAAC,CAAC,CAAC;qBACV,QAAQ,CAAC,aAAa,CAAC;qBACvB,WAAW,EAAE;qBACb,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;qBAC5C,SAAS,CAAC,GAAG,EAAE;oBACd,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAE,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,KAAK,EAAqB,CAAC,CAAC;oBACxF,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC3B,CAAC,CAAC,CAAC;gBACL,IAAI,CAAC;oBACH,MAAM,YAAY,CAAC,MAAM,CAAC,CAAC;gBAC7B,CAAC;gBAAC,WAAM,CAAC,CAAA,CAAC;gBACV,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;YACtC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,mBAAmB,EAAE;gBACtD,mBAAmB,EAAE,EAAE,UAAU,EAAE,CAAC,EAA2B;aACtC,CAAC,CAAC;YAE7B,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAChC,IAAI;iBACD,OAAO,CAAC,cAAc,CAAC;iBACvB,OAAO,CAAC,CAAC,CAAC;iBACV,WAAW,EAAE;iBACb,SAAS,CAAC,GAAG,EAAE;gBACd,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;YAC3B,CAAC,CAAC;iBACD,YAAY,EAAE;iBACd,SAAS,CAAC,GAAG,EAAE;gBACd,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAE,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,KAAK,EAAqB,CAAC,CAAC;gBACxF,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;YAC3B,CAAC,CAAC,CAAC;YAEL,MAAM,OAAO,GAAG,IAAI,eAAe,EAAE,CAAC;YACtC,MAAM,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE;gBAClC,KAAK,EAAE,CAAC;gBACR,WAAW,EAAE,OAAO,CAAC,MAAM;aACR,CAAC,CAAC;YACvB,UAAU,CAAC,GAAG,EAAE;gBACd,OAAO,CAAC,KAAK,EAAE,CAAC;YAClB,CAAC,CAAC,CAAC;YACH,MAAM,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;YAErD,qDAAqD;YACrD,MAAM,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,EAAsB,CAAC,CAAC;YAElE,IAAI,CAAC,MAAM,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;YACxC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,mBAAmB,CAAC,CAAC;YACxD,MAAM,MAAM,GAAG,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAE/C,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;YAC1B,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACzB,MAAM,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,mBAAmB,EAAE;gBACtD,qBAAqB,EAAE,EAAE,cAAc,EAAE,EAAE,EAA2B;aAC7C,CAAC,CAAC;YAC7B,MAAM,MAAM,GAAG,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAE/C,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAChC,IAAI,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC,MAAM,EAAE,CAAC,WAAW,EAAE,CAAC;YAElE,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAC1C,IAAI;iBACD,WAAW,EAAE;iBACb,SAAS,CAAC,CAAC,GAAG,IAAI,EAAE,EAAE;gBACrB,UAAU,CAAC,GAAG,EAAE;oBACd,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;oBACzC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACjC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;iBACD,YAAY,EAAE;iBACd,SAAS,CAAC,CAAC,GAAG,IAAI,EAAE,EAAE;gBACrB,UAAU,CAAC,GAAG,EAAE;oBACd,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;oBACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;iBACD,SAAS,CAAC,CAAC,GAAG,IAAI,EAAE,EAAE;gBACrB,UAAU,CAAC,GAAG,EAAE;oBACd,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;oBAClC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;oBACzC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACjC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEL,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACzB,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;YACjB,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,MAAM,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kFAAkF,EAAE,KAAK,IAAI,EAAE;YAChG,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,mBAAmB,EAAE;gBACtD,QAAQ,EAAE,qBAAqB,EAAE;gBACjC,qBAAqB,EAAE,EAAE,cAAc,EAAE,EAAE,EAA2B;aAC7C,CAAC,CAAC;YAC7B,MAAM,MAAM,GAAG,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAC/C,aAAa,CAAC,MAAM,CAAC,CAAC;YAEtB,IAAI,IAAY,CAAC;YACjB,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,EAAE;gBACnC,IAAI,GAAG,SAAS,CAAC,YAAY,CAAC;YAChC,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAElE,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;YAElD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACnE,oCAAoC;YACpC,MAAM,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAE5F,kBAAkB;YAClB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACzB,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,KAAK,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACnE,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,mBAAmB,EAAE;gBACtD,qBAAqB,EAAE,EAAE,cAAc,EAAE,EAAE,EAA2B;aAC7C,CAAC,CAAC;YAC7B,MAAM,MAAM,GAAG,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAC/C,aAAa,CAAC,MAAM,CAAC,CAAC;YAEtB,IAAI,IAAY,CAAC;YACjB,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,EAAE;gBACnC,IAAI,GAAG,SAAS,CAAC,YAAY,CAAC;YAChC,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;YAEhF,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;YAElD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;YACjF,oCAAoC;YACpC,MAAM,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAE5F,kBAAkB;YAClB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACzB,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,KAAK,CAAC,CAAC,CAAC;YAE7C,gDAAgD;YAChD,MAAM,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,mBAAmB,EAAE;gBACtD,qBAAqB,EAAE,EAAE,cAAc,EAAE,EAAE,EAA2B;aAC7C,CAAC,CAAC;YAC7B,MAAM,MAAM,GAAG,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAC/C,aAAa,CAAC,MAAM,CAAC,CAAC;YAEtB,IAAI,IAAY,CAAC;YACjB,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,EAAE;gBACnC,IAAI,GAAG,SAAS,CAAC,YAAY,CAAC;YAChC,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAElE,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;YAElD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACnE,oCAAoC;YACpC,MAAM,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAE5F,kBAAkB;YAClB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACzB,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,KAAK,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACnE,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAC/C,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,mBAAmB,EAAE;gBACtD,QAAQ,EAAE,qBAAqB,EAAE;gBACjC,qBAAqB,EAAE,EAAE,cAAc,EAAE,EAAE,EAA2B;aAC7C,CAAC,CAAC;YAC7B,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAChC,IAAI;iBACD,OAAO,CAAC,gBAAgB,CAAC;iBACzB,OAAO,CAAC,CAAC,CAAC;iBACV,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;YAEvC,MAAM,MAAM,GAAG,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAC/C,aAAa,CAAC,MAAM,CAAC,CAAC;YAEtB,IAAI,IAAY,CAAC;YACjB,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,EAAE;gBACnC,IAAI,GAAG,SAAS,CAAC,YAAY,CAAC;YAChC,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAElE,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;YAElD,sBAAsB;YACtB,MAAM,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC5B,MAAM,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAE5B,kBAAkB;YAClB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACzB,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,KAAK,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACnE,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YAEnD,IAAI,CAAC,MAAM,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,mBAAmB,EAAE;gBACtD,QAAQ,EAAE,qBAAqB,EAAE;gBACjC,qBAAqB,EAAE,EAAE,cAAc,EAAE,EAAE,EAA2B;gBACtE,gBAAgB,EAAE,KAAK;aACE,CAAC,CAAC;YAC7B,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAChC,IAAI;iBACD,OAAO,CAAC,gBAAgB,CAAC;iBACzB,OAAO,CAAC,CAAC,CAAC;iBACV,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;YAEvC,MAAM,MAAM,GAAG,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAC/C,aAAa,CAAC,MAAM,CAAC,CAAC;YAEtB,IAAI,IAAY,CAAC;YACjB,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,EAAE;gBACnC,IAAI,GAAG,SAAS,CAAC,YAAY,CAAC;YAChC,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAElE,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;YAElD,sBAAsB;YACtB,MAAM,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC5B,MAAM,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAE5B,kBAAkB;YAClB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACzB,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,KAAK,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACnE,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YAEnD,IAAI,CAAC,MAAM,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;QAC/C,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;YACzC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,mBAAmB,CAAC,CAAC;YACxD,MAAM,MAAM,GAAG,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAC/C,aAAa,CAAC,MAAM,CAAC,CAAC;YAEtB,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;YAC7C,IAAI;iBACD,OAAO,CAAC,eAAe,CAAC;iBACxB,OAAO,CAAC;gBACP,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAuB;gBACxE,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAuB;aACzE,CAAC,CAAC;YAEL,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;YAC7B,MAAM,CAAC,EAAE,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;YACtC,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YAErB,6CAA6C;YAC7C,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YAE1B,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;YACpC,MAAM,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,mBAAmB,CAAC,CAAC;YACxD,MAAM,MAAM,GAAG,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAC/C,aAAa,CAAC,MAAM,CAAC,CAAC;YAEtB,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;YAC7C,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC;gBACpC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,EAAuB;gBACvF,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,EAAuB;aAC1F,CAAC,CAAC;YAEH,MAAM,eAAe,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,cAAc,CAAC,CAAC;YAEvE,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,6CAA6C;YAC7C,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YAE1B,mCAAmC;YACnC,KAAK,CAAC,MAAM,CAAC,UAAU,CACrB,eAAe,EACf,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,CAC/E,CAAC;YACF,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,MAAM,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,SAAS,aAAa,CAAC,EAAuB;QAC5C,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QACtC,IAAI,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,EAAE,EAAE;YACvC,UAAU,CAAC,GAAG,EAAE;gBACd,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;gBACrC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,UAAU,SAAS,CAAC,EAAc,EAAE,YAAqB,EAAE,MAAe;QAC7E,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,YAAY,GAAG,EAAE,CAAC;QACpB,CAAC;QACD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,GAAG,GAAG,CAAC;QACf,CAAC;QAED,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,OAAO,QAAQ,GAAG,MAAM,EAAE,CAAC;YACzB,IAAI,CAAC;gBACH,EAAE,EAAE,CAAC;gBACL,OAAO;YACT,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,QAAQ,EAAE,CAAC;gBACX,IAAI,QAAQ,IAAI,MAAM,EAAE,CAAC;oBACvB,MAAM,GAAG,CAAC;gBACZ,CAAC;gBACD,MAAM,KAAK,CAAC,YAAY,CAAC,CAAC;YAC5B,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { assert, expect } from \"chai\";\nimport sinon from \"sinon\";\nimport {\n  JoinGroupMessage,\n  JoinGroupOptions,\n  LeaveGroupMessage,\n  SendEventMessage,\n  SendToGroupMessage,\n  ServerDataMessage,\n  WebPubSubClientOptions,\n  WebPubSubResult,\n  WebPubSubRetryOptions,\n} from \"../src/models\";\nimport { WebPubSubClient } from \"../src/webPubSubClient\";\nimport { delay } from \"@azure/core-util\";\nimport { TestWebSocketClient } from \"./testWebSocketClient\";\nimport { WebPubSubJsonProtocol } from \"../src/protocols\";\nimport { getConnectedPayload } from \"./utils\";\nimport { AbortController } from \"@azure/abort-controller\";\nimport { SendMessageError } from \"../src/errors\";\n\ndescribe(\"WebPubSubClient\", function () {\n  describe(\"Start operation can only be execute when stopped\", () => {\n    it(\"throw error when it's not stopped\", async () => {\n      const client = new WebPubSubClient(\"wss://service.com\");\n      const testWs = new TestWebSocketClient(client);\n      makeStartable(testWs);\n      await client.start();\n      // dup start is forbidden\n      await expect(client.start()).to.be.rejectedWith(Error);\n      client.stop();\n    });\n  });\n\n  describe(\"Execute operation should obey the retry policy\", () => {\n    const tests = [\n      {\n        testName: \"join group\",\n        expectMessage: { kind: \"joinGroup\", group: \"groupName\", ackId: 2 } as JoinGroupMessage,\n        actualMethod: async (client: WebPubSubClient) =>\n          await client.joinGroup(\"groupName\", { ackId: 2 } as JoinGroupOptions),\n      },\n      {\n        testName: \"leave group\",\n        expectMessage: { kind: \"leaveGroup\", group: \"groupName\", ackId: 2 } as LeaveGroupMessage,\n        actualMethod: async (client: WebPubSubClient) =>\n          await client.leaveGroup(\"groupName\", { ackId: 2 } as JoinGroupOptions),\n      },\n      {\n        testName: \"send to group\",\n        expectMessage: {\n          kind: \"sendToGroup\",\n          group: \"groupName\",\n          ackId: 2,\n          dataType: \"text\",\n          data: \"xyz\",\n          noEcho: false,\n        } as SendToGroupMessage,\n        actualMethod: async (client: WebPubSubClient) =>\n          await client.sendToGroup(\"groupName\", \"xyz\", \"text\", { ackId: 2 }),\n      },\n      {\n        testName: \"send event\",\n        expectMessage: {\n          kind: \"sendEvent\",\n          event: \"sendEvent\",\n          ackId: 2,\n          dataType: \"text\",\n          data: \"xyz\",\n        } as SendEventMessage,\n        actualMethod: async (client: WebPubSubClient) =>\n          await client.sendEvent(\"sendEvent\", \"xyz\", \"text\", { ackId: 2 }),\n      },\n    ];\n\n    tests.forEach(({ testName, expectMessage, actualMethod }) => {\n      it(`Default policy ${testName}`, async () => {\n        // Change the initial delay to make the test fast\n        const client = new WebPubSubClient(\"wss://service.com\", {\n          messageRetryOptions: { retryDelayInMs: 10 } as WebPubSubRetryOptions,\n        } as WebPubSubClientOptions);\n        const mock = sinon.mock(client);\n        mock\n          .expects(\"_sendMessage\")\n          .exactly(4)\n          .withArgs(expectMessage)\n          .callsFake((_) => Promise.reject());\n        try {\n          await actualMethod(client);\n        } catch {}\n        mock.verify();\n      });\n    });\n\n    tests.forEach(({ testName, expectMessage, actualMethod }) => {\n      it(`Max try change to 5 ${testName}`, async () => {\n        // Change the initial delay to make the test fast\n        const client = new WebPubSubClient(\"wss://service.com\", {\n          messageRetryOptions: { retryDelayInMs: 10, maxRetries: 5 } as WebPubSubRetryOptions,\n        } as WebPubSubClientOptions);\n        const mock = sinon.mock(client);\n        mock\n          .expects(\"_sendMessage\")\n          .exactly(6)\n          .withArgs(expectMessage)\n          .callsFake((_) => Promise.reject());\n        try {\n          await actualMethod(client);\n        } catch {}\n        mock.verify();\n      });\n    });\n\n    tests.forEach(({ testName, expectMessage, actualMethod }) => {\n      it(`Succeed after twice retry ${testName}`, async () => {\n        // Change the initial delay to make the test fast\n        const client = new WebPubSubClient(\"wss://service.com\", {\n          messageRetryOptions: { retryDelayInMs: 10 } as WebPubSubRetryOptions,\n        } as WebPubSubClientOptions);\n        const mock = sinon.mock(client);\n        mock\n          .expects(\"_sendMessage\")\n          .exactly(2)\n          .withArgs(expectMessage)\n          .onFirstCall()\n          .returns(Promise.reject(new Error(\"failed\")))\n          .callsFake(() => {\n            client[\"_ackMap\"].get(2)!.resolve({ ackId: 2, isDuplicated: false } as WebPubSubResult);\n            return Promise.resolve();\n          });\n        try {\n          await actualMethod(client);\n        } catch {}\n        mock.verify();\n      });\n    });\n  });\n\n  describe(\"Client should obey abortSignal\", () => {\n    it(\"Abort when waiting ack\", async () => {\n      const client = new WebPubSubClient(\"wss://service.com\", {\n        messageRetryOptions: { maxRetries: 0 } as WebPubSubRetryOptions,\n      } as WebPubSubClientOptions);\n\n      const mock = sinon.mock(client);\n      mock\n        .expects(\"_sendMessage\")\n        .exactly(2)\n        .onFirstCall()\n        .callsFake(() => {\n          return Promise.resolve();\n        })\n        .onSecondCall()\n        .callsFake(() => {\n          client[\"_ackMap\"].get(1)!.resolve({ ackId: 1, isDuplicated: false } as WebPubSubResult);\n          return Promise.resolve();\n        });\n\n      const aborter = new AbortController();\n      const p = client.joinGroup(\"group\", {\n        ackId: 1,\n        abortSignal: aborter.signal,\n      } as JoinGroupOptions);\n      setTimeout(() => {\n        aborter.abort();\n      });\n      await expect(p).to.be.rejectedWith(SendMessageError);\n\n      // Retry with another non-abort operation should work\n      await client.joinGroup(\"group\", { ackId: 1 } as JoinGroupOptions);\n\n      mock.verify();\n    });\n  });\n\n  describe(\"Client can reconnect\", () => {\n    it(\"failed at the first time\", async () => {\n      const client = new WebPubSubClient(\"wss://service.com\");\n      const testWs = new TestWebSocketClient(client);\n\n      const pm = client.start();\n      testWs.invokeclose(1006);\n      await expect(pm).to.be.rejectedWith(Error);\n    });\n\n    it(\"reconnect if close before connected message\", async () => {\n      const client = new WebPubSubClient(\"wss://service.com\", {\n        reconnectRetryOptions: { retryDelayInMs: 10 } as WebPubSubRetryOptions,\n      } as WebPubSubClientOptions);\n      const testWs = new TestWebSocketClient(client);\n\n      const mock = sinon.mock(client);\n      mock.expects(\"_getWebSocketClientFactory\").thrice().callThrough();\n\n      const stub = sinon.stub(testWs, \"onopen\");\n      stub\n        .onFirstCall()\n        .callsFake((...args) => {\n          setTimeout(() => {\n            stub.wrappedMethod.call(testWs, ...args);\n            testWs.invokeopen.call(testWs);\n          });\n        })\n        .onSecondCall()\n        .callsFake((...args) => {\n          setTimeout(() => {\n            stub.wrappedMethod.call(testWs, ...args);\n            testWs.invokeclose.call(testWs, 1006);\n          });\n        })\n        .callsFake((...args) => {\n          setTimeout(() => {\n            console.log(\"called more than 2\");\n            stub.wrappedMethod.call(testWs, ...args);\n            testWs.invokeopen.call(testWs);\n          });\n        });\n\n      await client.start();\n      testWs.invokeclose(1006);\n      await delay(100);\n      mock.verify();\n      client.stop();\n    });\n\n    it(\"reconnect if not reliable protocol and connected should emit once per connection\", async () => {\n      const client = new WebPubSubClient(\"wss://service.com\", {\n        protocol: WebPubSubJsonProtocol(),\n        reconnectRetryOptions: { retryDelayInMs: 10 } as WebPubSubRetryOptions,\n      } as WebPubSubClientOptions);\n      const testWs = new TestWebSocketClient(client);\n      makeStartable(testWs);\n\n      let conn: string;\n      client.on(\"connected\", (connected) => {\n        conn = connected.connectionId;\n      });\n\n      await client.start();\n      testWs.invokemessage(JSON.stringify(getConnectedPayload(\"conn\")));\n\n      await spinCheck(() => assert.equal(\"conn\", conn));\n\n      testWs.invokemessage(JSON.stringify(getConnectedPayload(\"conn2\")));\n      // connected should not happen again\n      await expect(spinCheck(() => assert.equal(\"conn2\", conn), 10, 3)).to.be.rejectedWith(Error);\n\n      // drop connection\n      testWs.invokeclose(1006);\n      await spinCheck(() => testWs.openTime === 2);\n      testWs.invokemessage(JSON.stringify(getConnectedPayload(\"conn2\")));\n      await spinCheck(() => assert.equal(\"conn2\", conn));\n    });\n\n    it(\"recover if using reliable protocol\", async () => {\n      const client = new WebPubSubClient(\"wss://service.com\", {\n        reconnectRetryOptions: { retryDelayInMs: 10 } as WebPubSubRetryOptions,\n      } as WebPubSubClientOptions);\n      const testWs = new TestWebSocketClient(client);\n      makeStartable(testWs);\n\n      let conn: string;\n      client.on(\"connected\", (connected) => {\n        conn = connected.connectionId;\n      });\n\n      await client.start();\n      testWs.invokemessage(JSON.stringify(getConnectedPayload(\"conn\", \"reconToken\")));\n\n      await spinCheck(() => assert.equal(\"conn\", conn));\n\n      testWs.invokemessage(JSON.stringify(getConnectedPayload(\"conn2\", \"reconToken\")));\n      // connected should not happen again\n      await expect(spinCheck(() => assert.equal(\"conn2\", conn), 10, 3)).to.be.rejectedWith(Error);\n\n      // drop connection\n      testWs.invokeclose(1006);\n      await spinCheck(() => testWs.openTime === 2);\n\n      // after recover, connected should be emit again\n      await expect(spinCheck(() => assert.equal(\"conn2\", conn), 10, 3)).to.be.rejectedWith(Error);\n    });\n\n    it(\"recover shouldn't work for 1008 close\", async () => {\n      const client = new WebPubSubClient(\"wss://service.com\", {\n        reconnectRetryOptions: { retryDelayInMs: 10 } as WebPubSubRetryOptions,\n      } as WebPubSubClientOptions);\n      const testWs = new TestWebSocketClient(client);\n      makeStartable(testWs);\n\n      let conn: string;\n      client.on(\"connected\", (connected) => {\n        conn = connected.connectionId;\n      });\n\n      await client.start();\n      testWs.invokemessage(JSON.stringify(getConnectedPayload(\"conn\")));\n\n      await spinCheck(() => assert.equal(\"conn\", conn));\n\n      testWs.invokemessage(JSON.stringify(getConnectedPayload(\"conn2\")));\n      // connected should not happen again\n      await expect(spinCheck(() => assert.equal(\"conn2\", conn), 10, 3)).to.be.rejectedWith(Error);\n\n      // drop connection\n      testWs.invokeclose(1008);\n      await spinCheck(() => testWs.openTime === 2);\n      testWs.invokemessage(JSON.stringify(getConnectedPayload(\"conn2\")));\n      await spinCheck(() => assert.equal(\"conn2\", conn));\n    });\n\n    it(\"rejoin group after reconnection\", async () => {\n      const client = new WebPubSubClient(\"wss://service.com\", {\n        protocol: WebPubSubJsonProtocol(),\n        reconnectRetryOptions: { retryDelayInMs: 10 } as WebPubSubRetryOptions,\n      } as WebPubSubClientOptions);\n      const mock = sinon.mock(client);\n      mock\n        .expects(\"_joinGroupCore\")\n        .exactly(4)\n        .callsFake((_) => Promise.resolve());\n\n      const testWs = new TestWebSocketClient(client);\n      makeStartable(testWs);\n\n      let conn: string;\n      client.on(\"connected\", (connected) => {\n        conn = connected.connectionId;\n      });\n\n      await client.start();\n      testWs.invokemessage(JSON.stringify(getConnectedPayload(\"conn\")));\n\n      await spinCheck(() => assert.equal(\"conn\", conn));\n\n      // join 2 groups first\n      await client.joinGroup(\"a\");\n      await client.joinGroup(\"b\");\n\n      // drop connection\n      testWs.invokeclose(1006);\n      await spinCheck(() => testWs.openTime === 2);\n      testWs.invokemessage(JSON.stringify(getConnectedPayload(\"conn2\")));\n      await spinCheck(() => assert.equal(\"conn2\", conn));\n\n      mock.verify();\n    });\n\n    it(\"rejoin group after reconnection can be disabled\", async () => {\n      const client = new WebPubSubClient(\"wss://service.com\", {\n        protocol: WebPubSubJsonProtocol(),\n        reconnectRetryOptions: { retryDelayInMs: 10 } as WebPubSubRetryOptions,\n        autoRejoinGroups: false,\n      } as WebPubSubClientOptions);\n      const mock = sinon.mock(client);\n      mock\n        .expects(\"_joinGroupCore\")\n        .exactly(2)\n        .callsFake((_) => Promise.resolve());\n\n      const testWs = new TestWebSocketClient(client);\n      makeStartable(testWs);\n\n      let conn: string;\n      client.on(\"connected\", (connected) => {\n        conn = connected.connectionId;\n      });\n\n      await client.start();\n      testWs.invokemessage(JSON.stringify(getConnectedPayload(\"conn\")));\n\n      await spinCheck(() => assert.equal(\"conn\", conn));\n\n      // join 2 groups first\n      await client.joinGroup(\"a\");\n      await client.joinGroup(\"b\");\n\n      // drop connection\n      testWs.invokeclose(1006);\n      await spinCheck(() => testWs.openTime === 2);\n      testWs.invokemessage(JSON.stringify(getConnectedPayload(\"conn2\")));\n      await spinCheck(() => assert.equal(\"conn2\", conn));\n\n      mock.verify();\n    });\n  });\n\n  describe(\"WebPubSubClient handle messages\", () => {\n    it(\"Handle a list of messages\", async () => {\n      const client = new WebPubSubClient(\"wss://service.com\");\n      const testWs = new TestWebSocketClient(client);\n      makeStartable(testWs);\n\n      const mock = sinon.mock(client[\"_protocol\"]);\n      mock\n        .expects(\"parseMessages\")\n        .returns([\n          { kind: \"serverData\", data: \"a\", dataType: \"text\" } as ServerDataMessage,\n          { kind: \"serverData\", data: \"b\", dataType: \"text\" } as ServerDataMessage,\n        ]);\n\n      const callback = sinon.spy();\n      client.on(\"server-message\", callback);\n      await client.start();\n\n      // invoke any data as we mocked parseMessages\n      testWs.invokemessage(\"a\");\n\n      assert.equal(2, callback.callCount);\n      client.stop();\n    });\n\n    it(\"Quick sequence ack if diff more than limit\", async () => {\n      const client = new WebPubSubClient(\"wss://service.com\");\n      const testWs = new TestWebSocketClient(client);\n      makeStartable(testWs);\n\n      const mock = sinon.mock(client[\"_protocol\"]);\n      mock.expects(\"parseMessages\").returns([\n        { kind: \"serverData\", data: \"a\", dataType: \"text\", sequenceId: 1 } as ServerDataMessage,\n        { kind: \"serverData\", data: \"a\", dataType: \"text\", sequenceId: 302 } as ServerDataMessage, // semilate we got 300 messages\n      ]);\n\n      const writeMessageSpy = sinon.spy(client[\"_protocol\"], \"writeMessage\");\n\n      await client.start();\n      // invoke any data as we mocked parseMessages\n      testWs.invokemessage(\"a\");\n\n      // expect quick sequenceAck message\n      sinon.assert.calledWith(\n        writeMessageSpy,\n        sinon.match.has(\"kind\", \"sequenceAck\").and(sinon.match.has(\"sequenceId\", 302)),\n      );\n      mock.verify();\n      client.stop();\n    });\n  });\n\n  function makeStartable(ws: TestWebSocketClient): sinon.SinonStub<[fn: () => void], void> {\n    const stub = sinon.stub(ws, \"onopen\");\n    stub.onFirstCall().callsFake((...args) => {\n      setTimeout(() => {\n        stub.wrappedMethod.call(ws, ...args);\n        ws.invokeopen.call(ws);\n      });\n    });\n    return stub;\n  }\n\n  async function spinCheck(fn: () => void, intervalInMs?: number, maxTry?: number): Promise<void> {\n    if (!intervalInMs) {\n      intervalInMs = 10;\n    }\n    if (!maxTry) {\n      maxTry = 100;\n    }\n\n    let tryCount = 0;\n    while (tryCount < maxTry) {\n      try {\n        fn();\n        return;\n      } catch (err) {\n        tryCount++;\n        if (tryCount >= maxTry) {\n          throw err;\n        }\n        await delay(intervalInMs);\n      }\n    }\n  }\n});\n"]}