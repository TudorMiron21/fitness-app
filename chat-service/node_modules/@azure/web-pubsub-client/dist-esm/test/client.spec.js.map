{"version":3,"file":"client.spec.js","sourceRoot":"","sources":["../../test/client.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAEnD,OAAO,EAAE,qBAAqB,EAAE,MAAM,kBAAkB,CAAC;AACzD,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAC;AAGzD,QAAQ,CAAC,iBAAiB,EAAE;IAC1B,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAClD,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE;gBACvB,IAAI,eAAe,CAAC,mBAAmB,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE;gBACvB,IAAI,eAAe,CAAC;oBAClB,kBAAkB,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,mBAAmB;iBACxB,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;YACtB,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE;gBACvB,IAAI,eAAe,CACjB,EAAE,kBAAkB,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,mBAAmB,EAA+B,EACrF,EAAE,QAAQ,EAAE,qBAAqB,EAAE,EAAE,aAAa,EAAE,KAAK,EAA4B,CACtF,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAC7B,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE;gBACvB,MAAM,MAAM,GAAG,IAAI,eAAe,CAChC,EAAE,kBAAkB,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,mBAAmB,EAA+B,EACrF,EAAE,aAAa,EAAE,KAAK,EAA4B,CACnD,CAAC;gBACF,MAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;gBACrC,MAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAChE,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;gBACnC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE;gBACvB,MAAM,MAAM,GAAG,IAAI,eAAe,CAChC,EAAE,kBAAkB,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,mBAAmB,EAA+B,EACrF,EAA4B,CAC7B,CAAC;gBACF,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;gBACnC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,6DAA6D;YAC7D,aAAa;YACb,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,EAAE,kBAAkB,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;YAC9F,MAAM,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { assert, expect } from \"@azure/test-utils\";\nimport { WebPubSubClientOptions } from \"../src/models\";\nimport { WebPubSubJsonProtocol } from \"../src/protocols\";\nimport { WebPubSubClient } from \"../src/webPubSubClient\";\nimport { WebPubSubClientCredential } from \"../src/webPubSubClientCredential\";\n\ndescribe(\"WebPubSubClient\", function () {\n  describe(\"Construct a new client and options\", () => {\n    it(\"takes a client access url\", () => {\n      assert.doesNotThrow(() => {\n        new WebPubSubClient(\"wss://service.com\");\n      });\n    });\n\n    it(\"take client access url as func\", () => {\n      assert.doesNotThrow(() => {\n        new WebPubSubClient({\n          getClientAccessUrl: async (_) => \"wss://service.com\",\n        } as WebPubSubClientCredential);\n      });\n    });\n\n    it(\"take options\", () => {\n      assert.doesNotThrow(() => {\n        new WebPubSubClient(\n          { getClientAccessUrl: async (_) => \"wss://service.com\" } as WebPubSubClientCredential,\n          { protocol: WebPubSubJsonProtocol(), autoReconnect: false } as WebPubSubClientOptions,\n        );\n      });\n    });\n\n    it(\"protocol is missing\", () => {\n      assert.doesNotThrow(() => {\n        const client = new WebPubSubClient(\n          { getClientAccessUrl: async (_) => \"wss://service.com\" } as WebPubSubClientCredential,\n          { autoReconnect: false } as WebPubSubClientOptions,\n        );\n        const protocol = client[\"_protocol\"];\n        assert.equal(\"json.reliable.webpubsub.azure.v1\", protocol.name);\n        const options = client[\"_options\"];\n        assert.isFalse(options.autoReconnect);\n      });\n    });\n\n    it(\"reconnectionOptions is missing\", () => {\n      assert.doesNotThrow(() => {\n        const client = new WebPubSubClient(\n          { getClientAccessUrl: async (_) => \"wss://service.com\" } as WebPubSubClientCredential,\n          {} as WebPubSubClientOptions,\n        );\n        const options = client[\"_options\"];\n        assert.isTrue(options.autoReconnect);\n      });\n    });\n\n    it(\"client start with a non-string client url\", async () => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const client = new WebPubSubClient({ getClientAccessUrl: async (_) => new { obj: \"val\" }() });\n      await expect(client.start()).to.be.rejectedWith(Error);\n    });\n  });\n});\n"]}