{"version":3,"file":"jsonProtocol.spec.js","sourceRoot":"","sources":["../../test/jsonProtocol.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { assert } from \"@azure/test-utils\";\nimport {\n  AckMessage,\n  ConnectedMessage,\n  DisconnectedMessage,\n  GroupDataMessage,\n  JoinGroupMessage,\n  LeaveGroupMessage,\n  SendEventMessage,\n  SendToGroupMessage,\n  SequenceAckMessage,\n  ServerDataMessage,\n  WebPubSubMessage,\n} from \"../src/models\";\nimport { WebPubSubJsonReliableProtocol } from \"../src/protocols\";\n\ndescribe(\"JsonProtocol\", function () {\n  const protocol = WebPubSubJsonReliableProtocol();\n\n  describe(\"WriteMessage upstream messages\", () => {\n    const tests = [\n      {\n        testName: \"JoinGroup1\",\n        message: { kind: \"joinGroup\", group: \"group\" } as JoinGroupMessage,\n        payload: { type: \"joinGroup\", group: \"group\" },\n      },\n      {\n        testName: \"JoinGroup2\",\n        message: { kind: \"joinGroup\", group: \"group\", ackId: 44133 } as JoinGroupMessage,\n        payload: { type: \"joinGroup\", group: \"group\", ackId: 44133 },\n      },\n      {\n        testName: \"leaveGroup1\",\n        message: { kind: \"leaveGroup\", group: \"group\" } as LeaveGroupMessage,\n        payload: { type: \"leaveGroup\", group: \"group\" },\n      },\n      {\n        testName: \"leaveGroup2\",\n        message: { kind: \"leaveGroup\", group: \"group\", ackId: 12345 } as LeaveGroupMessage,\n        payload: { type: \"leaveGroup\", group: \"group\", ackId: 12345 },\n      },\n      {\n        testName: \"sendToGroup1\",\n        message: {\n          kind: \"sendToGroup\",\n          group: \"group\",\n          data: \"xzy\",\n          dataType: \"text\",\n        } as SendToGroupMessage,\n        payload: { type: \"sendToGroup\", group: \"group\", dataType: \"text\", data: \"xzy\" },\n      },\n      {\n        testName: \"sendToGroup2\",\n        message: {\n          kind: \"sendToGroup\",\n          group: \"group\",\n          data: { value: \"xzy\" },\n          dataType: \"json\",\n          ackId: 12345,\n          noEcho: true,\n        } as SendToGroupMessage,\n        payload: {\n          type: \"sendToGroup\",\n          group: \"group\",\n          dataType: \"json\",\n          data: { value: \"xzy\" },\n          ackId: 12345,\n          noEcho: true,\n        },\n      },\n      {\n        testName: \"sendToGroup3\",\n        message: {\n          kind: \"sendToGroup\",\n          group: \"group\",\n          data: new TextEncoder().encode(\"xyz\").buffer,\n          dataType: \"binary\",\n          ackId: 12345,\n          noEcho: true,\n        } as SendToGroupMessage,\n        payload: {\n          type: \"sendToGroup\",\n          group: \"group\",\n          dataType: \"binary\",\n          data: \"eHl6\",\n          ackId: 12345,\n          noEcho: true,\n        },\n      },\n      {\n        testName: \"sendToGroup4\",\n        message: {\n          kind: \"sendToGroup\",\n          group: \"group\",\n          data: new TextEncoder().encode(\"xyz\").buffer,\n          dataType: \"protobuf\",\n          ackId: 12345,\n          noEcho: true,\n        } as SendToGroupMessage,\n        payload: {\n          type: \"sendToGroup\",\n          group: \"group\",\n          dataType: \"protobuf\",\n          data: \"eHl6\",\n          ackId: 12345,\n          noEcho: true,\n        },\n      },\n      {\n        testName: \"sendEvent1\",\n        message: {\n          kind: \"sendEvent\",\n          event: \"event\",\n          data: \"xzy\",\n          dataType: \"text\",\n        } as SendEventMessage,\n        payload: { type: \"event\", event: \"event\", dataType: \"text\", data: \"xzy\" },\n      },\n      {\n        testName: \"sendEvent2\",\n        message: {\n          kind: \"sendEvent\",\n          event: \"event\",\n          data: { value: \"xzy\" },\n          dataType: \"json\",\n          ackId: 12345,\n        } as SendEventMessage,\n        payload: {\n          type: \"event\",\n          event: \"event\",\n          dataType: \"json\",\n          data: { value: \"xzy\" },\n          ackId: 12345,\n        },\n      },\n      {\n        testName: \"sendEvent3\",\n        message: {\n          kind: \"sendEvent\",\n          event: \"event\",\n          data: new TextEncoder().encode(\"xyz\").buffer,\n          dataType: \"binary\",\n          ackId: 12345,\n        } as SendEventMessage,\n        payload: { type: \"event\", event: \"event\", dataType: \"binary\", data: \"eHl6\", ackId: 12345 },\n      },\n      {\n        testName: \"sendEvent4\",\n        message: {\n          kind: \"sendEvent\",\n          event: \"event\",\n          data: new TextEncoder().encode(\"xyz\").buffer,\n          dataType: \"protobuf\",\n          ackId: 12345,\n        } as SendEventMessage,\n        payload: {\n          type: \"event\",\n          event: \"event\",\n          dataType: \"protobuf\",\n          data: \"eHl6\",\n          ackId: 12345,\n        },\n      },\n      {\n        testName: \"seqAck1\",\n        message: { kind: \"sequenceAck\", sequenceId: 123456 } as SequenceAckMessage,\n        payload: { type: \"sequenceAck\", sequenceId: 123456 },\n      },\n    ];\n\n    tests.forEach(({ testName, message, payload }) => {\n      it(`write message test ${testName}`, () => {\n        const writeMessage = protocol.writeMessage(message) as string;\n        assert.deepEqual(JSON.parse(writeMessage), payload);\n      });\n    });\n  });\n\n  describe(\"Parse downstream messages\", () => {\n    const tests = [\n      {\n        testName: \"ack1\",\n        message: { type: \"ack\", ackId: 123, success: true },\n        assertFunc: (msg: WebPubSubMessage) => {\n          assert.equal(msg.kind, \"ack\");\n          msg = msg as AckMessage;\n          assert.equal(msg.ackId, 123);\n          assert.equal(msg.success, true);\n          assert.isUndefined(msg.error);\n        },\n      },\n      {\n        testName: \"ack2\",\n        message: {\n          type: \"ack\",\n          ackId: 123,\n          success: false,\n          error: { name: \"Forbidden\", message: \"message\" },\n        },\n        assertFunc: (msg: WebPubSubMessage) => {\n          assert.equal(msg.kind, \"ack\");\n          msg = msg as AckMessage;\n          assert.equal(msg.ackId, 123);\n          assert.equal(msg.success, false);\n          assert.equal(msg.error!.name, \"Forbidden\");\n          assert.equal(msg.error!.message, \"message\");\n        },\n      },\n      {\n        testName: \"group1\",\n        message: {\n          sequenceId: 12345,\n          type: \"message\",\n          from: \"group\",\n          group: \"groupName\",\n          dataType: \"text\",\n          data: \"xyz\",\n          fromUserId: \"user\",\n        },\n        assertFunc: (msg: WebPubSubMessage) => {\n          assert.equal(msg.kind, \"groupData\");\n          msg = msg as GroupDataMessage;\n          assert.equal(msg.group, \"groupName\");\n          assert.equal(msg.sequenceId, 12345);\n          assert.equal(msg.dataType, \"text\");\n          assert.equal(msg.data, \"xyz\");\n          assert.equal(msg.fromUserId, \"user\");\n        },\n      },\n      {\n        testName: \"group2\",\n        message: {\n          type: \"message\",\n          from: \"group\",\n          group: \"groupName\",\n          dataType: \"json\",\n          data: { value: \"xyz\" },\n          fromUserId: \"user\",\n        },\n        assertFunc: (msg: WebPubSubMessage) => {\n          assert.equal(msg.kind, \"groupData\");\n          msg = msg as GroupDataMessage;\n          assert.equal(msg.group, \"groupName\");\n          assert.isUndefined(msg.sequenceId);\n          assert.equal(msg.dataType, \"json\");\n          assert.deepEqual(msg.data, { value: \"xyz\" });\n          assert.equal(msg.fromUserId, \"user\");\n        },\n      },\n      {\n        testName: \"group3\",\n        message: {\n          type: \"message\",\n          from: \"group\",\n          group: \"groupName\",\n          dataType: \"binary\",\n          data: \"eHl6\",\n          fromUserId: \"user\",\n        },\n        assertFunc: (msg: WebPubSubMessage) => {\n          assert.equal(msg.kind, \"groupData\");\n          msg = msg as GroupDataMessage;\n          assert.equal(msg.group, \"groupName\");\n          assert.isUndefined(msg.sequenceId);\n          assert.equal(msg.dataType, \"binary\");\n          assert.equal(new TextDecoder().decode(msg.data as ArrayBuffer), \"xyz\");\n          assert.equal(msg.fromUserId, \"user\");\n        },\n      },\n      {\n        testName: \"group4\",\n        message: {\n          type: \"message\",\n          from: \"group\",\n          group: \"groupName\",\n          dataType: \"protobuf\",\n          data: \"eHl6\",\n          fromUserId: \"user\",\n        },\n        assertFunc: (msg: WebPubSubMessage) => {\n          assert.equal(msg.kind, \"groupData\");\n          msg = msg as GroupDataMessage;\n          assert.equal(msg.group, \"groupName\");\n          assert.isUndefined(msg.sequenceId);\n          assert.equal(msg.dataType, \"protobuf\");\n          assert.equal(new TextDecoder().decode(msg.data as ArrayBuffer), \"xyz\");\n          assert.equal(msg.fromUserId, \"user\");\n        },\n      },\n      {\n        testName: \"event1\",\n        message: {\n          sequenceId: 12345,\n          type: \"message\",\n          from: \"server\",\n          dataType: \"text\",\n          data: \"xyz\",\n        },\n        assertFunc: (msg: WebPubSubMessage) => {\n          assert.equal(msg.kind, \"serverData\");\n          msg = msg as ServerDataMessage;\n          assert.equal(msg.sequenceId, 12345);\n          assert.equal(msg.dataType, \"text\");\n          assert.equal(msg.data, \"xyz\");\n        },\n      },\n      {\n        testName: \"event2\",\n        message: { type: \"message\", from: \"server\", dataType: \"json\", data: { value: \"xyz\" } },\n        assertFunc: (msg: WebPubSubMessage) => {\n          assert.equal(msg.kind, \"serverData\");\n          msg = msg as ServerDataMessage;\n          assert.isUndefined(msg.sequenceId);\n          assert.equal(msg.dataType, \"json\");\n          assert.deepEqual(msg.data, { value: \"xyz\" });\n        },\n      },\n      {\n        testName: \"event3\",\n        message: { type: \"message\", from: \"server\", dataType: \"binary\", data: \"eHl6\" },\n        assertFunc: (msg: WebPubSubMessage) => {\n          assert.equal(msg.kind, \"serverData\");\n          msg = msg as ServerDataMessage;\n          assert.isUndefined(msg.sequenceId);\n          assert.equal(msg.dataType, \"binary\");\n          assert.equal(new TextDecoder().decode(msg.data as ArrayBuffer), \"xyz\");\n        },\n      },\n      {\n        testName: \"event4\",\n        message: { type: \"message\", from: \"server\", dataType: \"protobuf\", data: \"eHl6\" },\n        assertFunc: (msg: WebPubSubMessage) => {\n          assert.equal(msg.kind, \"serverData\");\n          msg = msg as ServerDataMessage;\n          assert.isUndefined(msg.sequenceId);\n          assert.equal(msg.dataType, \"protobuf\");\n          assert.equal(new TextDecoder().decode(msg.data as ArrayBuffer), \"xyz\");\n        },\n      },\n      {\n        testName: \"system1\",\n        message: { type: \"system\", event: \"connected\", userId: \"user\", connectionId: \"connection\" },\n        assertFunc: (msg: WebPubSubMessage) => {\n          assert.equal(msg.kind, \"connected\");\n          msg = msg as ConnectedMessage;\n          assert.equal(msg.userId, \"user\");\n          assert.equal(msg.connectionId, \"connection\");\n          assert.isUndefined(msg.reconnectionToken);\n        },\n      },\n      {\n        testName: \"system2\",\n        message: {\n          type: \"system\",\n          event: \"connected\",\n          userId: \"user\",\n          connectionId: \"connection\",\n          reconnectionToken: \"rec\",\n        },\n        assertFunc: (msg: WebPubSubMessage) => {\n          assert.equal(msg.kind, \"connected\");\n          msg = msg as ConnectedMessage;\n          assert.equal(msg.userId, \"user\");\n          assert.equal(msg.connectionId, \"connection\");\n          assert.equal(msg.reconnectionToken, \"rec\");\n        },\n      },\n      {\n        testName: \"system3\",\n        message: { type: \"system\", event: \"disconnected\", message: \"msg\" },\n        assertFunc: (msg: WebPubSubMessage) => {\n          assert.equal(msg.kind, \"disconnected\");\n          msg = msg as DisconnectedMessage;\n          assert.equal(msg.message, \"msg\");\n        },\n      },\n    ];\n\n    tests.forEach(({ testName, message, assertFunc }) => {\n      it(`parse message test ${testName}`, () => {\n        const parsedMsg = protocol.parseMessages(JSON.stringify(message));\n        if (!Array.isArray(parsedMsg)) {\n          assertFunc(parsedMsg!);\n        } else {\n          throw new Error(\"should not be an array\");\n        }\n      });\n    });\n  });\n});\n"]}