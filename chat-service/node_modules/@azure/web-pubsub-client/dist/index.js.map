{"version":3,"file":"index.js","sources":["../src/errors/index.ts","../src/logger.ts","../src/protocols/jsonProtocolBase.ts","../src/protocols/webPubSubJsonProtocol.ts","../src/protocols/webPubSubJsonReliableProtocol.ts","../src/protocols/index.ts","../src/websocket/websocketClient.ts","../src/utils/abortablePromise.ts","../src/webPubSubClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AckMessageError } from \"../models/messages\";\n\n/**\n * Error when sending message failed\n */\nexport class SendMessageError extends Error {\n  /**\n   * Error name\n   */\n  public name: string;\n  /**\n   * The ack id of the message\n   */\n  public ackId?: number;\n  /**\n   * The error details from the service\n   */\n  public errorDetail?: AckMessageError;\n  /**\n   * Initialize a SendMessageError\n   * @param message - The error message\n   * @param ackMessage - The ack message\n   */\n  constructor(message: string, options: SendMessageErrorOptions) {\n    super(message);\n    this.name = \"SendMessageError\";\n    this.ackId = options.ackId;\n    this.errorDetail = options.errorDetail;\n  }\n}\n\nexport interface SendMessageErrorOptions {\n  /**\n   * The ack id of the message\n   */\n  ackId?: number;\n  /**\n   * The error details from the service\n   */\n  errorDetail?: AckMessageError;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The \\@azure\\/logger configuration for this package.\n */\nexport const logger = createClientLogger(\"web-pubsub-client\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AckMessage,\n  ConnectedMessage,\n  DisconnectedMessage,\n  GroupDataMessage,\n  ServerDataMessage,\n  WebPubSubDataType,\n  WebPubSubMessage,\n} from \"../models/messages\";\nimport { JSONTypes } from \"../webPubSubClient\";\nimport { Buffer } from \"buffer\";\n\nexport function parseMessages(input: string): WebPubSubMessage | null {\n  // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\n  if (typeof input !== \"string\") {\n    throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\n  }\n\n  if (!input) {\n    throw new Error(\"No input\");\n  }\n\n  const parsedMessage = JSON.parse(input);\n  const typedMessage = parsedMessage as { type: string; from: string; event: string };\n  let returnMessage: WebPubSubMessage;\n\n  if (typedMessage.type === \"system\") {\n    if (typedMessage.event === \"connected\") {\n      returnMessage = { ...parsedMessage, kind: \"connected\" } as ConnectedMessage;\n    } else if (typedMessage.event === \"disconnected\") {\n      returnMessage = { ...parsedMessage, kind: \"disconnected\" } as DisconnectedMessage;\n    } else {\n      // Forward compatible\n      return null;\n    }\n  } else if (typedMessage.type === \"message\") {\n    if (typedMessage.from === \"group\") {\n      const data = parsePayload(parsedMessage.data, parsedMessage.dataType as WebPubSubDataType);\n      if (data === null) {\n        return null;\n      }\n      returnMessage = { ...parsedMessage, data: data, kind: \"groupData\" } as GroupDataMessage;\n    } else if (typedMessage.from === \"server\") {\n      const data = parsePayload(parsedMessage.data, parsedMessage.dataType as WebPubSubDataType);\n      if (data === null) {\n        return null;\n      }\n      returnMessage = {\n        ...parsedMessage,\n        data: data,\n        kind: \"serverData\",\n      } as ServerDataMessage;\n    } else {\n      // Forward compatible\n      return null;\n    }\n  } else if (typedMessage.type === \"ack\") {\n    returnMessage = { ...parsedMessage, kind: \"ack\" } as AckMessage;\n  } else {\n    // Forward compatible\n    return null;\n  }\n  return returnMessage;\n}\n\nexport function writeMessage(message: WebPubSubMessage): string {\n  let data: any;\n  switch (message.kind) {\n    case \"joinGroup\": {\n      data = { type: \"joinGroup\", group: message.group, ackId: message.ackId } as JoinGroupData;\n      break;\n    }\n    case \"leaveGroup\": {\n      data = { type: \"leaveGroup\", group: message.group, ackId: message.ackId } as LeaveGroupData;\n      break;\n    }\n    case \"sendEvent\": {\n      data = {\n        type: \"event\",\n        event: message.event,\n        ackId: message.ackId,\n        dataType: message.dataType,\n        data: getPayload(message.data, message.dataType),\n      } as SendEventData;\n      break;\n    }\n    case \"sendToGroup\": {\n      data = {\n        type: \"sendToGroup\",\n        group: message.group,\n        ackId: message.ackId,\n        dataType: message.dataType,\n        data: getPayload(message.data, message.dataType),\n        noEcho: message.noEcho,\n      } as SendToGroupData;\n      break;\n    }\n    case \"sequenceAck\": {\n      data = { type: \"sequenceAck\", sequenceId: message.sequenceId } as SequenceAckData;\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported type: ${message.kind}`);\n    }\n  }\n\n  return JSON.stringify(data);\n}\n\ninterface JoinGroupData {\n  readonly type: \"joinGroup\";\n  group: string;\n  ackId?: number;\n}\n\ninterface LeaveGroupData {\n  readonly type: \"leaveGroup\";\n  group: string;\n  ackId?: number;\n}\n\ninterface SendToGroupData {\n  readonly type: \"sendToGroup\";\n  group: string;\n  ackId?: number;\n  dataType: WebPubSubDataType;\n  data: any;\n  noEcho: boolean;\n}\n\ninterface SendEventData {\n  readonly type: \"event\";\n  ackId?: number;\n  dataType: WebPubSubDataType;\n  data: any;\n  event: string;\n}\n\ninterface SequenceAckData {\n  readonly type: \"sequenceAck\";\n  sequenceId: number;\n}\n\nfunction getPayload(data: JSONTypes | ArrayBuffer, dataType: WebPubSubDataType): any {\n  switch (dataType) {\n    case \"text\": {\n      if (typeof data !== \"string\") {\n        throw new TypeError(\"Message must be a string.\");\n      }\n      return data;\n    }\n    case \"json\": {\n      return data;\n    }\n    case \"binary\":\n    case \"protobuf\": {\n      if (data instanceof ArrayBuffer) {\n        return Buffer.from(data).toString(\"base64\");\n      }\n      throw new TypeError(\"Message must be a ArrayBuffer\");\n    }\n  }\n}\n\nfunction parsePayload(data: any, dataType: string): JSONTypes | ArrayBuffer | null {\n  if (dataType === \"text\") {\n    if (typeof data !== \"string\") {\n      throw new TypeError(\"Message must be a string when dataType is text\");\n    }\n    return data as string;\n  } else if (dataType === \"json\") {\n    return data as JSONTypes;\n  } else if (dataType === \"binary\" || dataType === \"protobuf\") {\n    const buf = Buffer.from(data as string, \"base64\");\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength) as ArrayBuffer;\n  } else {\n    // Forward compatible\n    return null;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { WebPubSubClientProtocol } from \".\";\nimport { WebPubSubMessage } from \"../models/messages\";\nimport * as base from \"./jsonProtocolBase\";\n\n/**\n * The \"json.webpubsub.azure.v1\" protocol\n */\nexport class WebPubSubJsonProtocolImpl implements WebPubSubClientProtocol {\n  /**\n   * True if the protocol supports reliable features\n   */\n  public readonly isReliableSubProtocol = false;\n\n  /**\n   * The name of subprotocol. Name will be used in websocket subprotocol\n   */\n  public readonly name = \"json.webpubsub.azure.v1\";\n\n  /**\n   * Creates WebPubSubMessage objects from the specified serialized representation.\n   * @param input - The serialized representation\n   */\n  public parseMessages(input: string): WebPubSubMessage | null {\n    return base.parseMessages(input);\n  }\n\n  /**\n   * Write WebPubSubMessage to string\n   * @param message - The message to be written\n   */\n  public writeMessage(message: WebPubSubMessage): string {\n    return base.writeMessage(message);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { WebPubSubClientProtocol } from \".\";\nimport { WebPubSubMessage } from \"../models/messages\";\nimport * as base from \"./jsonProtocolBase\";\n\n/**\n * The \"json.reliable.webpubsub.azure.v1\" protocol\n */\nexport class WebPubSubJsonReliableProtocolImpl implements WebPubSubClientProtocol {\n  /**\n   * True if the protocol supports reliable features\n   */\n  public readonly isReliableSubProtocol = true;\n\n  /**\n   * The name of subprotocol. Name will be used in websocket subprotocol\n   */\n  public readonly name = \"json.reliable.webpubsub.azure.v1\";\n\n  /**\n   * Creates WebPubSubMessage objects from the specified serialized representation.\n   * @param input - The serialized representation\n   */\n  public parseMessages(input: string): WebPubSubMessage | null {\n    return base.parseMessages(input);\n  }\n\n  /**\n   * Write WebPubSubMessage to string\n   * @param message - The message to be written\n   */\n  public writeMessage(message: WebPubSubMessage): string {\n    return base.writeMessage(message);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { WebPubSubMessage } from \"../models/messages\";\nimport { WebPubSubJsonProtocolImpl } from \"./webPubSubJsonProtocol\";\nimport { WebPubSubJsonReliableProtocolImpl } from \"./webPubSubJsonReliableProtocol\";\n\n/**\n * The interface to be implemented for a web pubsub subprotocol\n */\nexport interface WebPubSubClientProtocol {\n  /**\n   * The name of subprotocol. Name will be used in websocket subprotocol\n   */\n  readonly name: string;\n\n  /**\n   * True if the protocol supports reliable features\n   */\n  readonly isReliableSubProtocol: boolean;\n\n  /**\n   * Creates WebPubSubMessage objects from the specified serialized representation.\n   * @param input - The serialized representation\n   */\n  parseMessages(input: string | ArrayBuffer | Buffer): WebPubSubMessage[] | WebPubSubMessage | null;\n\n  /**\n   * Write WebPubSubMessage to string or ArrayBuffer\n   * @param message - The message to be written\n   */\n  writeMessage(message: WebPubSubMessage): string | ArrayBuffer;\n}\n\n/**\n * Return the \"json.webpubsub.azure.v1\" protocol\n */\nexport const WebPubSubJsonProtocol = (): WebPubSubClientProtocol => {\n  return new WebPubSubJsonProtocolImpl();\n};\n\n/**\n * Return the \"json.reliable.webpubsub.azure.v1\" protocol\n */\nexport const WebPubSubJsonReliableProtocol = (): WebPubSubClientProtocol => {\n  return new WebPubSubJsonReliableProtocolImpl();\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport WebSocket, { CloseEvent, MessageEvent, ErrorEvent } from \"ws\";\nimport { WebSocketClientLike, WebSocketClientFactoryLike } from \"./websocketClientLike\";\n\nexport class WebSocketClient implements WebSocketClientLike {\n  private _socket: WebSocket;\n\n  public constructor(uri: string, protocolName: string) {\n    this._socket = new WebSocket(uri, protocolName);\n    this._socket.binaryType = \"arraybuffer\";\n  }\n\n  onopen(fn: () => void): void {\n    this._socket.onopen = fn;\n  }\n\n  onclose(fn: (code: number, reason: string) => void): void {\n    this._socket.onclose = (event: CloseEvent) => fn(event.code, event.reason);\n  }\n\n  onerror(fn: (error: any) => void): void {\n    this._socket.onerror = (event: ErrorEvent) => fn(event.error);\n  }\n\n  onmessage(fn: (data: string | Buffer | ArrayBuffer | Buffer[]) => void): void {\n    this._socket.onmessage = (event: MessageEvent) => fn(event.data);\n  }\n\n  close(code?: number, reason?: string): void {\n    this._socket.close(code, reason);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  send(data: any, _?: AbortSignalLike): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this._socket.send(data, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  isOpen(): boolean {\n    return this._socket.readyState === WebSocket.OPEN;\n  }\n}\n\nexport class WebSocketClientFactory implements WebSocketClientFactoryLike {\n  public create(uri: string, protocolName: string): WebSocketClient {\n    return new WebSocketClient(uri, protocolName);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError, AbortSignalLike } from \"@azure/abort-controller\";\n\nexport async function abortablePromise<T>(\n  promise: Promise<T>,\n  signal: AbortSignalLike,\n): Promise<T> {\n  if (signal.aborted) {\n    throw new AbortError(\"The operation was aborted.\");\n  }\n\n  let onAbort: () => void;\n  // eslint-disable-next-line promise/param-names\n  const p = new Promise<T>((_, reject) => {\n    onAbort = (): void => {\n      reject(new AbortError(\"The operation was aborted.\"));\n    };\n\n    signal.addEventListener(\"abort\", onAbort);\n  });\n\n  try {\n    return await Promise.race([promise, p]);\n  } finally {\n    signal.removeEventListener(\"abort\", onAbort!);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortController, AbortSignalLike } from \"@azure/abort-controller\";\nimport { delay } from \"@azure/core-util\";\nimport EventEmitter from \"events\";\nimport { SendMessageError, SendMessageErrorOptions } from \"./errors\";\nimport { logger } from \"./logger\";\nimport {\n  WebPubSubResult,\n  JoinGroupOptions,\n  LeaveGroupOptions,\n  OnConnectedArgs,\n  OnDisconnectedArgs,\n  OnGroupDataMessageArgs,\n  OnServerDataMessageArgs,\n  OnStoppedArgs,\n  WebPubSubRetryOptions,\n  SendToGroupOptions,\n  SendEventOptions,\n  WebPubSubClientOptions,\n  OnRejoinGroupFailedArgs,\n  StartOptions,\n  GetClientAccessUrlOptions,\n} from \"./models\";\nimport {\n  ConnectedMessage,\n  DisconnectedMessage,\n  GroupDataMessage,\n  ServerDataMessage,\n  WebPubSubDataType,\n  WebPubSubMessage,\n  JoinGroupMessage,\n  LeaveGroupMessage,\n  SendToGroupMessage,\n  SendEventMessage,\n  AckMessage,\n  SequenceAckMessage,\n} from \"./models/messages\";\nimport { WebPubSubClientProtocol, WebPubSubJsonReliableProtocol } from \"./protocols\";\nimport { WebPubSubClientCredential } from \"./webPubSubClientCredential\";\nimport { WebSocketClientFactory } from \"./websocket/websocketClient\";\nimport { WebSocketClientFactoryLike, WebSocketClientLike } from \"./websocket/websocketClientLike\";\nimport { abortablePromise } from \"./utils/abortablePromise\";\n\nenum WebPubSubClientState {\n  Stopped = \"Stopped\",\n  Disconnected = \"Disconnected\",\n  Connecting = \"Connecting\",\n  Connected = \"Connected\",\n  Recovering = \"Recovering\",\n}\n\n/**\n * Types which can be serialized and sent as JSON.\n */\nexport type JSONTypes = string | number | boolean | object;\n\n/**\n * The WebPubSub client\n */\nexport class WebPubSubClient {\n  private readonly _protocol: WebPubSubClientProtocol;\n  private readonly _credential: WebPubSubClientCredential;\n  private readonly _options: WebPubSubClientOptions;\n  private readonly _groupMap: Map<string, WebPubSubGroup>;\n  private readonly _ackMap: Map<number, AckEntity>;\n  private readonly _sequenceId: SequenceId;\n  private readonly _messageRetryPolicy: RetryPolicy;\n  private readonly _reconnectRetryPolicy: RetryPolicy;\n  private readonly _quickSequenceAckDiff = 300;\n  private readonly _activeTimeoutInMs = 20000;\n\n  private readonly _emitter: EventEmitter = new EventEmitter();\n  private _state: WebPubSubClientState;\n  private _isStopping: boolean = false;\n  private _ackId: number;\n  private _activeKeepaliveTask: AbortableTask | undefined;\n\n  // connection lifetime\n  private _wsClient?: WebSocketClientLike;\n  private _uri?: string;\n  private _lastCloseEvent?: { code: number; reason: string };\n  private _lastDisconnectedMessage?: DisconnectedMessage;\n  private _connectionId?: string;\n  private _reconnectionToken?: string;\n  private _isInitialConnected = false;\n  private _sequenceAckTask?: AbortableTask;\n\n  private nextAckId(): number {\n    this._ackId = this._ackId + 1;\n    return this._ackId;\n  }\n\n  /**\n   * Create an instance of WebPubSubClient\n   * @param clientAccessUrl - The uri to connect\n   * @param options - The client options\n   */\n  constructor(clientAccessUrl: string, options?: WebPubSubClientOptions);\n  /**\n   * Create an instance of WebPubSubClient\n   * @param credential - The credential to use when connecting\n   * @param options - The client options\n   */\n  constructor(credential: WebPubSubClientCredential, options?: WebPubSubClientOptions);\n  constructor(credential: string | WebPubSubClientCredential, options?: WebPubSubClientOptions) {\n    if (typeof credential === \"string\") {\n      this._credential = { getClientAccessUrl: credential } as WebPubSubClientCredential;\n    } else {\n      this._credential = credential;\n    }\n\n    if (options == null) {\n      options = {};\n    }\n    this._buildDefaultOptions(options);\n    this._options = options;\n\n    this._messageRetryPolicy = new RetryPolicy(this._options.messageRetryOptions!);\n    this._reconnectRetryPolicy = new RetryPolicy(this._options.reconnectRetryOptions!);\n\n    this._protocol = this._options.protocol!;\n    this._groupMap = new Map<string, WebPubSubGroup>();\n    this._ackMap = new Map<number, AckEntity>();\n    this._sequenceId = new SequenceId();\n\n    this._state = WebPubSubClientState.Stopped;\n    this._ackId = 0;\n  }\n\n  /**\n   * Start to start to the service.\n   * @param abortSignal - The abort signal\n   */\n  public async start(options?: StartOptions): Promise<void> {\n    if (this._isStopping) {\n      throw new Error(\"Can't start a client during stopping\");\n    }\n\n    if (this._state !== WebPubSubClientState.Stopped) {\n      throw new Error(\"Client can be only started when it's Stopped\");\n    }\n\n    let abortSignal: AbortSignalLike | undefined;\n    if (options) {\n      abortSignal = options.abortSignal;\n    }\n\n    if (!this._activeKeepaliveTask) {\n      this._activeKeepaliveTask = this._getActiveKeepaliveTask();\n    }\n\n    try {\n      await this._startCore(abortSignal);\n    } catch (err) {\n      // this two sentense should be set together. Consider client.stop() is called during _startCore()\n      this._changeState(WebPubSubClientState.Stopped);\n      if (this._activeKeepaliveTask) {\n        this._activeKeepaliveTask.abort();\n        this._activeKeepaliveTask = undefined;\n      }\n      this._isStopping = false;\n      throw err;\n    }\n  }\n\n  private async _startFromRestarting(abortSignal?: AbortSignalLike): Promise<void> {\n    if (this._state !== WebPubSubClientState.Disconnected) {\n      throw new Error(\"Client can be only restarted when it's Disconnected\");\n    }\n\n    try {\n      logger.verbose(\"Staring reconnecting.\");\n      await this._startCore(abortSignal);\n    } catch (err) {\n      this._changeState(WebPubSubClientState.Disconnected);\n      throw err;\n    }\n  }\n\n  private async _startCore(abortSignal?: AbortSignalLike): Promise<void> {\n    this._changeState(WebPubSubClientState.Connecting);\n\n    logger.info(\"Staring a new connection\");\n    // Reset before a pure new connection\n    this._sequenceId.reset();\n    this._isInitialConnected = false;\n    this._lastCloseEvent = undefined;\n    this._lastDisconnectedMessage = undefined;\n    this._connectionId = undefined;\n    this._reconnectionToken = undefined;\n    this._uri = undefined;\n\n    if (typeof this._credential.getClientAccessUrl === \"string\") {\n      this._uri = this._credential.getClientAccessUrl;\n    } else {\n      this._uri = await this._credential.getClientAccessUrl({\n        abortSignal: abortSignal,\n      } as GetClientAccessUrlOptions);\n    }\n\n    if (typeof this._uri !== \"string\") {\n      throw new Error(\n        `The clientAccessUrl must be a string but currently it's ${typeof this._uri}`,\n      );\n    }\n    await this._connectCore(this._uri);\n  }\n\n  /**\n   * Stop the client.\n   */\n  public stop(): void {\n    if (this._state === WebPubSubClientState.Stopped || this._isStopping) {\n      return;\n    }\n\n    // TODO: Maybe we need a better logic for stopping control\n    this._isStopping = true;\n    if (this._wsClient && this._wsClient.isOpen()) {\n      this._wsClient.close();\n    } else {\n      this._isStopping = false;\n    }\n    if (this._activeKeepaliveTask) {\n      this._activeKeepaliveTask.abort();\n      this._activeKeepaliveTask = undefined;\n    }\n  }\n\n  /**\n   * Add handler for connected event\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public on(event: \"connected\", listener: (e: OnConnectedArgs) => void): void;\n  /**\n   * Add handler for disconnected event\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public on(event: \"disconnected\", listener: (e: OnDisconnectedArgs) => void): void;\n  /**\n   * Add handler for stopped event\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public on(event: \"stopped\", listener: (e: OnStoppedArgs) => void): void;\n  /**\n   * Add handler for server messages\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public on(event: \"server-message\", listener: (e: OnServerDataMessageArgs) => void): void;\n  /**\n   * Add handler for group messags\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public on(event: \"group-message\", listener: (e: OnGroupDataMessageArgs) => void): void;\n  /**\n   * Add handler for rejoining group failed\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public on(event: \"rejoin-group-failed\", listener: (e: OnRejoinGroupFailedArgs) => void): void;\n  public on(\n    event:\n      | \"connected\"\n      | \"disconnected\"\n      | \"stopped\"\n      | \"server-message\"\n      | \"group-message\"\n      | \"rejoin-group-failed\",\n    listener: (e: any) => void,\n  ): void {\n    this._emitter.on(event, listener);\n  }\n\n  /**\n   * Remove handler for connected event\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public off(event: \"connected\", listener: (e: OnConnectedArgs) => void): void;\n  /**\n   * Remove handler for disconnected event\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public off(event: \"disconnected\", listener: (e: OnDisconnectedArgs) => void): void;\n  /**\n   * Remove handler for stopped event\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public off(event: \"stopped\", listener: (e: OnStoppedArgs) => void): void;\n  /**\n   * Remove handler for server message\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public off(event: \"server-message\", listener: (e: OnServerDataMessageArgs) => void): void;\n  /**\n   * Remove handler for group message\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public off(event: \"group-message\", listener: (e: OnGroupDataMessageArgs) => void): void;\n  /**\n   * Remove handler for rejoining group failed\n   * @param event - The event name\n   * @param listener - The handler\n   */\n  public off(event: \"rejoin-group-failed\", listener: (e: OnRejoinGroupFailedArgs) => void): void;\n  public off(\n    event:\n      | \"connected\"\n      | \"disconnected\"\n      | \"stopped\"\n      | \"server-message\"\n      | \"group-message\"\n      | \"rejoin-group-failed\",\n    listener: (e: any) => void,\n  ): void {\n    this._emitter.removeListener(event, listener);\n  }\n\n  private _emitEvent(event: \"connected\", args: OnConnectedArgs): void;\n  private _emitEvent(event: \"disconnected\", args: OnDisconnectedArgs): void;\n  private _emitEvent(event: \"stopped\", args: OnStoppedArgs): void;\n  private _emitEvent(event: \"server-message\", args: OnServerDataMessageArgs): void;\n  private _emitEvent(event: \"group-message\", args: OnGroupDataMessageArgs): void;\n  private _emitEvent(event: \"rejoin-group-failed\", args: OnRejoinGroupFailedArgs): void;\n  private _emitEvent(\n    event:\n      | \"connected\"\n      | \"disconnected\"\n      | \"stopped\"\n      | \"server-message\"\n      | \"group-message\"\n      | \"rejoin-group-failed\",\n    args: any,\n  ): void {\n    this._emitter.emit(event, args);\n  }\n\n  /**\n   * Send custom event to server.\n   * @param eventName - The event name\n   * @param content - The data content\n   * @param dataType - The data type\n   * @param options - The options\n   * @param abortSignal - The abort signal\n   */\n  public async sendEvent(\n    eventName: string,\n    content: JSONTypes | ArrayBuffer,\n    dataType: WebPubSubDataType,\n    options?: SendEventOptions,\n  ): Promise<WebPubSubResult> {\n    return await this._operationExecuteWithRetry(\n      () => this._sendEventAttempt(eventName, content, dataType, options),\n      options?.abortSignal,\n    );\n  }\n\n  private async _sendEventAttempt(\n    eventName: string,\n    content: JSONTypes | ArrayBuffer,\n    dataType: WebPubSubDataType,\n    options?: SendEventOptions,\n  ): Promise<WebPubSubResult> {\n    const fireAndForget = options?.fireAndForget ?? false;\n    if (!fireAndForget) {\n      return await this._sendMessageWithAckId(\n        (id) => {\n          return {\n            kind: \"sendEvent\",\n            dataType: dataType,\n            data: content,\n            ackId: id,\n            event: eventName,\n          } as SendEventMessage;\n        },\n        options?.ackId,\n        options?.abortSignal,\n      );\n    }\n\n    const message = {\n      kind: \"sendEvent\",\n      dataType: dataType,\n      data: content,\n      event: eventName,\n    } as SendEventMessage;\n\n    await this._sendMessage(message, options?.abortSignal);\n    return { isDuplicated: false };\n  }\n\n  /**\n   * Join the client to group\n   * @param groupName - The group name\n   * @param options - The join group options\n   */\n  public async joinGroup(groupName: string, options?: JoinGroupOptions): Promise<WebPubSubResult> {\n    return await this._operationExecuteWithRetry(\n      () => this._joinGroupAttempt(groupName, options),\n      options?.abortSignal,\n    );\n  }\n\n  private async _joinGroupAttempt(\n    groupName: string,\n    options?: JoinGroupOptions,\n  ): Promise<WebPubSubResult> {\n    const group = this._getOrAddGroup(groupName);\n    const result = await this._joinGroupCore(groupName, options);\n    group.isJoined = true;\n    return result;\n  }\n\n  private async _joinGroupCore(\n    groupName: string,\n    options?: JoinGroupOptions,\n  ): Promise<WebPubSubResult> {\n    return await this._sendMessageWithAckId(\n      (id) => {\n        return {\n          group: groupName,\n          ackId: id,\n          kind: \"joinGroup\",\n        } as JoinGroupMessage;\n      },\n      options?.ackId,\n      options?.abortSignal,\n    );\n  }\n\n  /**\n   * Leave the client from group\n   * @param groupName - The group name\n   * @param ackId - The optional ackId. If not specified, client will generate one.\n   * @param abortSignal - The abort signal\n   */\n  public async leaveGroup(\n    groupName: string,\n    options?: LeaveGroupOptions,\n  ): Promise<WebPubSubResult> {\n    return await this._operationExecuteWithRetry(\n      () => this._leaveGroupAttempt(groupName, options),\n      options?.abortSignal,\n    );\n  }\n\n  private async _leaveGroupAttempt(\n    groupName: string,\n    options?: LeaveGroupOptions,\n  ): Promise<WebPubSubResult> {\n    const group = this._getOrAddGroup(groupName);\n    const result = await this._sendMessageWithAckId(\n      (id) => {\n        return {\n          group: groupName,\n          ackId: id,\n          kind: \"leaveGroup\",\n        } as LeaveGroupMessage;\n      },\n      options?.ackId,\n      options?.abortSignal,\n    );\n    group.isJoined = false;\n    return result;\n  }\n\n  /**\n   * Send message to group.\n   * @param groupName - The group name\n   * @param content - The data content\n   * @param dataType - The data type\n   * @param options - The options\n   * @param abortSignal - The abort signal\n   */\n  public async sendToGroup(\n    groupName: string,\n    content: JSONTypes | ArrayBuffer,\n    dataType: WebPubSubDataType,\n    options?: SendToGroupOptions,\n  ): Promise<WebPubSubResult> {\n    return await this._operationExecuteWithRetry(\n      () => this._sendToGroupAttempt(groupName, content, dataType, options),\n      options?.abortSignal,\n    );\n  }\n\n  private async _sendToGroupAttempt(\n    groupName: string,\n    content: JSONTypes | ArrayBuffer,\n    dataType: WebPubSubDataType,\n    options?: SendToGroupOptions,\n  ): Promise<WebPubSubResult> {\n    const fireAndForget = options?.fireAndForget ?? false;\n    const noEcho = options?.noEcho ?? false;\n    if (!fireAndForget) {\n      return await this._sendMessageWithAckId(\n        (id) => {\n          return {\n            kind: \"sendToGroup\",\n            group: groupName,\n            dataType: dataType,\n            data: content,\n            ackId: id,\n            noEcho: noEcho,\n          } as SendToGroupMessage;\n        },\n        options?.ackId,\n        options?.abortSignal,\n      );\n    }\n\n    const message = {\n      kind: \"sendToGroup\",\n      group: groupName,\n      dataType: dataType,\n      data: content,\n      noEcho: noEcho,\n    } as SendToGroupMessage;\n\n    await this._sendMessage(message, options?.abortSignal);\n    return { isDuplicated: false };\n  }\n\n  private _getWebSocketClientFactory(): WebSocketClientFactoryLike {\n    return new WebSocketClientFactory();\n  }\n\n  private async _trySendSequenceAck(): Promise<void> {\n    if (!this._protocol.isReliableSubProtocol) {\n      return;\n    }\n    const [isUpdated, seqId] = this._sequenceId.tryGetSequenceId();\n    if (isUpdated && seqId) {\n      const message: SequenceAckMessage = {\n        kind: \"sequenceAck\",\n        sequenceId: seqId!,\n      };\n      try {\n        await this._sendMessage(message);\n      } catch {\n        this._sequenceId.tryUpdate(seqId!); // If sending failed, mark it as updated so that it can be sent again.\n      }\n    }\n  }\n\n  private _connectCore(uri: string): Promise<void> {\n    if (this._isStopping) {\n      throw new Error(\"Can't start a client during stopping\");\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      // This part is executed sync\n      const client = (this._wsClient = this._getWebSocketClientFactory().create(\n        uri,\n        this._protocol.name,\n      ));\n      client.onopen(() => {\n        // There's a case that client called stop() before this method. We need to check and close it if it's the case.\n        if (this._isStopping) {\n          try {\n            client.close();\n          } catch {}\n\n          reject(new Error(`The client is stopped`));\n        }\n        logger.verbose(\"WebSocket connection has opened\");\n        this._changeState(WebPubSubClientState.Connected);\n        if (this._protocol.isReliableSubProtocol) {\n          if (this._sequenceAckTask != null) {\n            this._sequenceAckTask.abort();\n          }\n          this._sequenceAckTask = new AbortableTask(async () => {\n            await this._trySendSequenceAck();\n          }, 1000);\n        }\n\n        resolve();\n      });\n\n      client.onerror((e) => {\n        if (this._sequenceAckTask != null) {\n          this._sequenceAckTask.abort();\n        }\n        reject(e);\n      });\n\n      client.onclose((code: number, reason: string) => {\n        if (this._state === WebPubSubClientState.Connected) {\n          logger.verbose(\"WebSocket closed after open\");\n          if (this._sequenceAckTask != null) {\n            this._sequenceAckTask.abort();\n          }\n          logger.info(`WebSocket connection closed. Code: ${code}, Reason: ${reason}`);\n          this._lastCloseEvent = { code: code, reason: reason };\n          this._handleConnectionClose.call(this);\n        } else {\n          logger.verbose(\"WebSocket closed before open\");\n          reject(new Error(`Failed to start WebSocket: ${code}`));\n        }\n      });\n\n      client.onmessage((data: any) => {\n        const handleAckMessage = (message: AckMessage): void => {\n          if (this._ackMap.has(message.ackId)) {\n            const entity = this._ackMap.get(message.ackId)!;\n            this._ackMap.delete(message.ackId);\n            const isDuplicated: boolean =\n              message.error != null && message.error.name === \"Duplicate\";\n            if (message.success || isDuplicated) {\n              entity.resolve({\n                ackId: message.ackId,\n                isDuplicated: isDuplicated,\n              } as WebPubSubResult);\n            } else {\n              entity.reject(\n                new SendMessageError(\"Failed to send message.\", {\n                  ackId: message.ackId,\n                  errorDetail: message.error,\n                } as SendMessageErrorOptions),\n              );\n            }\n          }\n        };\n\n        const handleConnectedMessage = async (message: ConnectedMessage): Promise<void> => {\n          this._connectionId = message.connectionId;\n          this._reconnectionToken = message.reconnectionToken;\n\n          if (!this._isInitialConnected) {\n            this._isInitialConnected = true;\n\n            if (this._options.autoRejoinGroups) {\n              const groupPromises: Promise<void>[] = [];\n              this._groupMap.forEach((g) => {\n                if (g.isJoined) {\n                  groupPromises.push(\n                    (async () => {\n                      try {\n                        await this._joinGroupCore(g.name);\n                      } catch (err) {\n                        this._safeEmitRejoinGroupFailed(g.name, err);\n                      }\n                    })(),\n                  );\n                }\n              });\n\n              try {\n                await Promise.all(groupPromises);\n              } catch {}\n            }\n\n            this._safeEmitConnected(message.connectionId, message.userId);\n          }\n        };\n\n        const handleDisconnectedMessage = (message: DisconnectedMessage): void => {\n          this._lastDisconnectedMessage = message;\n        };\n\n        const handleGroupDataMessage = (message: GroupDataMessage): void => {\n          if (message.sequenceId != null) {\n            const diff = this._sequenceId.tryUpdate(message.sequenceId);\n            if (diff === 0) {\n              // drop duplicated message\n              return;\n            }\n\n            // If the diff is larger than the threshold, we must ack quicker to avoid slow client drop.\n            if (diff > this._quickSequenceAckDiff) {\n              this._trySendSequenceAck();\n            }\n          }\n\n          this._safeEmitGroupMessage(message);\n        };\n\n        const handleServerDataMessage = (message: ServerDataMessage): void => {\n          if (message.sequenceId != null) {\n            const diff = this._sequenceId.tryUpdate(message.sequenceId);\n            if (diff === 0) {\n              // drop duplicated message\n              return;\n            }\n\n            // If the diff is larger than the threshold, we must ack quicker to avoid slow client drop.\n            if (diff > this._quickSequenceAckDiff) {\n              this._trySendSequenceAck();\n            }\n          }\n\n          this._safeEmitServerMessage(message);\n        };\n\n        let messages: WebPubSubMessage[] | WebPubSubMessage | null;\n        try {\n          let convertedData: Buffer | ArrayBuffer | string;\n          if (Array.isArray(data)) {\n            convertedData = Buffer.concat(data);\n          } else {\n            convertedData = data;\n          }\n\n          messages = this._protocol.parseMessages(convertedData);\n          if (messages === null) {\n            // null means the message is not recognized.\n            return;\n          }\n        } catch (err) {\n          logger.warning(\"An error occurred while parsing the message from service\", err);\n          throw err;\n        }\n\n        if (!Array.isArray(messages)) {\n          messages = [messages];\n        }\n\n        messages.forEach((message) => {\n          try {\n            switch (message.kind) {\n              case \"ack\": {\n                handleAckMessage(message as AckMessage);\n                break;\n              }\n              case \"connected\": {\n                handleConnectedMessage(message as ConnectedMessage);\n                break;\n              }\n              case \"disconnected\": {\n                handleDisconnectedMessage(message as DisconnectedMessage);\n                break;\n              }\n              case \"groupData\": {\n                handleGroupDataMessage(message as GroupDataMessage);\n                break;\n              }\n              case \"serverData\": {\n                handleServerDataMessage(message as ServerDataMessage);\n                break;\n              }\n            }\n          } catch (err) {\n            logger.warning(\n              `An error occurred while handling the message with kind: ${message.kind} from service`,\n              err,\n            );\n          }\n        });\n      });\n    });\n  }\n\n  private async _handleConnectionCloseAndNoRecovery(): Promise<void> {\n    this._state = WebPubSubClientState.Disconnected;\n\n    this._safeEmitDisconnected(this._connectionId, this._lastDisconnectedMessage);\n\n    // Auto reconnect or stop\n    if (this._options.autoReconnect) {\n      await this._autoReconnect();\n    } else {\n      await this._handleConnectionStopped();\n    }\n  }\n\n  private async _autoReconnect(): Promise<void> {\n    let isSuccess = false;\n    let attempt = 0;\n    try {\n      while (!this._isStopping) {\n        try {\n          await this._startFromRestarting();\n          isSuccess = true;\n          break;\n        } catch (err) {\n          logger.warning(\"An attempt to reconnect connection failed.\", err);\n\n          attempt++;\n          const delayInMs = this._reconnectRetryPolicy.nextRetryDelayInMs(attempt);\n\n          if (delayInMs == null) {\n            break;\n          }\n\n          try {\n            logger.verbose(`Delay time for reconnect attempt ${attempt}: ${delayInMs}`);\n            await delay(delayInMs);\n          } catch {}\n        }\n      }\n    } finally {\n      if (!isSuccess) {\n        this._handleConnectionStopped();\n      }\n    }\n  }\n\n  private _handleConnectionStopped(): void {\n    this._isStopping = false;\n    this._state = WebPubSubClientState.Stopped;\n    this._safeEmitStopped();\n  }\n\n  private _getActiveKeepaliveTask(): AbortableTask {\n    return new AbortableTask(async () => {\n      this._sequenceId.tryUpdate(0); // force update\n    }, this._activeTimeoutInMs);\n  }\n\n  private async _sendMessage(\n    message: WebPubSubMessage,\n    abortSignal?: AbortSignalLike,\n  ): Promise<void> {\n    if (!this._wsClient || !this._wsClient.isOpen()) {\n      throw new Error(\"The connection is not connected.\");\n    }\n\n    const payload = this._protocol.writeMessage(message);\n    await this._wsClient!.send(payload, abortSignal);\n  }\n\n  private async _sendMessageWithAckId(\n    messageProvider: (ackId: number) => WebPubSubMessage,\n    ackId?: number,\n    abortSignal?: AbortSignalLike,\n  ): Promise<WebPubSubResult> {\n    if (ackId == null) {\n      ackId = this.nextAckId();\n    }\n\n    const message = messageProvider(ackId);\n    if (!this._ackMap.has(ackId)) {\n      this._ackMap.set(ackId, new AckEntity(ackId));\n    }\n    const entity = this._ackMap.get(ackId)!;\n\n    try {\n      await this._sendMessage(message, abortSignal);\n    } catch (error) {\n      this._ackMap.delete(ackId);\n\n      let errorMessage: string = \"\";\n      if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      throw new SendMessageError(errorMessage, { ackId: ackId });\n    }\n\n    if (abortSignal) {\n      try {\n        return await abortablePromise(entity.promise(), abortSignal);\n      } catch (err) {\n        if (err instanceof Error && err.name === \"AbortError\") {\n          throw new SendMessageError(\"Cancelled by abortSignal\", { ackId: ackId });\n        }\n        throw err;\n      }\n    }\n\n    return await entity.promise();\n  }\n\n  private async _handleConnectionClose(): Promise<void> {\n    // Clean ack cache\n    this._ackMap.forEach((value, key) => {\n      if (this._ackMap.delete(key)) {\n        value.reject(\n          new SendMessageError(\"Connection is disconnected before receive ack from the service\", {\n            ackId: value.ackId,\n          } as SendMessageErrorOptions),\n        );\n      }\n    });\n\n    if (this._isStopping) {\n      logger.warning(\"The client is stopping state. Stop recovery.\");\n      this._handleConnectionCloseAndNoRecovery();\n      return;\n    }\n\n    if (this._lastCloseEvent && this._lastCloseEvent.code === 1008) {\n      logger.warning(\"The websocket close with status code 1008. Stop recovery.\");\n      this._handleConnectionCloseAndNoRecovery();\n      return;\n    }\n\n    if (!this._protocol.isReliableSubProtocol) {\n      logger.warning(\"The protocol is not reliable, recovery is not applicable\");\n      this._handleConnectionCloseAndNoRecovery();\n      return;\n    }\n\n    // Build recovery uri\n    const recoveryUri = this._buildRecoveryUri();\n    if (!recoveryUri) {\n      logger.warning(\"Connection id or reconnection token is not available\");\n      this._handleConnectionCloseAndNoRecovery();\n      return;\n    }\n\n    // Try recover connection\n    let recovered = false;\n    this._state = WebPubSubClientState.Recovering;\n    const abortSignal = AbortController.timeout(30 * 1000);\n    try {\n      while (!abortSignal.aborted || this._isStopping) {\n        try {\n          await this._connectCore.call(this, recoveryUri);\n          recovered = true;\n          return;\n        } catch {\n          await delay(1000);\n        }\n      }\n    } finally {\n      if (!recovered) {\n        logger.warning(\"Recovery attempts failed more then 30 seconds or the client is stopping\");\n        this._handleConnectionCloseAndNoRecovery();\n      }\n    }\n  }\n\n  private _safeEmitConnected(connectionId: string, userId: string): void {\n    this._emitEvent(\"connected\", {\n      connectionId: connectionId,\n      userId: userId,\n    } as OnConnectedArgs);\n  }\n\n  private _safeEmitDisconnected(\n    connectionId: string | undefined,\n    lastDisconnectedMessage: DisconnectedMessage | undefined,\n  ): void {\n    this._emitEvent(\"disconnected\", {\n      connectionId: connectionId,\n      message: lastDisconnectedMessage,\n    } as OnDisconnectedArgs);\n  }\n\n  private _safeEmitGroupMessage(message: GroupDataMessage): void {\n    this._emitEvent(\"group-message\", {\n      message: message,\n    } as OnGroupDataMessageArgs);\n  }\n\n  private _safeEmitServerMessage(message: ServerDataMessage): void {\n    this._emitEvent(\"server-message\", {\n      message: message,\n    } as OnServerDataMessageArgs);\n  }\n\n  private _safeEmitStopped(): void {\n    this._emitEvent(\"stopped\", {});\n  }\n\n  private _safeEmitRejoinGroupFailed(groupName: string, err: unknown): void {\n    this._emitEvent(\"rejoin-group-failed\", {\n      group: groupName,\n      error: err,\n    } as OnRejoinGroupFailedArgs);\n  }\n\n  private _buildDefaultOptions(clientOptions: WebPubSubClientOptions): WebPubSubClientOptions {\n    if (clientOptions.autoReconnect == null) {\n      clientOptions.autoReconnect = true;\n    }\n\n    if (clientOptions.autoRejoinGroups == null) {\n      clientOptions.autoRejoinGroups = true;\n    }\n\n    if (clientOptions.protocol == null) {\n      clientOptions.protocol = WebPubSubJsonReliableProtocol();\n    }\n\n    this._buildMessageRetryOptions(clientOptions);\n    this._buildReconnectRetryOptions(clientOptions);\n\n    return clientOptions;\n  }\n\n  private _buildMessageRetryOptions(clientOptions: WebPubSubClientOptions): void {\n    if (!clientOptions.messageRetryOptions) {\n      clientOptions.messageRetryOptions = {};\n    }\n\n    if (\n      clientOptions.messageRetryOptions.maxRetries == null ||\n      clientOptions.messageRetryOptions.maxRetries < 0\n    ) {\n      clientOptions.messageRetryOptions.maxRetries = 3;\n    }\n\n    if (\n      clientOptions.messageRetryOptions.retryDelayInMs == null ||\n      clientOptions.messageRetryOptions.retryDelayInMs < 0\n    ) {\n      clientOptions.messageRetryOptions.retryDelayInMs = 1000;\n    }\n\n    if (\n      clientOptions.messageRetryOptions.maxRetryDelayInMs == null ||\n      clientOptions.messageRetryOptions.maxRetryDelayInMs < 0\n    ) {\n      clientOptions.messageRetryOptions.maxRetryDelayInMs = 30000;\n    }\n\n    if (clientOptions.messageRetryOptions.mode == null) {\n      clientOptions.messageRetryOptions.mode = \"Fixed\";\n    }\n  }\n\n  private _buildReconnectRetryOptions(clientOptions: WebPubSubClientOptions): void {\n    if (!clientOptions.reconnectRetryOptions) {\n      clientOptions.reconnectRetryOptions = {};\n    }\n\n    if (\n      clientOptions.reconnectRetryOptions.maxRetries == null ||\n      clientOptions.reconnectRetryOptions.maxRetries < 0\n    ) {\n      clientOptions.reconnectRetryOptions.maxRetries = Number.MAX_VALUE;\n    }\n\n    if (\n      clientOptions.reconnectRetryOptions.retryDelayInMs == null ||\n      clientOptions.reconnectRetryOptions.retryDelayInMs < 0\n    ) {\n      clientOptions.reconnectRetryOptions.retryDelayInMs = 1000;\n    }\n\n    if (\n      clientOptions.reconnectRetryOptions.maxRetryDelayInMs == null ||\n      clientOptions.reconnectRetryOptions.maxRetryDelayInMs < 0\n    ) {\n      clientOptions.reconnectRetryOptions.maxRetryDelayInMs = 30000;\n    }\n\n    if (clientOptions.reconnectRetryOptions.mode == null) {\n      clientOptions.reconnectRetryOptions.mode = \"Fixed\";\n    }\n  }\n\n  private _buildRecoveryUri(): string | null {\n    if (this._connectionId && this._reconnectionToken && this._uri) {\n      const url = new URL(this._uri);\n      url.searchParams.append(\"awps_connection_id\", this._connectionId);\n      url.searchParams.append(\"awps_reconnection_token\", this._reconnectionToken);\n      return url.toString();\n    }\n    return null;\n  }\n\n  private _getOrAddGroup(name: string): WebPubSubGroup {\n    if (!this._groupMap.has(name)) {\n      this._groupMap.set(name, new WebPubSubGroup(name));\n    }\n    return this._groupMap.get(name) as WebPubSubGroup;\n  }\n\n  private _changeState(newState: WebPubSubClientState): void {\n    logger.verbose(\n      `The client state transfer from ${this._state.toString()} to ${newState.toString()}`,\n    );\n    this._state = newState;\n  }\n\n  private async _operationExecuteWithRetry<T>(\n    inner: () => Promise<T>,\n    signal?: AbortSignalLike,\n  ): Promise<T> {\n    let retryAttempt = 0;\n\n    while (true) {\n      try {\n        return await inner.call(this);\n      } catch (err) {\n        retryAttempt++;\n        const delayInMs = this._messageRetryPolicy.nextRetryDelayInMs(retryAttempt);\n        if (delayInMs == null) {\n          throw err;\n        }\n\n        await delay(delayInMs);\n\n        if (signal?.aborted) {\n          throw err;\n        }\n      }\n    }\n  }\n}\n\nclass RetryPolicy {\n  private _retryOptions: WebPubSubRetryOptions;\n  private _maxRetriesToGetMaxDelay: number;\n\n  public constructor(retryOptions: WebPubSubRetryOptions) {\n    this._retryOptions = retryOptions;\n    this._maxRetriesToGetMaxDelay = Math.ceil(\n      Math.log2(this._retryOptions.maxRetryDelayInMs!) -\n        Math.log2(this._retryOptions.retryDelayInMs!) +\n        1,\n    );\n  }\n\n  public nextRetryDelayInMs(retryAttempt: number): number | null {\n    if (retryAttempt > this._retryOptions.maxRetries!) {\n      return null;\n    } else {\n      if (this._retryOptions.mode! === \"Fixed\") {\n        return this._retryOptions.retryDelayInMs!;\n      } else {\n        return this._calculateExponentialDelay(retryAttempt);\n      }\n    }\n  }\n\n  private _calculateExponentialDelay(attempt: number): number {\n    if (attempt >= this._maxRetriesToGetMaxDelay) {\n      return this._retryOptions.maxRetryDelayInMs!;\n    } else {\n      return (1 << (attempt - 1)) * this._retryOptions.retryDelayInMs!;\n    }\n  }\n}\n\nclass WebPubSubGroup {\n  public readonly name: string;\n  public isJoined = false;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass AckEntity {\n  private readonly _promise: Promise<WebPubSubResult>;\n  private _resolve?: (value: WebPubSubResult | PromiseLike<WebPubSubResult>) => void;\n  private _reject?: (reason?: any) => void;\n\n  constructor(ackId: number) {\n    this._promise = new Promise<WebPubSubResult>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n    this.ackId = ackId;\n  }\n\n  public ackId;\n\n  public promise(): Promise<WebPubSubResult> {\n    return this._promise;\n  }\n\n  public resolve(value: WebPubSubResult | PromiseLike<WebPubSubResult>): void {\n    this._resolve!(value);\n  }\n\n  public reject(reason?: any): void {\n    this._reject!(reason);\n  }\n}\n\nclass SequenceId {\n  private _sequenceId: number;\n  private _isUpdate: boolean;\n\n  constructor() {\n    this._sequenceId = 0;\n    this._isUpdate = false;\n  }\n\n  public tryUpdate(sequenceId: number): number {\n    this._isUpdate = true;\n    if (sequenceId > this._sequenceId) {\n      const diff = sequenceId - this._sequenceId;\n      this._sequenceId = sequenceId;\n      return diff;\n    }\n    return 0;\n  }\n\n  public tryGetSequenceId(): [boolean, number | null] {\n    if (this._isUpdate) {\n      this._isUpdate = false;\n      return [true, this._sequenceId];\n    }\n\n    return [false, null];\n  }\n\n  public reset(): void {\n    this._sequenceId = 0;\n    this._isUpdate = false;\n  }\n}\n\nclass AbortableTask {\n  private readonly _func: (obj?: any) => Promise<void>;\n  private readonly _abortController: AbortController;\n  private readonly _interval: number;\n  private readonly _obj?: any;\n\n  constructor(func: (obj?: any) => Promise<void>, interval: number, obj?: any) {\n    this._func = func;\n    this._abortController = new AbortController();\n    this._interval = interval;\n    this._obj = obj;\n    this._start();\n  }\n\n  public abort(): void {\n    try {\n      this._abortController.abort();\n    } catch {}\n  }\n\n  private async _start(): Promise<void> {\n    const signal = this._abortController.signal;\n    while (!signal.aborted) {\n      try {\n        await this._func(this._obj);\n      } catch {\n      } finally {\n        await delay(this._interval);\n      }\n    }\n  }\n}\n"],"names":["createClientLogger","Buffer","base.parseMessages","base.writeMessage","AbortError","delay","AbortController"],"mappings":"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"}